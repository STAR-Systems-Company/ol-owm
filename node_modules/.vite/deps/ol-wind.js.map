{
  "version": 3,
  "sources": ["../../ol-wind/src/renderer.ts", "../../ol-wind/src/index.ts"],
  "sourcesContent": ["import type { FrameState } from 'ol/PluggableMap';\nimport type { Coordinate } from 'ol/coordinate';\nimport type { Pixel } from 'ol/pixel';\nimport { fromUserExtent, fromUserCoordinate, toUserCoordinate, transform as transformProj } from 'ol/proj';\nimport CanvasLayerRenderer from 'ol/renderer/canvas/Layer';\nimport {\n  toString as toTransformString,\n  compose,\n  makeInverse,\n  apply as applyTransform,\n  create as createTransform,\n  type Transform,\n} from 'ol/transform';\nimport { containsExtent, intersects, containsCoordinate, getIntersection, isEmpty } from 'ol/extent';\nimport type { Extent } from 'ol/extent';\n\nimport { WindCore } from 'wind-core';\nimport type { IOptions, Field } from 'wind-core';\n\nimport type { WindLayer } from './index';\n\nconst ViewHint = {\n  ANIMATING: 0,\n  INTERACTING: 1,\n};\n\nexport default class WindLayerRender extends CanvasLayerRenderer<any> {\n  protected container: HTMLElement;\n  protected inversePixelTransform: Transform;\n  protected pixelTransform: Transform;\n\n  public wind: WindCore;\n\n  constructor(layer) {\n    super(layer);\n\n    this.pixelTransform = createTransform();\n    this.inversePixelTransform = createTransform();\n  }\n\n  // useContainer(target: HTMLElement, transform: string, backgroundColor: number) 这里在 v6.3.0 后有 break change\n  useContainer(target: HTMLElement, transform: string, backgroundColor?: string) {\n    // 此处强制新建 canvas\n    super.useContainer(null as any, transform, backgroundColor);\n  }\n\n  getBackground(frameState: FrameState) {\n    // @ts-ignore 6.3.0 之前无此函数\n    if (super.getBackground) {\n      return super.getBackground(frameState)\n    }\n\n    return ''\n  }\n\n  prepareFrame(frameState: FrameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const viewState = frameState.viewState;\n\n    const hints = frameState.viewHints;\n\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(\n        renderedExtent as Extent,\n        fromUserExtent(layerState.extent, viewState.projection),\n      );\n    }\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !frameState.animate &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent as Extent)\n    ) {\n      if (this.wind?.isStop?.()) {\n        this.wind.start();\n      }\n      return true;\n    } else {\n      const layer = this.getLayer() as unknown as WindLayer;\n      return layer.get('forceRender');\n    }\n  }\n\n  prepareContainer(frameState: FrameState, target: HTMLElement) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n    const width = Math.round(size[0] * pixelRatio);\n    const height = Math.round(size[1] * pixelRatio);\n    // set forward and inverse pixel transforms\n    compose(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2,\n    );\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n\n    if (!this.containerReused) {\n      const canvas = this.context.canvas;\n      if (canvas.width != width || canvas.height != height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        // this.getRenderContext(frameState).globalCompositeOperation = 'source-over';\n      }\n      if (canvasTransform !== canvas.style.transform) {\n        canvas.style.transform = canvasTransform;\n      }\n    }\n  }\n\n  getRenderContext(frameState: FrameState) {\n    return this.context;\n  }\n\n  renderFrame(frameState: FrameState, target: HTMLElement) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const viewState = frameState.viewState;\n\n    this.prepareContainer(frameState, target);\n\n    const context = this.getRenderContext(frameState);\n\n    context.imageSmoothingEnabled = false;\n    this.preRender(context, frameState);\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(layerState.extent, viewState.projection);\n      render = intersects(layerExtent, frameState.extent as Extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent as Extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const layer = this.getLayer();\n    const opt = layer.getWindOptions();\n    const data = layer.getData();\n\n    this.execute(this.context, frameState, opt, data);\n\n    this.postRender(this.context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n\n    context.imageSmoothingEnabled = true;\n\n    return this.container;\n  }\n\n  public setOptions(options: Partial<IOptions>) {\n    if (this.wind) {\n      this.wind.setOptions(options);\n      // wind.prerender();\n    }\n  }\n\n  public setData(field: Field) {\n    if (this.wind) {\n      this.wind.updateData(field);\n    }\n  }\n\n  execute(\n    context: CanvasRenderingContext2D,\n    frameState: FrameState,\n    opt: Partial<IOptions>,\n    data: any,\n  ) {\n    if (!this.wind) {\n      this.wind = new WindCore(context, opt, data);\n\n      this.wind.project = this.getPixelFromCoordinateInternal.bind(this);\n      this.wind.unproject = this.getCoordinateFromPixel.bind(this);\n      this.wind.intersectsCoordinate = this.intersectsCoordinate.bind(this);\n      this.wind.postrender = () => {\n        //\n      };\n      this.wind.prerender();\n    }\n  }\n\n  private getPixelFromCoordinateInternal(coordinate: Coordinate): [number, number] | null {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    } else {\n      const viewState = frameState.viewState;\n      const pixelRatio = frameState.pixelRatio;\n      const point = transformProj(coordinate, 'EPSG:4326', viewState.projection);\n      const viewCoordinate = fromUserCoordinate(point, viewState.projection);\n      const pixel = applyTransform(frameState.coordinateToPixelTransform, viewCoordinate.slice(0, 2));\n      return [pixel[0] * pixelRatio, pixel[1] * pixelRatio];\n    }\n  }\n\n  private getCoordinateFromPixel(pixel: Pixel): [number, number] | null {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    } else {\n      const viewState = frameState.viewState;\n      const viewCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice(0, 2));\n      const coordinate = toUserCoordinate(viewCoordinate, viewState.projection);\n      const point = transformProj(coordinate, viewState.projection, 'EPSG:4326');\n      return [point[0], point[1]];\n    }\n  }\n\n  private intersectsCoordinate(coordinate: Coordinate): boolean {\n    const frameState = this.frameState;\n    if (frameState) {\n      const viewState = frameState.viewState;\n      const point = transformProj(coordinate, 'EPSG:4326', viewState.projection);\n      const viewCoordinate = fromUserCoordinate(point, viewState.projection);\n      // const extent = getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, frameState.size.map((item) => item * frameState.pixelRatio));\n      return containsCoordinate(frameState.extent as Extent, viewCoordinate.slice(0, 2));\n    }\n\n    return true;\n  }\n}\n", "import { Layer } from 'ol/layer';\nimport type { PluggableMap} from 'ol';\nimport type { FrameState } from 'ol/PluggableMap';\nimport WindLayerRender from './renderer';\n\nimport { isArray, formatData, assign, defaultOptions } from 'wind-core';\n\nimport type { IOptions, IField, Field } from 'wind-core';\n\nconst _options = {\n  forceRender: true,\n  windOptions: {},\n};\n\nexport { Field } from 'wind-core';\n\nexport interface IWindOptions extends IOptions {\n  /**\n   * 配置是否强制渲染；ol 对图层有一定的优化策略，在地图拖动，缩放等交互会隐藏图层，如果我们期望在拖动缩放\n   * 也需要保持图层显示，那么可以开启器配置（默认开启）\n   */\n  forceRender: boolean;\n\n  /**\n   * 风场渲染相关配置\n   */\n  windOptions: Partial<IOptions>;\n\n  /**\n   * 风场数据相关配置\n   */\n  fieldOptions: Partial<IField>;\n  [key: string]: any;\n}\n\nexport class WindLayer extends Layer {\n  private field: Field | undefined;\n  private options: IWindOptions;\n\n  constructor(data: any, options: any) {\n    const opt = assign({}, _options, options);\n\n    super(opt);\n\n    this.options = opt;\n\n    // @ts-ignore @tip overwrite for layer className and disable containerReused\n    this.className_ = options.className !== undefined ? options.className : 'wind-layer';\n\n    this.pickWindOptions();\n\n    if (data) {\n      this.setData(data, options.fieldOptions);\n    }\n  }\n\n  /**\n   * 兼容旧版调用方式，现在可以使用以下方式添加图层：\n   * ```ts\n   * 1. 常规方式\n   * map.addLayer(windLayer);\n   *\n   * 2. setMap 会脱离 ol 地图的图层管理\n   *\n   * layer.setMap(map);\n   *\n   * 3. 调用 appendTo\n   *\n   * layer.appendTo(map);\n   * ```\n   * @param map\n   */\n  public appendTo(map: any) {\n    map.addLayer(this);\n  }\n\n  private onAdd() {\n    const renderer = this.getRenderer();\n    if (renderer) {\n      renderer.wind?.start();\n    }\n  }\n\n  private onRemove() {\n    const renderer = this.getRenderer();\n    if (renderer) {\n      renderer.wind.stop();\n    }\n  }\n\n  protected createRenderer(): any {\n    // @ts-ignore need resolve\n    return new WindLayerRender(this);\n  }\n\n  protected getRenderer() {\n    return super.getRenderer() as WindLayerRender;\n  }\n\n  private pickWindOptions() {\n    Object.keys(defaultOptions).forEach((key: string) => {\n      if (key in this.options) {\n        if (this.options.windOptions === undefined) {\n          this.options.windOptions = {};\n        }\n        this.options.windOptions[key] = this.options[key];\n      }\n    });\n  }\n\n  /**\n   * 获取图层现有数据\n   * get wind layer data\n   */\n  // @ts-ignore overwrite base layer\n  public getData() {\n    return this.field;\n  }\n\n  /**\n   * 设置图层数据\n   * set layer data\n   * @param data\n   * @param options\n   * @returns {WindLayer}\n   */\n  public setData(data: any, options: Partial<IField> = {}) {\n    if (data && data.checkFields && data.checkFields()) {\n      this.field = data;\n    } else if (isArray(data)) {\n      this.field = formatData(data, options);\n    } else {\n      console.error('Illegal data');\n    }\n\n    const renderer = this.getRenderer();\n    if (renderer && this.field) {\n      renderer.setData(this.field);\n    }\n\n    this.changed();\n\n    return this;\n  }\n\n  /**\n   * 设置风场图层的配置项\n   * @param options\n   */\n  public setWindOptions(options: Partial<IOptions>) {\n    const beforeOptions = this.options.windOptions || {};\n    this.options = assign(this.options, {\n      windOptions: assign(beforeOptions, options || {}),\n    });\n\n    const renderer = this.getRenderer();\n    if (renderer) {\n      const windOptions = this.options.windOptions;\n      renderer.setOptions(windOptions);\n    }\n\n    this.changed();\n  }\n\n  /**\n   * 获取风场图层渲染的配置项\n   */\n  public getWindOptions() {\n    return this.options.windOptions || {};\n  }\n\n  render(frameState: FrameState, target: HTMLElement): any {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer && layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n    return null;\n  }\n\n  // since v6\n  setMapInternal(map: PluggableMap) {\n    super.setMapInternal(map);\n\n    if (!map) {\n      this.onRemove();\n    } else {\n      this.onAdd()\n    }\n  }\n\n  /**\n   * 支持以 setMap 方式添加图层\n   * @param map\n   */\n  public setMap(map: PluggableMap) {\n    super.setMap(map);\n    if (!map) {\n      this.onRemove();\n    } else {\n      this.onAdd()\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["createTransform", "transform", "toTransformString", "transformProj", "applyTransform", "Layer_default"]
}
