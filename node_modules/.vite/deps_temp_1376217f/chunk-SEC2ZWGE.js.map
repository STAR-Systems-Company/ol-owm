{
  "version": 3,
  "sources": ["../../colord/index.mjs", "../../@sakitam-gis/vis-engine/src/utils/shader.ts", "../../@sakitam-gis/vis-engine/src/utils/math.ts", "../../@sakitam-gis/vis-engine/src/utils/gl.ts", "../../@sakitam-gis/vis-engine/src/utils/index.ts", "../../@sakitam-gis/vis-engine/src/animation/Clock.ts", "../../@sakitam-gis/vis-engine/src/animation/Raf.ts", "../../@sakitam-gis/vis-engine/src/core/Event.ts", "../../@sakitam-gis/vis-engine/src/math/Vector.ts", "../../@sakitam-gis/vis-engine/src/math/Vector2.ts", "../../@sakitam-gis/vis-engine/src/math/Quaternion.ts", "../../@sakitam-gis/vis-engine/src/math/Vector3.ts", "../../@sakitam-gis/vis-engine/src/math/Vector4.ts", "../../@sakitam-gis/vis-engine/src/math/Matrix.ts", "../../@sakitam-gis/vis-engine/src/math/Matrix3.ts", "../../@sakitam-gis/vis-engine/src/math/Matrix4.ts", "../../@sakitam-gis/vis-engine/src/math/Euler.ts", "../../@sakitam-gis/vis-engine/node_modules/.pnpm/colord@2.9.3/node_modules/colord/plugins/names.mjs", "../../@sakitam-gis/vis-engine/src/math/Color.ts", "../../@sakitam-gis/vis-engine/src/math/ProjectionMatrix.ts", "../../@sakitam-gis/vis-engine/src/objects/Object3D.ts", "../../@sakitam-gis/vis-engine/src/core/Base.ts", "../../@sakitam-gis/vis-engine/src/core/BufferAttribute.ts", "../../@sakitam-gis/vis-engine/src/core/Geometry.ts", "../../@sakitam-gis/vis-engine/src/objects/Mesh.ts", "../../@sakitam-gis/vis-engine/src/objects/Scene.ts", "../../@sakitam-gis/vis-engine/src/core/State.ts", "../../@sakitam-gis/vis-engine/src/core/Renderer.ts", "../../@sakitam-gis/vis-engine/src/core/Resource.ts", "../../@sakitam-gis/vis-engine/src/core/RenderBuffer.ts", "../../@sakitam-gis/vis-engine/src/core/Texture.ts", "../../@sakitam-gis/vis-engine/src/core/DataTexture.ts", "../../@sakitam-gis/vis-engine/src/core/RenderTarget.ts", "../../@sakitam-gis/vis-engine/src/geometries/Plane.ts", "../../@sakitam-gis/vis-engine/src/geometries/Box.ts", "../../@sakitam-gis/vis-engine/src/core/Shader.ts", "../../@sakitam-gis/vis-engine/src/core/Program.ts", "../../@sakitam-gis/vis-engine/src/core/Texture3D.ts", "../../@sakitam-gis/vis-engine/src/cameras/Camera.ts", "../../@sakitam-gis/vis-engine/src/cameras/PerspectiveCamera.ts", "../../@sakitam-gis/vis-engine/src/cameras/OrthographicCamera.ts"],
  "sourcesContent": ["var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},e=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},u=function(r){return(r=isFinite(r)?r%360:0)>0?r:r+360},a=function(r){return{r:e(r.r,0,255),g:e(r.g,0,255),b:e(r.b,0,255),a:e(r.a)}},o=function(r){return{r:n(r.r),g:n(r.g),b:n(r.b),a:n(r.a,3)}},i=/^#([0-9a-f]{3,8})$/i,s=function(r){var t=r.toString(16);return t.length<2?\"0\"+t:t},h=function(r){var t=r.r,n=r.g,e=r.b,u=r.a,a=Math.max(t,n,e),o=a-Math.min(t,n,e),i=o?a===t?(n-e)/o:a===n?2+(e-t)/o:4+(t-n)/o:0;return{h:60*(i<0?i+6:i),s:a?o/a*100:0,v:a/255*100,a:u}},b=function(r){var t=r.h,n=r.s,e=r.v,u=r.a;t=t/360*6,n/=100,e/=100;var a=Math.floor(t),o=e*(1-n),i=e*(1-(t-a)*n),s=e*(1-(1-t+a)*n),h=a%6;return{r:255*[e,i,o,o,s,e][h],g:255*[s,e,e,i,o,o][h],b:255*[o,o,s,e,e,i][h],a:u}},g=function(r){return{h:u(r.h),s:e(r.s,0,100),l:e(r.l,0,100),a:e(r.a)}},d=function(r){return{h:n(r.h),s:n(r.s),l:n(r.l),a:n(r.a,3)}},f=function(r){return b((n=(t=r).s,{h:t.h,s:(n*=((e=t.l)<50?e:100-e)/100)>0?2*n/(e+n)*100:0,v:e+n,a:t.a}));var t,n,e},c=function(r){return{h:(t=h(r)).h,s:(u=(200-(n=t.s))*(e=t.v)/100)>0&&u<200?n*e/100/(u<=100?u:200-u)*100:0,l:u/2,a:t.a};var t,n,e,u},l=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,p=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,v=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,m=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,y={string:[[function(r){var t=i.exec(r);return t?(r=t[1]).length<=4?{r:parseInt(r[0]+r[0],16),g:parseInt(r[1]+r[1],16),b:parseInt(r[2]+r[2],16),a:4===r.length?n(parseInt(r[3]+r[3],16)/255,2):1}:6===r.length||8===r.length?{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16),a:8===r.length?n(parseInt(r.substr(6,2),16)/255,2):1}:null:null},\"hex\"],[function(r){var t=v.exec(r)||m.exec(r);return t?t[2]!==t[4]||t[4]!==t[6]?null:a({r:Number(t[1])/(t[2]?100/255:1),g:Number(t[3])/(t[4]?100/255:1),b:Number(t[5])/(t[6]?100/255:1),a:void 0===t[7]?1:Number(t[7])/(t[8]?100:1)}):null},\"rgb\"],[function(t){var n=l.exec(t)||p.exec(t);if(!n)return null;var e,u,a=g({h:(e=n[1],u=n[2],void 0===u&&(u=\"deg\"),Number(e)*(r[u]||1)),s:Number(n[3]),l:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return f(a)},\"hsl\"]],object:[[function(r){var n=r.r,e=r.g,u=r.b,o=r.a,i=void 0===o?1:o;return t(n)&&t(e)&&t(u)?a({r:Number(n),g:Number(e),b:Number(u),a:Number(i)}):null},\"rgb\"],[function(r){var n=r.h,e=r.s,u=r.l,a=r.a,o=void 0===a?1:a;if(!t(n)||!t(e)||!t(u))return null;var i=g({h:Number(n),s:Number(e),l:Number(u),a:Number(o)});return f(i)},\"hsl\"],[function(r){var n=r.h,a=r.s,o=r.v,i=r.a,s=void 0===i?1:i;if(!t(n)||!t(a)||!t(o))return null;var h=function(r){return{h:u(r.h),s:e(r.s,0,100),v:e(r.v,0,100),a:e(r.a)}}({h:Number(n),s:Number(a),v:Number(o),a:Number(s)});return b(h)},\"hsv\"]]},N=function(r,t){for(var n=0;n<t.length;n++){var e=t[n][0](r);if(e)return[e,t[n][1]]}return[null,void 0]},x=function(r){return\"string\"==typeof r?N(r.trim(),y.string):\"object\"==typeof r&&null!==r?N(r,y.object):[null,void 0]},I=function(r){return x(r)[1]},M=function(r,t){var n=c(r);return{h:n.h,s:e(n.s+100*t,0,100),l:n.l,a:n.a}},H=function(r){return(299*r.r+587*r.g+114*r.b)/1e3/255},$=function(r,t){var n=c(r);return{h:n.h,s:n.s,l:e(n.l+100*t,0,100),a:n.a}},j=function(){function r(r){this.parsed=x(r)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return r.prototype.isValid=function(){return null!==this.parsed},r.prototype.brightness=function(){return n(H(this.rgba),2)},r.prototype.isDark=function(){return H(this.rgba)<.5},r.prototype.isLight=function(){return H(this.rgba)>=.5},r.prototype.toHex=function(){return r=o(this.rgba),t=r.r,e=r.g,u=r.b,i=(a=r.a)<1?s(n(255*a)):\"\",\"#\"+s(t)+s(e)+s(u)+i;var r,t,e,u,a,i},r.prototype.toRgb=function(){return o(this.rgba)},r.prototype.toRgbString=function(){return r=o(this.rgba),t=r.r,n=r.g,e=r.b,(u=r.a)<1?\"rgba(\"+t+\", \"+n+\", \"+e+\", \"+u+\")\":\"rgb(\"+t+\", \"+n+\", \"+e+\")\";var r,t,n,e,u},r.prototype.toHsl=function(){return d(c(this.rgba))},r.prototype.toHslString=function(){return r=d(c(this.rgba)),t=r.h,n=r.s,e=r.l,(u=r.a)<1?\"hsla(\"+t+\", \"+n+\"%, \"+e+\"%, \"+u+\")\":\"hsl(\"+t+\", \"+n+\"%, \"+e+\"%)\";var r,t,n,e,u},r.prototype.toHsv=function(){return r=h(this.rgba),{h:n(r.h),s:n(r.s),v:n(r.v),a:n(r.a,3)};var r},r.prototype.invert=function(){return w({r:255-(r=this.rgba).r,g:255-r.g,b:255-r.b,a:r.a});var r},r.prototype.saturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,r))},r.prototype.desaturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,-r))},r.prototype.grayscale=function(){return w(M(this.rgba,-1))},r.prototype.lighten=function(r){return void 0===r&&(r=.1),w($(this.rgba,r))},r.prototype.darken=function(r){return void 0===r&&(r=.1),w($(this.rgba,-r))},r.prototype.rotate=function(r){return void 0===r&&(r=15),this.hue(this.hue()+r)},r.prototype.alpha=function(r){return\"number\"==typeof r?w({r:(t=this.rgba).r,g:t.g,b:t.b,a:r}):n(this.rgba.a,3);var t},r.prototype.hue=function(r){var t=c(this.rgba);return\"number\"==typeof r?w({h:r,s:t.s,l:t.l,a:t.a}):n(t.h)},r.prototype.isEqual=function(r){return this.toHex()===w(r).toHex()},r}(),w=function(r){return r instanceof j?r:new j(r)},S=[],k=function(r){r.forEach(function(r){S.indexOf(r)<0&&(r(j,y),S.push(r))})},E=function(){return new j({r:255*Math.random(),g:255*Math.random(),b:255*Math.random()})};export{j as Colord,w as colord,k as extend,I as getFormat,E as random};\n", "import { DataType } from '../core/BufferAttribute';\n\nexport function parseShader(shader, defines: string[] = [], includes = []) {\n  return shader.replace(/#defines/, defines.join('\\n')).replace(/#includes/, includes.join('\\n'));\n}\n\nexport function defineShader(shader, defines = {}) {\n  return Object.keys(defines).reduce((str, key) => (defines[key] ? `#define ${key} ${defines[key]}\\n${str}` : str), shader);\n}\n\n/** Extracts GLSLIFY style naming of shaders: `#define SHADER_NAME ...` */\nexport function getShaderName(shader: string, defaultName: string = 'unnamed'): string {\n  const SHADER_NAME_REGEXP = /#define\\s*SHADER_NAME\\s*([A-Za-z0-9_-]+)\\s*/;\n  const match = shader.match(SHADER_NAME_REGEXP);\n  return match ? match[1] : defaultName;\n}\n\n/**\n * 根据顶点索引重新构建 `Wireframe` 索引\n * @param position 顶点数据\n * @param indices 索引数据\n * @param numIndices 索引数量\n * @param data 原始索引数据\n */\nexport function getWireframeIndex(position: DataType, indices: number[], numIndices: number, data?: Uint16Array | Uint32Array) {\n  const edges = new Set();\n  if (data) {\n    for (let j = 0, l = numIndices; j < l; j += 3) {\n      const a = data[j];\n      const b = data[j + 1];\n      const c = data[j + 2];\n\n      const array = [a, b, b, c, c, a];\n\n      for (let i = 0; i < array.length; i += 2) {\n        if (isUniqueEdge(array[i] * 3, array[i + 1] * 3, position, edges)) {\n          indices.push(array[i], array[i + 1]);\n        }\n      }\n    }\n  } else {\n    for (let j = 0, l = numIndices; j < l; j += 3) {\n      const a = j;\n      const b = j + 1;\n      const c = j + 2;\n\n      const array = [a, b, b, c, c, a];\n\n      for (let i = 0; i < array.length; i += 2) {\n        if (isUniqueEdge(array[i] * 3, array[i + 1] * 3, position, edges)) {\n          indices.push(array[i], array[i + 1]);\n        }\n      }\n    }\n  }\n\n  return indices;\n}\n\n/**\n * 判断是否是独立的边\n * @param start\n * @param end\n * @param position\n * @param edges\n */\nexport function isUniqueEdge(start, end, position, edges) {\n  const hash1 = `${position[start]},${position[start + 1]},${position[start + 2]}-${position[end]},${position[end + 1]},${position[end + 2]}`;\n  const hash2 = `${position[end]},${position[end + 1]},${position[end + 2]}-${position[start]},${position[start + 1]},${position[start + 2]}`; // coincident edge\n  if (edges.has(hash1) === true || edges.has(hash2) === true) {\n    return false;\n  } else {\n    edges.add(hash1);\n    edges.add(hash2);\n    return true;\n  }\n}\n", "import { glMatrix } from 'gl-matrix';\n\nexport const DEG_TO_RAD = Math.PI / 180;\nexport const RAD_TO_DEG = 180 / Math.PI;\n\n/**\n * 度转弧度\n * @param deg 度\n */\nexport function degToRad(deg: number) {\n  return deg * DEG_TO_RAD;\n}\n\n/**\n * 弧度转度\n * @param a 弧度\n */\nexport function radToDeg(a: number) {\n  return a * RAD_TO_DEG;\n}\n\n/**\n * 将值限定在最大最小值中间\n * @param val 当前值\n * @param min 最小值\n * @param max 最大值\n */\nexport function clamp(val: number, min: number, max: number) {\n  return Math.min(Math.max(val, min), max);\n}\n\n/**\n * 判断数值是否是 2 的 n 次方\n * @param value\n */\nexport function isPowerOfTwo(value) {\n  return (Math.log(value) / Math.LN2) % 1 === 0;\n}\n\nlet FloatArray: Float32ArrayConstructor | Float64ArrayConstructor = Float32Array;\n\n/**\n * 设置是否使用双精度浮点数\n * @param b\n * @param notifyGlMatrix 如果不想影响 `gl-matrix` 的构造器，需要设定为 `false`，这在我们公用 `gl-matrix` 并且其他库使用构造器的 `instanceof`\n * 做相关判断时可以避免受到影响。\n */\nexport function highPrecision(b: boolean, notifyGlMatrix = true) {\n  if (b) {\n    FloatArray = Float64Array;\n  } else {\n    FloatArray = Float32Array;\n  }\n\n  if (notifyGlMatrix) {\n    glMatrix.setMatrixArrayType(FloatArray as unknown as any);\n  }\n}\n\n/**\n * 获取 FloatArray 构造器\n */\nexport function getFloatArrayConstructor() {\n  return FloatArray;\n}\n", "/**\n * 判断是否是 webgl\n * @param gl\n */\nexport function isWebGL(gl: any): boolean {\n  if (typeof WebGLRenderingContext !== 'undefined' && gl instanceof WebGLRenderingContext) {\n    return true;\n  }\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n  // wrap maptalks group layer\n  if (\n    gl?.gl &&\n    (gl.gl instanceof WebGLRenderingContext || gl.gl instanceof WebGL2RenderingContext)\n  ) {\n    return true;\n  }\n  // Look for debug contexts, headless gl etc\n  return Boolean(gl && Number.isFinite(gl._version));\n}\n\n/**\n * 判断是否是 webgl2\n * @param gl\n */\nexport function isWebGL2(gl: any): boolean {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n  // wrap maptalks group layer\n  if (gl?.gl && gl.gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n  // Look for debug contexts, headless gl etc\n  return Boolean(gl && gl._version === 2);\n}\n\nexport interface GlOptions {\n  /**\n   * 指定画布是否包含alpha缓冲区\n   */\n  alpha: boolean;\n  /**\n   * 指定是否开启抗锯齿。\n   */\n  antialias: boolean;\n  /**\n   * 指定是否开启深度检测。\n   */\n  depth: boolean;\n  /**\n   *  表示绘图缓冲区的深度缓冲区至少为16位。\n   */\n  desynchronized: boolean;\n  /**\n   * 指定是否开启模板缓冲区。\n   */\n  stencil: boolean;\n  /**\n   * 指定如果系统性能较低，是否创建上下文。\n   */\n  failIfMajorPerformanceCaveat: boolean;\n  /**\n   * 指定是否开启预乘alpha。\n   */\n  premultipliedAlpha: boolean;\n  /**\n   * 是否开启绘制缓冲区。\n   */\n  preserveDrawingBuffer: boolean;\n  /**\n   * 指定GPU的性能配置。\n   */\n  powerPreference: WebGLPowerPreference;\n}\n\n/**\n * 获取 webgl 实例\n * @param canvas\n * @param glOptions\n * @param requestWebGl2\n * @returns {null}\n */\nexport function getContext(\n  canvas: HTMLCanvasElement,\n  glOptions: Partial<GlOptions> = {},\n  requestWebGl2 = false,\n) {\n  const names = ['webgl2', 'webgl', 'experimental-webgl'];\n  if (!requestWebGl2) {\n    names.shift();\n  }\n  let context: WebGLRenderingContext | null = null;\n\n  function onContextCreationError(error: any) {\n    console.error(error.statusMessage);\n  }\n\n  canvas?.addEventListener?.('webglcontextcreationerror', onContextCreationError, false);\n  for (let ii = 0; ii < names.length; ++ii) {\n    try {\n      context = canvas.getContext(names[ii], glOptions) as WebGLRenderingContext;\n    } catch (e) {} // eslint-disable-line\n    if (context) {\n      break;\n    }\n  }\n\n  canvas?.removeEventListener?.('webglcontextcreationerror', onContextCreationError, false);\n\n  return context;\n}\n", "export * from './shader';\nexport * from './math';\nexport * from './gl';\n\n/**\n * 获取当前秒数，自动回退\n * @return number\n */\nexport const now = () => ('undefined' == typeof performance ? Date : performance).now();\n\n/**\n * 返回数据类型\n * @param value\n * @return string\n */\nexport function typeOf(value: any): string {\n  return Object.prototype.toString.call(value).slice(8, -1).toLowerCase();\n}\n\n/**\n * 判断是否是字符串\n * @param s\n * @return boolean\n */\nexport function isString(s: any): s is string {\n  return typeOf(s) === 'string';\n}\n\n/**\n * 判断是否是 undefined\n * @param s\n * @return boolean\n */\nexport function isUndef(s: any): s is undefined {\n  return typeOf(s) === 'undefined';\n}\n\n/**\n * 简单判断是否是 16 进制字符串（需要完善）\n * @param string\n */\nexport function isHex(string) {\n  return isString(string) && string.includes('%');\n}\n\n/**\n * 判断是否是数字\n * @param s\n * @return boolean\n */\nexport function isNumber(s: any): s is number {\n  return typeOf(s) === 'number';\n}\n\n/**\n * 判断是否是正则\n * @param obj\n */\nexport function isRegexp(obj: any): obj is RegExp {\n  return typeOf(obj) === 'regexp';\n}\n\n/**\n * 判断是否是 null\n * @param value\n */\nexport function isNull(value) {\n  return value == null;\n}\n\n/**\n * 判断是否是对象\n * @param value\n */\nexport function isObject(value) {\n  const type = typeof value;\n  return value !== null && (type === 'object' || type === 'function');\n}\n\nexport function hasValue(v, state) {\n  if (isObject(v)) {\n    return !isNull(v.value) && (isNull(state) || v.value === state);\n  } else {\n    return !isNull(v) && (isNull(state) || v === state);\n  }\n}\n\nconst uidCounters: Record<string, number> = {};\n\n/**\n * 获取 uid\n * @param id= - Identifier base name\n * @return uid\n **/\nexport function uid(id = 'id'): string {\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return `${id}-${count}`;\n}\n\n/**\n * 排除对象的 key\n * @param obj\n * @param keys\n */\nexport function omit<T, K extends keyof T>(obj: T, keys: K[] = []): Omit<T, K> {\n  return Object.keys(obj as any)\n    .filter((key: any) => keys.indexOf(key) < 0)\n    .reduce(\n      (newObj: Omit<T, K>, key) =>\n        Object.assign(newObj, {\n          [key]: obj[key],\n        }),\n      {} as Omit<T, K>,\n    );\n}\n\n/**\n * pick object\n * @param obj\n * @param keys\n */\nexport function pick<T, K extends keyof T>(obj: T, keys: K[] = []): Omit<T, K> {\n  return Object.keys(obj as any)\n    .filter((key: any) => keys.indexOf(key) > -1)\n    .reduce(\n      (newObj: Omit<T, K>, key) =>\n        Object.assign(newObj, {\n          [key]: obj[key],\n        }),\n      {} as Omit<T, K>,\n    );\n}\n\nconst callbacks: any[] = [];\nconst fpsInterval = 1000 / 60;\nlet time = performance.now();\n\nfunction requestAnimationFrameLoop() {\n  const current = now();\n  const delta = current - time;\n  if (delta >= fpsInterval) {\n    // Adjust next execution time in case this loop took longer to execute\n    time = current - (delta % fpsInterval);\n    // Clone array in case callbacks pushes more functions to it\n    const funcs = callbacks.slice();\n    callbacks.length = 0;\n    for (let i = 0; i < funcs.length; i++) {\n      funcs[i] && funcs[i](current, delta);\n    }\n  } else {\n    setImmediate(requestAnimationFrameLoop);\n  }\n}\n\nfunction raf(func) {\n  callbacks.push(func);\n  if (callbacks.length === 1) {\n    setImmediate(requestAnimationFrameLoop);\n  }\n  return callbacks.length - 1;\n}\n\nfunction caf(id: any) {\n  callbacks[id] = undefined;\n}\n\nexport function requestAnimationFrame(cb) {\n  if (typeof window !== 'undefined' && window.requestAnimationFrame) {\n    return window.requestAnimationFrame(cb);\n  }\n\n  return raf(cb);\n}\n\nexport function cancelAnimationFrame(cb) {\n  if (typeof window !== 'undefined' && window.cancelAnimationFrame) {\n    return window.cancelAnimationFrame(cb);\n  }\n\n  return caf(cb);\n}\n", "import { now } from '../utils';\n\n/**\n * 时钟对象，默认内部会使用 [performance.now](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now) 否则会\n * 回退到 `Date.now()`.\n * ```ts\n * const clock = new Clock();\n * ```\n */\nexport default class Clock {\n  /**\n   * 上次标记的时间\n   * @private\n   */\n  #lastTime = 0;\n\n  /**\n   * 间隔时间\n   * @private\n   */\n  #elapsedTime = 0;\n\n  /**\n   * 时钟是否启动\n   * @private\n   */\n  #start = false;\n\n  public running: boolean;\n\n  /**\n   * Constructor\n   * @param running 时钟状态\n   */\n  constructor (running = true) {\n    this.running = running;\n  }\n\n  /**\n   * 启动时钟\n   */\n  start () {\n    if (!this.#start) {\n      this.reset();\n      this.#start = true;\n    }\n  }\n\n  /**\n   * 停止时钟\n   */\n  stop () {\n    this.getElapsedTime();\n    this.#start = false;\n    this.running = false;\n  }\n\n  /**\n   * 重置时钟状态\n   */\n  reset () {\n    this.#lastTime = now();\n    this.#elapsedTime = 0;\n  }\n\n  /**\n   * 获取自时钟启动以来经过的秒数\n   */\n  getElapsedTime () {\n    this.getDelta();\n    return this.#elapsedTime;\n  }\n\n  /**\n   * 计算时钟总启动时间，并将当前时间设置赋值到 `lastTime`\n   */\n  getDelta () {\n    let deltaTime = 0;\n    if (this.running && !this.#start) {\n      this.start();\n      return 0;\n    }\n    if (this.#start) {\n      const time = now();\n      deltaTime = (time - this.#lastTime) / 1000;\n      this.#lastTime = time;\n      this.#elapsedTime = this.#elapsedTime + deltaTime;\n    }\n    return deltaTime;\n  }\n}\n", "import Clock from './Clock';\nimport { requestAnimationFrame, cancelAnimationFrame } from '../utils';\n\n/**\n * Raf 配置项\n */\nexport interface RafOptions {\n  /**\n   * @defaultValue `true`, 是否在创建 raf 实例后自动启动\n   */\n  autoStart: boolean;\n}\n\nconst defaultOptions: Partial<RafOptions> = {\n  autoStart: true,\n};\n\n/**\n * 优化的 raf 管理\n * ```ts\n * const raf = new Raf();\n * ```\n */\nexport default class Raf {\n  public options: Partial<RafOptions>;\n  #raf: number;\n  #animating: boolean;\n  #isVisible: boolean;\n\n  #clock: Clock;\n\n  #callback: () => void;\n\n  constructor(cb, options: Partial<RafOptions> = {}) {\n    this.options = {\n      ...options,\n      ...defaultOptions,\n    };\n    this.#clock = new Clock();\n\n    this.reset();\n\n    this.onVisibilityChange = this.onVisibilityChange.bind(this);\n\n    this.#callback = () => {\n      const time = this.#clock.getElapsedTime();\n      cb && cb(time);\n    };\n    if (this.options.autoStart) {\n      this.start();\n    }\n  }\n\n  /**\n   * 获取当前页面是否可见\n   */\n  public get visible() {\n    return this.#isVisible;\n  }\n\n  /**\n   * 获取当前`raf` 状态\n   */\n  public get animating() {\n    return this.#animating;\n  }\n\n  /**\n   * 重置当前 `raf` 状态\n   */\n  public reset() {\n    this.#animating = false;\n    this.#isVisible = true;\n    if (this.#raf !== undefined) {\n      cancelAnimationFrame(this.#raf);\n    }\n  }\n\n  /**\n   * 获取总时长\n   */\n  public get elapsedTime() {\n    return this.#clock.getElapsedTime();\n  }\n\n  /**\n   * 启动 `raf`\n   */\n  public start() {\n    // 如果已经启动，不需要再次启动\n    if (this.#animating) return;\n\n    this.#animating = true;\n    this.#clock.start();\n    this.tick();\n\n    if (typeof window !== 'undefined' && window.document) {\n      window.document.addEventListener('visibilitychange', this.onVisibilityChange, false);\n    }\n  }\n\n  /**\n   * 停止 `raf`\n   */\n  public stop() {\n    this.#clock.stop();\n    this.reset();\n    if (typeof window !== 'undefined' && window.document) {\n      window.document.removeEventListener('visibilitychange', this.onVisibilityChange, false);\n    }\n  }\n\n  public tick() {\n    if (!this.#animating || !this.#isVisible) return;\n    // @tip 注意如果需要进行锁帧，需要在此处进行逻辑处理\n    this.#raf = requestAnimationFrame(() => {\n      this.tick();\n    });\n    this.#callback();\n  }\n\n  /**\n   * 处理页面可见和不可见逻辑\n   * @private\n   */\n  private onVisibilityChange() {\n    if (typeof window !== 'undefined' && window.document) {\n      this.#isVisible = !window.document.hidden;\n    }\n\n    if (this.#isVisible) {\n      this.reset();\n      this.start();\n    }\n  }\n}\n", "import { isString, isRegexp } from '../utils';\n\ntype Keys<T> = Extract<keyof T, string>;\n\nexport type IOptions = {\n  /**\n   * 指定事件名称的合法值的正则表达式\n   */\n  validEventTypes?: RegExp[];\n};\n\nclass Event {\n  public readonly type: string;\n\n  constructor(type: string, params = {}) {\n    this.type = type;\n    (Object.getOwnPropertyNames(params) || []).forEach((key) => {\n      this[key] = params[key];\n    });\n  }\n}\n\n/**\n * 事件中心（实现的发布订阅者模式）\n *\n * 简单使用：\n * ```\n * const e = new EventEmitter();\n *\n * const handler = (data) => {\n *   console.log(data);\n * };\n *\n * e.on('eventName', handler);\n *\n * e.emit('eventName', { data: 'data' });\n *\n * // 取消订阅\n * e.off('eventName', handler);\n *\n * // 清除所有的订阅者\n * e.clear();\n * ```\n */\nexport default class EventEmitter<EventsMap extends Record<string, any> = Event> {\n  private fns: Map<Keys<EventsMap>, any>;\n  private readonly validateEventTypes: RegExp[];\n\n  constructor({ validEventTypes = [/.*/] }: IOptions = {}) {\n    this.fns = new Map();\n    this.validateEventTypes = validEventTypes;\n  }\n\n  /**\n   * 判断事件类型是否合法\n   * @param type\n   * @private\n   */\n  private validateEventType(type) {\n    let vs = this.validateEventTypes;\n    if (!Array.isArray(this.validateEventTypes)) {\n      vs = [this.validateEventTypes];\n    }\n    let isValid = true;\n    vs.forEach((r) => {\n      if (isRegexp(r) && !r.test(type)) {\n        isValid = false;\n      }\n    });\n\n    if (!isValid) {\n      throw new Error(`Invalid Event Type: '${type}'.\\nEvent type should be any of: ${vs}.`);\n    }\n  }\n\n  /**\n   * 添加订阅者\n   * @param type 事件类型\n   * @param handler 回调函数\n   * @param context 上下文\n   */\n  on(type, handler, context?: any) {\n    this.validateEventType(type);\n    if (isString(type)) {\n      const names = type.split(' ');\n      if (names.length > 1) {\n        names.forEach((t) => {\n          this.on(t, handler, context);\n        });\n        return this;\n      }\n    }\n    if (!this.has(type)) {\n      this.fns.set(type, []);\n    }\n    this.fns.get(type).push(handler);\n    return this;\n  }\n\n  /**\n   * 添加一次性订阅者\n   * @param type\n   * @param handler\n   * @param context\n   */\n  once(type, handler, context?: any) {\n    this.validateEventType(type);\n    if (isString(type)) {\n      const names = type.split(' ');\n      if (names.length > 1) {\n        names.forEach((t) => {\n          this.once(t, handler, context);\n        });\n        return this;\n      }\n    }\n    const onceHandler = (...args) => {\n      this.off(type, onceHandler);\n      handler.call(context || this, ...args);\n    };\n    return this.on(type, onceHandler, context);\n  }\n\n  /**\n   * 取消监听\n   * @param type\n   * @param handler\n   * @param context\n   */\n  off(type, handler?: any, context?: any) {\n    this.validateEventType(type);\n    if (isString(type)) {\n      const names = type.split(' ');\n      if (names.length > 1) {\n        names.forEach((t) => {\n          this.off(t, handler, context);\n        });\n        return this;\n      }\n    }\n    const handlers = this.has(type);\n    if (handlers) {\n      if (handler) {\n        const fns = handlers.filter((h) => h !== handler);\n        this.fns.set(type, fns);\n      } else {\n        this.fns.delete(type);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * 触发事件\n   * @param type\n   * @param args\n   */\n  emit(type, args?: any) {\n    const eventObject = type instanceof Event ? type : new Event(type, args);\n    this.validateEventType(eventObject.type);\n    const fns = this.has(eventObject.type);\n    if (fns) {\n      return fns.map((fn) => fn.call(this, eventObject));\n    }\n  }\n\n  has(type) {\n    return this.fns.get(type);\n  }\n\n  /**\n   * 清空所有的订阅者\n   */\n  clear() {\n    this.fns.clear();\n    return this;\n  }\n}\n", "import { getFloatArrayConstructor } from '../utils';\n\nexport default class Vector {\n  /**\n   * 向量数据\n   * @private\n   */\n  elements = new (getFloatArrayConstructor())(2);\n\n  /**\n   * 从数组构建向量数据\n   * @param array 原始数组\n   * @param offset 数组偏移量\n   */\n  fromArray(array, offset = 0) {\n    let i = 0;\n    for (; i < this.elements.length; i++) {\n      this.elements[i] = array[offset + i];\n    }\n    return this;\n  }\n\n  /**\n   * 从向量转换到数组\n   * @param out 输出数据\n   * @param offset 偏移量\n   */\n  toArray(out: number[] | Float32Array | Float64Array = [], offset = 0) {\n    let i = 0;\n    for (; i < this.elements.length; i++) {\n      out[offset + i] = this.elements[i];\n    }\n    return out;\n  }\n}\n", "import {\n  add,\n  subtract,\n  multiply,\n  divide,\n  dot,\n  lerp,\n  scale,\n  equals,\n  angle,\n  length,\n  distance,\n  inverse,\n  negate,\n  cross,\n  normalize,\n  transformMat3,\n  transformMat4,\n  squaredDistance,\n} from 'gl-matrix/vec2';\n\nimport Vector from './Vector';\nimport Matrix3 from './Matrix3';\nimport Matrix4 from './Matrix4';\nimport { getFloatArrayConstructor } from '../utils';\n\n/**\n * 二维向量\n *\n * 代码示例:\n * ```ts\n * const a = new Vector2(0, 1);\n *\n * const b = new Vector2();\n *\n * const d = a.distanceTo(b);\n * ```\n */\nexport default class Vector2 extends Vector {\n  elements = new (getFloatArrayConstructor())(2);\n\n  /**\n   * @param x 向量的x值，默认为0\n   * @param y 向量的y值，默认为0\n   */\n  constructor(x = 0, y = 0) {\n    super();\n    const v = this.elements;\n    v[0] = x;\n    v[1] = y;\n  }\n\n  /**\n   * 获取向量 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[0];\n  }\n\n  /**\n   * 设置向量 x 值\n   * @param x\n   */\n  set x(x) {\n    this.elements[0] = x;\n  }\n\n  /**\n   * 获取向量 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[1];\n  }\n\n  /**\n   * 设置向量 y 值\n   * @param y\n   */\n  set y(y) {\n    this.elements[1] = y;\n  }\n\n  /**\n   * 从对象赋值 Vector2 的 x、y 值\n   * @param object\n   */\n  fromObject(object) {\n    const { x, y } = object;\n    if (x !== undefined) this.x = x;\n    if (y !== undefined) this.y = y;\n    return this;\n  }\n\n  /**\n   * 转换到对象\n   */\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n    };\n  }\n\n  /**\n   * 设置向量的 x 和 y 值\n   * @param x\n   * @param y\n   */\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * 将向量的每个值设置为标量 s\n   * @param s\n   */\n  setScalar(s) {\n    return this.set(s, s);\n  }\n\n  /**\n   * 将传入的向量vec和这个向量相加\n   * @param vec 传入的 Vector2\n   */\n  add(vec: Vector2) {\n    add(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 将传入的标量 v 和这个向量相加，默认构建一个二维向量 [v, v]\n   * @param v 标量值\n   */\n  addScalar(v: number) {\n    add(this.elements, this.elements, [v, v]);\n    return this;\n  }\n\n  /**\n   * 从此向量减去 vec 二维向量\n   * @param vec 传入的 Vector2\n   */\n  subtract(vec: Vector2) {\n    subtract(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量减去标量 v，默认构建一个二维向量 [v, v]\n   * @param v 标量值\n   */\n  subtractScalar(v: number) {\n    subtract(this.elements, this.elements, [v, v]);\n    return this;\n  }\n\n  /**\n   * 将此向量与 vec 向量相乘\n   * @param vec\n   */\n  multiply(vec: Vector2) {\n    multiply(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量与标量 v 相乘，默认构建一个二维向量 [v, v]\n   * @param v 标量值\n   */\n  multiplyScalar(v: number) {\n    multiply(this.elements, this.elements, [v, v]);\n    return this;\n  }\n\n  /**\n   * 将此向量与 vec 向量相除\n   * @param vec\n   */\n  divide(vec: Vector2) {\n    divide(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量与标量 v 相除，默认构建一个二维向量 [v, v]\n   * @param v 标量值\n   */\n  divideScalar(v: number) {\n    divide(this.elements, this.elements, [v, v]);\n    return this;\n  }\n\n  /**\n   * 缩放此向量\n   * @param s\n   */\n  scale(s: number) {\n    scale(this.elements, this.elements, s);\n    return this;\n  }\n\n  /**\n   * 计算该向量到所传入的 v 间的距离\n   * @param vec\n   */\n  distanceTo(vec: Vector2) {\n    return distance(this.elements, vec.elements);\n  }\n\n  /**\n   * 计算从 `[0, 0]` 到此向量的直线距离\n   */\n  length() {\n    return length(this.elements);\n  }\n\n  /**\n   * 计算该向量到传入的v的平方距离\n   * @param v\n   */\n  distanceToSquared(v: Vector2) {\n    return squaredDistance(v.elements, this.elements);\n  }\n\n  /**\n   * 计算此向量相对于正 x 轴的弧度角\n   */\n  angle() {\n    return angle(this.elements, [1, 0]);\n  }\n\n  /**\n   * 以弧度返回该向量与向量 v 之间的角度\n   */\n  angleTo(v: Vector2) {\n    return angle(this.elements, v.elements);\n  }\n\n  /**\n   * 计算此向量与 vec 向量的点积\n   * @param vec\n   */\n  dot(vec: Vector2) {\n    return dot(this.elements, vec.elements);\n  }\n\n  /**\n   * 判断传入的向量 vec 与此向量是否相等\n   * @param vec\n   */\n  equals(vec: Vector2) {\n    return equals(this.elements, vec.elements);\n  }\n\n  /**\n   * 将该向量设置为它本身与传入的vec的叉积\n   * @param vec\n   */\n  cross(vec: Vector2) {\n    cross(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 针对此向量取反\n   */\n  negate() {\n    negate(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 针对此向量取倒数\n   */\n  inverse() {\n    inverse(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量到 vec 向量进行插值\n   * @param vec 目标向量\n   * @param t 插值因数，范围一般在[0-1]，通常在这两个值之间\n   */\n  lerp(vec: Vector2, t: number) {\n    lerp(this.elements, this.elements, vec.elements, t);\n    return this;\n  }\n\n  /**\n   * 将此向量转换为单位向量 (将其设置为与此向量具有相同方向但长度为 1 的向量)\n   */\n  normalize() {\n    normalize(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 将此向量（隐含的 1 作为第三个分量）乘以 Matrix3\n   * @param matrix\n   */\n  applyMatrix3(matrix: Matrix3) {\n    transformMat3(this.elements, this.elements, matrix.elements);\n    return this;\n  }\n\n  /**\n   * 将此向量乘以 Matrix4\n   * @param matrix\n   */\n  applyMatrix4(matrix: Matrix4) {\n    transformMat4(this.elements, this.elements, matrix.elements);\n    return this;\n  }\n\n  /**\n   * 将传递的 vec2 的 x 和 y 属性的值复制到此 Vector2\n   * @param vec2\n   */\n  copy(vec2: Vector2) {\n    this.x = vec2.x;\n    this.y = vec2.y;\n    return this;\n  }\n\n  /**\n   * 克隆此向量\n   */\n  clone() {\n    return new Vector2(this.x, this.y);\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n", "import {\n  set,\n  dot,\n  copy,\n  slerp,\n  length,\n  normalize,\n  invert,\n  conjugate,\n  multiply,\n  getAngle,\n  fromEuler,\n  fromMat3,\n  setAxisAngle,\n  getAxisAngle,\n} from 'gl-matrix/quat';\n\nimport { equals } from 'gl-matrix/vec4';\nimport { radToDeg, getFloatArrayConstructor } from '../utils/math';\nimport Euler from './Euler';\nimport Vector from './Vector';\nimport Vector3 from './Vector3';\nimport Matrix3 from './Matrix3';\nimport type { ICallback } from '../types';\n\nconst tempArray: number[] = [];\n\n/**\n * 四元数，主要用于在三维世界描述旋转\n * ```ts\n * const a = new Quaternion(0, 0, 0, 0);\n * ```\n */\nexport default class Quaternion extends Vector {\n  elements = new (getFloatArrayConstructor())(4);\n\n  #changeCallbacks: ICallback[] = [];\n\n  /**\n   * @param x x 坐标，默认为 0\n   * @param y y 坐标，默认为 0\n   * @param z z 坐标，默认为 0\n   * @param w w 坐标，默认为 0\n   */\n  constructor(x = 0, y = 0, z = 0, w = 0) {\n    super();\n    const v = this.elements;\n    v[0] = x;\n    v[1] = y;\n    v[2] = z;\n    v[3] = w;\n  }\n\n  /**\n   * 获取 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[0];\n  }\n\n  /**\n   * 设置 x 值\n   * @param x\n   */\n  set x(x: number) {\n    this.elements[0] = x;\n    this.triggerChange();\n  }\n\n  /**\n   * 获取 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[1];\n  }\n\n  /**\n   * 设置 y 值\n   * @param y\n   */\n  set y(y) {\n    this.elements[1] = y;\n    this.triggerChange();\n  }\n\n  /**\n   * 获取 z 值\n   * @return number;\n   */\n  get z() {\n    return this.elements[2];\n  }\n\n  /**\n   * 设置 z 值\n   * @param z\n   */\n  set z(z: number) {\n    this.elements[2] = z;\n    this.triggerChange();\n  }\n\n  /**\n   * 获取 w 值\n   * @return number;\n   */\n  get w() {\n    return this.elements[3];\n  }\n\n  /**\n   * 设置 w 值\n   * @param w\n   */\n  set w(w) {\n    this.elements[3] = w;\n    this.triggerChange();\n  }\n\n  /**\n   * 从对象赋值 Quaternion 的 x、y、z、w 值\n   * @param object\n   */\n  fromObject({ x, y, z, w }) {\n    if (x !== undefined) this.x = x;\n    if (y !== undefined) this.y = y;\n    if (z !== undefined) this.z = z;\n    if (w !== undefined) this.w = w;\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 转换到对象\n   */\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z,\n      w: this.w,\n    };\n  }\n\n  /**\n   * 给定的角度和旋转轴设置此四元数的值\n   * @param axis\n   * @param rad\n   */\n  fromAxisAngle(axis: Vector3, rad: number) {\n    setAxisAngle(this.elements, axis.elements, rad);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 从此四元数获取旋转轴和旋转角度\n   * @param axis\n   */\n  getAxisAngle(axis = new Vector3()) {\n    const rad = getAxisAngle(tempArray, this.elements);\n    axis.set(tempArray[0], tempArray[1], tempArray[2]);\n    return rad;\n  }\n\n  /**\n   * 从给定的欧拉角 e 创建四元数\n   * @param e\n   */\n  fromEuler(e: Euler) {\n    fromEuler(this.elements, radToDeg(e.x), radToDeg(e.y), radToDeg(e.z));\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 从给定的 3x3 旋转矩阵创建四元数\n   * @param m\n   */\n  fromMat3(m: Matrix3) {\n    fromMat3(this.elements, m);\n    return this;\n  }\n\n  set(x, y, z, w) {\n    set(this.elements, x, y, z, w);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 计算四元数的直线长度\n   */\n  length() {\n    return length(this.elements);\n  }\n\n  /**\n   * 计算四元数的乘积\n   * @param a\n   * @param b\n   */\n  multiply(a: Quaternion, b?: Quaternion) {\n    if (b) {\n      multiply(this.elements, a.elements, b.elements);\n    } else {\n      multiply(this.elements, this.elements, a.elements);\n    }\n\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 处理四元数之间的球面线性插值\n   * @param q\n   * @param t\n   */\n  slerp(q: Quaternion, t: number) {\n    slerp(this.elements, this.elements, q.elements, t);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 翻转该四元数\n   */\n  invert() {\n    invert(this.elements, this.elements);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 计算此四元数的旋转共轭（围绕旋转轴在相反方向上的旋转）\n   */\n  conjugate() {\n    conjugate(this.elements, this.elements);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * （归一化）四元数。 即计算与该四元数具有相同旋转、但长度为1的四元数\n   */\n  normalize() {\n    normalize(this.elements, this.elements);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 计算四元数 q 与当前四元数的点积\n   * @param q\n   */\n  dot(q: Quaternion) {\n    return dot(this.elements, q.elements);\n  }\n\n  /**\n   * 以弧度返回该四元数与四元数 q 之间的夹角。\n   * @param q\n   */\n  angleTo(q: Quaternion) {\n    return getAngle(this.elements, q.elements);\n  }\n\n  /**\n   * 创建一个与该四元数具有相同x、y、z和w 属性的四元数\n   */\n  clone() {\n    return new Quaternion().copy(this);\n  }\n\n  /**\n   * 复制四元数 q 的 x、y、z 和 w 属性到该四元数中。\n   * @param q\n   */\n  copy(q: Quaternion) {\n    copy(this.elements, q.elements);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 比较两个四元数是否相同\n   * @param q\n   */\n  equals(q: Quaternion) {\n    return equals(this.elements, q.elements);\n  }\n\n  /**\n   * 监听四元数变更\n   * @param fn 回调函数\n   */\n  onChange(fn: ICallback) {\n    if (!this.#changeCallbacks.includes(fn)) {\n      this.#changeCallbacks.push(fn);\n    }\n  }\n\n  /**\n   * 触发所有的回调函数\n   */\n  triggerChange() {\n    this.#changeCallbacks.forEach((cb) => cb());\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n", "import {\n  set,\n  add,\n  length,\n  subtract,\n  multiply,\n  divide,\n  dot,\n  lerp,\n  scale,\n  scaleAndAdd,\n  equals,\n  angle,\n  negate,\n  cross,\n  inverse,\n  distance,\n  squaredDistance,\n  normalize,\n  transformMat3,\n  transformMat4,\n  transformQuat,\n} from 'gl-matrix/vec3';\n\nimport Vector from './Vector';\n\nimport Quaternion from './Quaternion';\nimport Matrix3 from './Matrix3';\nimport Matrix4 from './Matrix4';\nimport { getFloatArrayConstructor } from '../utils';\n\n/**\n * 三维向量，三维向量表示的是一个有顺序的、三个为一组的数字组合，可以用来描述：\n * - 一个位于三维空间中的点。\n * - 一个在三维空间中的方向与长度的定义\n * ```ts\n * const a = new Vector3(0, 1, 0);\n *\n * const b = new Vector3(0, 0, 0);\n *\n * const d = a.distanceTo(b);\n * ```\n */\nexport default class Vector3 extends Vector {\n  elements = new (getFloatArrayConstructor())(3);\n\n  /**\n   * @param x 向量的x值，默认为0\n   * @param y 向量的y值，默认为0\n   * @param z 向量的z值，默认为0\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    super();\n    const v = this.elements;\n    v[0] = x;\n    v[1] = y;\n    v[2] = z;\n  }\n\n  /**\n   * 获取向量 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[0];\n  }\n\n  /**\n   * 设置向量 x 值\n   * @param x\n   */\n  set x(x: number) {\n    this.elements[0] = x;\n  }\n\n  /**\n   * 获取向量 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[1];\n  }\n\n  /**\n   * 设置向量 y 值\n   * @param y\n   */\n  set y(y: number) {\n    this.elements[1] = y;\n  }\n\n  /**\n   * 获取向量 z 值\n   * @return number;\n   */\n  get z() {\n    return this.elements[2];\n  }\n\n\n  /**\n   * 设置向量 z 值\n   * @param z\n   */\n  set z(z: number) {\n    this.elements[2] = z;\n  }\n\n  /**\n   * 从对象赋值 Vector3 的 x、y、z 值\n   * @param object\n   */\n  fromObject(object) {\n    const { x, y, z } = object;\n    if (x !== undefined) this.x = x;\n    if (y !== undefined) this.y = y;\n    if (z !== undefined) this.z = z;\n    return this;\n  }\n\n  /**\n   * 转换到对象\n   */\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z,\n    };\n  }\n\n  /**\n   * 设置向量的 x、y、z\n   * @param x\n   * @param y\n   * @param z\n   */\n  set(x, y, z) {\n    set(this.elements, x, y, z);\n    return this;\n  }\n\n  /**\n   * 将向量的每个值设置为标量 s\n   * @param s\n   */\n  setScalar(s) {\n    return this.set(s, s, s);\n  }\n\n  /**\n   * 计算从 `[0, 0, 0]` 到此向量的直线距离\n   */\n  length() {\n    return length(this.elements);\n  }\n\n  /**\n   * 将传入的向量vec和这个向量相加，会改变当前向量\n   * @param vec 传入的 Vector3\n   */\n  add(vec: Vector3) {\n    add(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 将传入的标量量 v 和这个向量相加，会改变当前向量\n   * @param v 传入的 标量值\n   */\n  addScalar(v: number) {\n    add(this.elements, this.elements, [v, v, v]);\n    return this;\n  }\n\n  /**\n   * 从此向量减去 vec 三维向量\n   * @param vec 传入的 Vector3\n   */\n  subtract(vec: Vector3) {\n    subtract(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量减去标量 v，默认构建一个三维向量 [v, v, v]\n   * @param v 标量值\n   */\n  subtractScalar(v: number) {\n    subtract(this.elements, this.elements, [v, v, v]);\n    return this;\n  }\n\n  /**\n   * 将向量 a 与向量 b 相减后的向量赋值给此向量\n   * @param a\n   * @param b\n   */\n  subVectors(a: Vector3, b: Vector3) {\n    subtract(this.elements, a.elements, b.elements);\n    return this;\n  }\n\n  /**\n   * 将此向量与 vec 向量相乘\n   * @param vec\n   */\n  multiply(vec: Vector3) {\n    multiply(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量与标量 v 相乘，默认构建一个三维向量 [v, v, v]\n   * @param v 标量值\n   */\n  multiplyScalar(v: number) {\n    multiply(this.elements, this.elements, [v, v, v]);\n    return this;\n  }\n\n  /**\n   * 将此向量与 vec 向量相除\n   * @param vec\n   */\n  divide(vec) {\n    divide(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量与标量 v 相除，默认构建一个三维向量 [v, v, v]\n   * @param v 标量值\n   */\n  divideScalar(v) {\n    divide(this.elements, this.elements, [v, v, v]);\n    return this;\n  }\n\n  /**\n   * 缩放此向量\n   * @param s\n   */\n  scale(s: number) {\n    scale(this.elements, this.elements, s);\n    return this;\n  }\n\n  /**\n   * 按标量缩放 v 向量后与此向量相加\n   * @param v\n   * @param s\n   */\n  scaleAndAdd(v: Vector3, s: number) {\n    scaleAndAdd(this.elements, this.elements, v.elements, s);\n    return this;\n  }\n\n  /**\n   * 计算该向量到所传入的 vec 间的距离\n   * @param vec\n   */\n  distanceTo(vec: Vector3) {\n    return distance(this.elements, vec.elements);\n  }\n\n  /**\n   * 计算两个 vec3 之间的平方距离\n   * @param vec\n   */\n  distanceToSquared(vec: Vector3) {\n    return squaredDistance(this.elements, vec.elements);\n  }\n\n  /**\n   * 计算此向量相对于正 x 轴的弧度角\n   * @param vector\n   */\n  angle(vector: Vector3) {\n    return angle(this.elements, [1, 0, 0]);\n  }\n\n  /**\n   * 以弧度返回该向量与向量 v 之间的角度\n   */\n  angleTo(vector: Vector3) {\n    return angle(this.elements, vector.elements);\n  }\n\n  /**\n   * 计算此向量与 vec 向量的点积\n   * @param vec\n   */\n  dot(vec: Vector3) {\n    return dot(this.elements, vec.elements);\n  }\n\n  /**\n   * 判断传入的向量 vec 与此向量是否相等\n   * @param vec\n   */\n  equals(vec: Vector3) {\n    return equals(this.elements, vec.elements);\n  }\n\n  /**\n   * 将该向量设置为它本身与传入的vec的叉积\n   * @param vec\n   */\n  cross(vec: Vector3) {\n    cross(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 针对此向量取反\n   */\n  negate() {\n    negate(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 针对此向量取倒数\n   */\n  inverse() {\n    inverse(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量到 vec 向量进行插值\n   * @param vec 目标向量\n   * @param t 插值因数，范围一般在[0-1]，通常在这两个值之间\n   */\n  lerp(vec: Vector3, t: number) {\n    lerp(this.elements, this.elements, vec.elements, t);\n    return this;\n  }\n\n  /**\n   * 将此向量转换为单位向量 (将其设置为与此向量具有相同方向但长度为 1 的向量)\n   */\n  normalize() {\n    normalize(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 通过将Euler（欧拉）对象转换为Quaternion（四元数）并应用， 将欧拉变换应用到此向量上\n   * @param euler\n   */\n  applyEuler(euler) {\n    const e = new Quaternion().fromEuler(euler);\n    return this.applyQuaternion(e);\n  }\n\n  /**\n   * 将此向量乘以 Matrix3\n   * @param matrix\n   */\n  applyMatrix3(matrix: Matrix3) {\n    transformMat3(this.elements, this.elements, matrix.elements);\n    return this;\n  }\n\n  /**\n   * 将此向量乘以 Matrix4\n   * @param matrix\n   */\n  applyMatrix4(matrix: Matrix4) {\n    transformMat4(this.elements, this.elements, matrix.elements);\n    return this;\n  }\n\n  /**\n   * 将 Quaternion 变换应用到该向量\n   * @param quaternion\n   */\n  applyQuaternion(quaternion: Quaternion) {\n    transformQuat(this.elements, this.elements, quaternion.elements);\n    return this;\n  }\n\n  /**\n   * 将传递的 Vector3 的 x 和 y, z 属性的值复制到此 Vector3\n   * @param vec3\n   */\n  copy(vec3: Vector3) {\n    this.x = vec3.x;\n    this.y = vec3.y;\n    this.z = vec3.z;\n    return this;\n  }\n\n  /**\n   * 克隆此向量\n   */\n  clone() {\n    return new Vector3(this.x, this.y, this.z);\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n", "import {\n  set,\n  add,\n  subtract,\n  multiply,\n  divide,\n  dot,\n  lerp,\n  scale,\n  equals,\n  distance,\n  length,\n  cross,\n  negate,\n  inverse,\n  normalize,\n  scaleAndAdd,\n  transformMat4,\n  transformQuat,\n  squaredDistance,\n} from 'gl-matrix/vec4';\n\nimport Vector from './Vector';\nimport Quaternion from './Quaternion';\nimport Matrix4 from './Matrix4';\nimport { getFloatArrayConstructor } from '../utils';\n\n/**\n * 四维向量，四维向量表示的是一个有顺序的、四个为一组的数字组合，可以用来描述：\n * - 一个位于四维空间中的点。\n * - 一个在四维空间中的方向与长度的定义。\n * ```ts\n * const a = new Vector4(0, 1, 0);\n *\n * const b = new Vector4(0, 0, 0);\n *\n * const d = a.distanceTo(b);\n * ```\n */\nexport default class Vector4 extends Vector {\n  elements = new (getFloatArrayConstructor())(4);\n\n  /**\n   * @param x 向量的x值，默认为0\n   * @param y 向量的y值，默认为0\n   * @param z 向量的z值，默认为0\n   * @param w 向量的w值，默认为0\n   */\n  constructor(x = 0, y = 0, z = 0, w = 0) {\n    super();\n    const v = this.elements;\n    v[0] = x;\n    v[1] = y;\n    v[2] = z;\n    v[3] = w;\n  }\n\n  /**\n   * 获取向量 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[0];\n  }\n\n  /**\n   * 设置向量 x 值\n   * @param x\n   */\n  set x(x: number) {\n    this.elements[0] = x;\n  }\n\n  /**\n   * 获取向量 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[1];\n  }\n\n  /**\n   * 设置向量 y 值\n   * @param y\n   */\n  set y(y: number) {\n    this.elements[1] = y;\n  }\n\n  /**\n   * 获取向量 z 值\n   * @return number;\n   */\n  get z() {\n    return this.elements[2];\n  }\n\n  /**\n   * 设置向量 z 值\n   * @param z\n   */\n  set z(z: number) {\n    this.elements[2] = z;\n  }\n\n  /**\n   * 获取向量 w 值\n   * @return number;\n   */\n  get w() {\n    return this.elements[3];\n  }\n\n  /**\n   * 设置向量 w 值\n   * @param w\n   */\n  set w(w: number) {\n    this.elements[3] = w;\n  }\n\n  /**\n   * 从对象赋值 Vector3 的 x、y、z、w 值\n   * @param object\n   */\n  fromObject(object) {\n    const { x, y, z, w } = object;\n    if (x !== undefined) this.x = x;\n    if (y !== undefined) this.y = y;\n    if (z !== undefined) this.z = z;\n    if (w !== undefined) this.w = w;\n    return this;\n  }\n\n  /**\n   * 转换到对象\n   */\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z,\n      w: this.w,\n    };\n  }\n\n  /**\n   * 设置向量的 x、y、z、w\n   * @param x\n   * @param y\n   * @param z\n   * @param w\n   */\n  set(x, y, z, w) {\n    set(this.elements, x, y, z, w);\n    return this;\n  }\n\n  /**\n   * 将向量的每个值设置为标量 s\n   * @param s\n   */\n  setScalar(s) {\n    return this.set(s, s, s, s);\n  }\n\n  /**\n   * 将传入的向量vec和这个向量相加，会改变当前向量\n   * @param vec 传入的 Vector4\n   */\n  add(vec: Vector4) {\n    add(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 将传入的标量量 v 和这个向量相加，会改变当前向量\n   * @param v 传入的 标量值\n   */\n  addScalar(v) {\n    add(this.elements, this.elements, [v, v, v, v]);\n    return this;\n  }\n\n  /**\n   * 从此向量减去 vec 四维向量\n   * @param vec 传入的 Vector4\n   */\n  subtract(vec: Vector4) {\n    subtract(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量减去标量 v，默认构建一个四维向量 [v, v, v, v]\n   * @param v 标量值\n   */\n  subtractScalar(v) {\n    subtract(this.elements, this.elements, [v, v, v, v]);\n    return this;\n  }\n\n  /**\n   * 将向量 a 与向量 b 相减后的向量赋值给此向量\n   * @param a\n   * @param b\n   */\n  subVectors(a: Vector4, b: Vector4) {\n    subtract(this.elements, a.elements, b.elements);\n    return this;\n  }\n\n  /**\n   * 将此向量与 vec 向量相乘\n   * @param vec\n   */\n  multiply(vec: Vector4) {\n    multiply(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量与标量 v 相乘，默认构建一个四维向量 [v, v, v, v]\n   * @param v 标量值\n   */\n  multiplyScalar(v: number) {\n    multiply(this.elements, this.elements, [v, v, v, v]);\n    return this;\n  }\n\n  /**\n   * 将此向量与 vec 向量相除\n   * @param vec\n   */\n  divide(vec: Vector4) {\n    divide(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量与标量 v 相除，默认构建一个四维向量 [v, v, v, v]\n   * @param v 标量值\n   */\n  divideScalar(v) {\n    divide(this.elements, this.elements, [v, v, v, v]);\n    return this;\n  }\n\n  /**\n   * 缩放此向量\n   * @param s\n   */\n  scale(s: number) {\n    scale(this.elements, this.elements, s);\n    return this;\n  }\n\n  /**\n   * 按标量缩放 v 向量后与此向量相加\n   * @param v\n   * @param s\n   */\n  scaleAndAdd(v: Vector4, s: number) {\n    scaleAndAdd(this.elements, this.elements, v.elements, s);\n    return this;\n  }\n\n  /**\n   * 计算该向量到所传入的 v 间的距离\n   * @param vec\n   */\n  distanceTo(vec: Vector4) {\n    return distance(this.elements, vec.elements);\n  }\n\n  /**\n   * 计算两个 Vector4 之间的平方距离\n   * @param vec\n   */\n  distanceToSquared(vec: Vector4) {\n    return squaredDistance(this.elements, vec.elements);\n  }\n\n  /**\n   * 计算从 `[0, 0, 0, 0]` 到此向量的直线距离\n   */\n  length() {\n    return length(this.elements);\n  }\n\n  /**\n   * 计算此向量与 vec 向量的点积\n   * @param vec\n   */\n  dot(vec: Vector4) {\n    return dot(this.elements, vec.elements);\n  }\n\n  /**\n   * 判断传入的向量 vec 与此向量是否相等\n   * @param vec\n   */\n  equals(vec: Vector4) {\n    return equals(this.elements, vec.elements);\n  }\n\n  /**\n   * 将该向量设置为它本身与传入的vec的叉积\n   * @param vec\n   */\n  cross(vec: Vector4) {\n    cross(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 针对此向量取反\n   */\n  negate() {\n    negate(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 针对此向量取倒数\n   */\n  inverse() {\n    inverse(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量到 vec 向量进行插值\n   * @param vec 目标向量\n   * @param t 插值因数，范围一般在[0-1]，通常在这两个值之间\n   */\n  lerp(vec: Vector4, t: number) {\n    lerp(this.elements, this.elements, vec.elements, t);\n    return this;\n  }\n\n  /**\n   * 将此向量转换为单位向量 (将其设置为与此向量具有相同方向但长度为 1 的向量)\n   */\n  normalize() {\n    normalize(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 将此向量乘以 Matrix4\n   * @param matrix\n   */\n  applyMatrix4(matrix: Matrix4) {\n    transformMat4(this.elements, this.elements, matrix.elements);\n    return this;\n  }\n\n  /**\n   * 将 Quaternion 变换应用到该向量\n   * @param quaternion\n   */\n  applyQuaternion(quaternion: Quaternion) {\n    transformQuat(this.elements, this.elements, quaternion.elements);\n    return this;\n  }\n\n  /**\n   * 将传递的 Vector4 的 x 、y、 z、w 属性的值复制到此 Vector4\n   * @param vec4\n   */\n  copy(vec4: Vector4) {\n    this.x = vec4.x;\n    this.y = vec4.y;\n    this.z = vec4.z;\n    this.w = vec4.w;\n    return this;\n  }\n\n  /**\n   * 克隆此向量\n   */\n  clone() {\n    return new Vector4(this.x, this.y, this.z, this.w);\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n", "import { getFloatArrayConstructor } from '../utils';\n\nexport default class Matrix {\n  /**\n   * 矩阵数据\n   * @private\n   */\n  elements = new (getFloatArrayConstructor())(16);\n\n  /**\n   * 从数组构建矩阵\n   * @param array 原始数组\n   * @param offset 数组偏移量\n   */\n  fromArray(array, offset = 0) {\n    let i = 0;\n    for (; i < this.elements.length; i++) {\n      this.elements[i] = array[offset + i];\n    }\n    return this;\n  }\n\n  /**\n   * 从矩阵转换到数组\n   * @param out 输出数据\n   * @param offset 偏移量\n   */\n  toArray(out: number[] | Float32Array | Float64Array = [], offset = 0) {\n    let i = 0;\n    for (; i < this.elements.length; i++) {\n      out[offset + i] = this.elements[i];\n    }\n    return out;\n  }\n}\n", "import {\n  set,\n  add,\n  scale,\n  subtract,\n  fromScaling,\n  fromTranslation,\n  translate,\n  determinant,\n  equals,\n  identity,\n  invert,\n  transpose,\n  multiply,\n  frob,\n  rotate,\n  adjoint,\n  copy,\n  fromQuat,\n  fromMat4,\n  fromRotation,\n  normalFromMat4,\n} from 'gl-matrix/mat3';\n\nimport Matrix from './Matrix';\nimport Matrix4 from './Matrix4';\nimport Vector2 from './Vector2';\nimport Quaternion from './Quaternion';\nimport { getFloatArrayConstructor } from '../utils';\n\n/**\n * 一个表示 3*3 的矩阵\n * 1--0--0\n * |  |  |\n * 0--1--0\n * |  |  |\n * 0--0--1\n * ```ts\n * const m = new Matrix3();\n * ```\n */\nexport default class Matrix3 extends Matrix {\n  elements = new (getFloatArrayConstructor())(9);\n\n  /**\n   * @param m00 第一行第一列，默认是 1\n   * @param m01 第一行第二列，默认是 0\n   * @param m02 第一行第三列，默认是 0\n   * @param m10 第二行第一列，默认是 0\n   * @param m11 第二行第二列，默认是 1\n   * @param m12 第二行第三列，默认是 0\n   * @param m20 第三行第一列，默认是 0\n   * @param m21 第三行第二列，默认是 0\n   * @param m22 第三行第三列，默认是 1\n   */\n  constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n    super();\n    const e: Float32Array | Float64Array = this.elements;\n\n    e[0] = m00;\n    e[1] = m01;\n    e[2] = m02;\n\n    e[3] = m10;\n    e[4] = m11;\n    e[5] = m12;\n\n    e[6] = m20;\n    e[7] = m21;\n    e[8] = m22;\n  }\n\n  /**\n   * 获取向量 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[2];\n  }\n\n  /**\n   * 获取向量 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[5];\n  }\n\n  /**\n   * 获取向量 z 值\n   * @return number;\n   */\n  get z() {\n    return this.elements[8];\n  }\n\n  /**\n   * 获取单位矩阵\n   */\n  static get identity() {\n    return new Matrix3().fromArray(identity([]));\n  }\n\n  /**\n   * 将此矩阵的每一项设置为给定的值\n   * @param {Number} m00\n   * @param {Number} m01\n   * @param {Number} m02\n   * @param {Number} m10\n   * @param {Number} m11\n   * @param {Number} m12\n   * @param {Number} m20\n   * @param {Number} m21\n   * @param {Number} m22\n   * @return {Matrix3} this\n   */\n  set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    set(this.elements, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n    return this;\n  }\n\n  /**\n   * 将此矩阵转换为转置矩阵\n   * @return {Matrix3} this\n   */\n  transpose() {\n    transpose(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 将此矩阵转换为逆矩阵\n   * @param  {Matrix3} [m = this]\n   * @return {Matrix3} this\n   */\n  invert(m = this) {\n    invert(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 计算此矩阵的伴随矩阵\n   * @param  {Matrix3} [m=this]\n   * @return {Matrix3} this\n   */\n  adjoint(m = this) {\n    adjoint(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 计算行列式\n   * @return {Number}\n   */\n  determinant() {\n    return determinant(this.elements);\n  }\n\n  /**\n   * 计算两个Matrix3矩阵的乘积\n   * @param  {Matrix3} a\n   * @param  {Matrix3} [b] 如果不传，计算 this 和 a 的乘积\n   * @return {Matrix3} this\n   */\n  multiply(a: Matrix3, b?: Matrix3) {\n    if (b) {\n      multiply(this.elements, a.elements, b.elements);\n    } else {\n      multiply(this.elements, this.elements, a.elements);\n    }\n\n    return this;\n  }\n\n  /**\n   * 左乘\n   * @param  {Matrix3} a\n   * @param  {Matrix3} b 如果不传，计算 this 和 a 的左乘\n   * @return {Matrix3}  this\n   */\n  premultiply(a: Matrix3, b?: Matrix3) {\n    if (b) {\n      multiply(this.elements, b.elements, a.elements);\n    } else {\n      multiply(this.elements, a.elements, this.elements);\n    }\n    return this;\n  }\n\n  /**\n   * 通过给定的向量 Vector2 平移此矩阵\n   * @param  {Vector2} v 向量\n   * @return {Matrix3} this\n   */\n  translate(v: Vector2) {\n    translate(this.elements, this.elements, v.elements);\n    return this;\n  }\n\n  /**\n   * 旋转此矩阵\n   * @param  {Number} rad 弧度\n   * @return {Matrix3} this\n   */\n  rotate(rad: number) {\n    rotate(this.elements, this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 通过给定的 Vector2 向量缩放此矩阵\n   * @param  {Vector2} v 向量\n   * @return {Matrix3} this\n   */\n  scale(v: Vector2) {\n    scale(this.elements, this.elements, v.elements);\n    return this;\n  }\n\n  /**\n   * 计算单位矩阵平移后的矩阵\n   * @param  {Vector2} v 平移的向量\n   * @return {Matrix3} this\n   */\n  fromTranslation(v: Vector2) {\n    fromTranslation(this.elements, v.elements);\n    return this;\n  }\n\n  /**\n   * 计算单位矩阵旋转后的矩阵\n   * @param  {Number} rad 旋转弧度\n   * @return {Matrix3} this\n   */\n  fromRotation(rad: number) {\n    fromRotation(this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 计算单位矩阵缩放后的矩阵\n   * @param  {Vector2} v Scaling vector\n   * @return {Matrix3} this\n   */\n  fromScaling(v) {\n    fromScaling(this.elements, v.elements);\n    return this;\n  }\n\n  /**\n   * 根据给定的四元数计算矩阵\n   * @param  {Quaternion} q Quaternion to create matrix from\n   * @return {Matrix3} this\n   */\n  fromQuat(q: Quaternion) {\n    fromQuat(this.elements, q.elements);\n    return this;\n  }\n\n  /**\n   * 从 4x4 矩阵计算 3x3 正态矩阵（转置逆矩阵）\n   * @param  {Matrix4} m 给定的 Matrix4 矩阵\n   * @return {Matrix3} this\n   */\n  normalFromMat4(m) {\n    normalFromMat4(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 将 Matrix4 左上角的 3x3 值复制到给定的 Matrix3 中。\n   * @param  {Matrix4} m 源矩阵\n   * @return {Matrix3} this\n   */\n  fromMat4(m) {\n    fromMat4(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 计算此矩阵的 Frobenius 范数\n   * @return {Number} Frobenius 范数\n   */\n  frob() {\n    return frob(this.elements);\n  }\n\n  /**\n   * 将两个 Matrix3 矩阵相加\n   * @param {Matrix3} a\n   * @param {Matrix3} [b] 如果不传，计算 this 和 a 的和\n   * @return {Matrix3} this\n   */\n  add(a: Matrix3, b?: Matrix3) {\n    if (b) {\n      add(this.elements, a.elements, b.elements);\n    } else {\n      add(this.elements, this.elements, a.elements);\n    }\n\n    return this;\n  }\n\n  /**\n   * 将两个 Matrix3 矩阵相减\n   * @param {Matrix3} a\n   * @param {Matrix3} [b] 如果不传，计算 this 和 a 的差\n   * @return {Matrix3} this\n   */\n  subtract(a: Matrix3, b?: Matrix3) {\n    if (b) {\n      subtract(this.elements, a.elements, b.elements);\n    } else {\n      subtract(this.elements, this.elements, a.elements);\n    }\n    return this;\n  }\n\n  /**\n   * 判断两个矩阵是否近似相等\n   * @param {Matrix3} a\n   * @param {Matrix3} [b] 如果不传，比较 this 和 a 是否近似相等\n   * @return {Boolean}\n   */\n  equals(a: Matrix3, b?: Matrix3) {\n    if (b) {\n      return equals(a.elements, b.elements);\n    } else {\n      return equals(this.elements, a.elements);\n    }\n  }\n\n  /**\n   * 从给定的旋转角度，位置（二维向量），缩放计算矩阵\n   * @param rotation\n   * @param  {Number} x\n   * @param  {Number} y\n   * @param  {Number} scaleX\n   * @param  {Number} scaleY\n   * @return {Matrix3}\n   */\n  fromRotationTranslationScale(rotation, x, y, scaleX, scaleY) {\n    const cos = Math.cos(rotation);\n    const sin = Math.sin(rotation);\n\n    this.set(scaleX * cos, -scaleY * sin, 0, scaleX * sin, scaleY * cos, 0, x, y, 1);\n    return this;\n  }\n\n  /**\n   * 从 4x4 矩阵计算 3x3 正态矩阵（转置逆矩阵）\n   * 这个值传递给着色器，用于计算物体的光照。 它是物体的modelViewMatrix矩阵中，左上角3x3子矩阵的逆的转置矩阵\n   * @param m\n   */\n  getNormalMatrix(m: Matrix4) {\n    normalFromMat4(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 将传入的 Matrix3 复制到此矩阵\n   * @param  {Matrix3} m 源矩阵\n   * @return {Matrix3} this\n   */\n  copy(m: Matrix3) {\n    copy(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 从此矩阵创建一个新的 3*3 矩阵\n   * @return {Matrix3} a new Matrix3\n   */\n  clone() {\n    return new Matrix3().copy(this);\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n", "import {\n  set,\n  copy,\n  scale,\n  fromRotation,\n  fromXRotation,\n  fromYRotation,\n  fromZRotation,\n  fromScaling,\n  fromTranslation,\n  rotate,\n  rotateX,\n  rotateY,\n  rotateZ,\n  translate,\n  determinant,\n  equals,\n  getRotation,\n  getScaling,\n  getTranslation,\n  identity,\n  invert,\n  adjoint,\n  transpose,\n  add,\n  subtract,\n  multiply,\n  multiplyScalar,\n  perspective,\n  ortho,\n  fromQuat,\n  fromRotationTranslation,\n  fromRotationTranslationScale,\n} from 'gl-matrix/mat4';\n\nimport Matrix from './Matrix';\nimport Vector3 from './Vector3';\nimport Quaternion from './Quaternion';\nimport { degToRad, getFloatArrayConstructor } from '../utils';\n\nconst tempArray: number[] = [];\n\n/**\n * 一个表示 4*4 的矩阵\n * 1--0--0--0\n * |  |  |  |\n * 0--1--0--0\n * |  |  |  |\n * 0--0--1--0\n * |  |  |  |\n * 0--0--0--1\n * ```ts\n * const m = new Matrix4();\n * ```\n */\nexport default class Matrix4 extends Matrix {\n  elements = new (getFloatArrayConstructor())(16);\n\n  /**\n   * @param m00 第一行第一列，默认是 1\n   * @param m01 第一行第二列，默认是 0\n   * @param m02 第一行第三列，默认是 0\n   * @param m03 第一行第四列，默认是 0\n   * @param m10 第二行第一列，默认是 0\n   * @param m11 第二行第二列，默认是 1\n   * @param m12 第二行第三列，默认是 0\n   * @param m13 第二行第四列，默认是 0\n   * @param m20 第三行第一列，默认是 0\n   * @param m21 第三行第二列，默认是 0\n   * @param m22 第三行第三列，默认是 1\n   * @param m23 第三行第四列，默认是 0\n   * @param m30 第四行第一列，默认是 0\n   * @param m31 第四行第二列，默认是 0\n   * @param m32 第四行第三列，默认是 0\n   * @param m33 第四行第四列，默认是 1\n   */\n  constructor(\n    m00 = 1,\n    m01 = 0,\n    m02 = 0,\n    m03 = 0,\n    m10 = 0,\n    m11 = 1,\n    m12 = 0,\n    m13 = 0,\n    m20 = 0,\n    m21 = 0,\n    m22 = 1,\n    m23 = 0,\n    m30 = 0,\n    m31 = 0,\n    m32 = 0,\n    m33 = 1,\n  ) {\n    super();\n    const e: Float32Array | Float64Array = this.elements;\n\n    e[0] = m00;\n    e[1] = m01;\n    e[2] = m02;\n    e[3] = m03;\n\n    e[4] = m10;\n    e[5] = m11;\n    e[6] = m12;\n    e[7] = m13;\n\n    e[8] = m20;\n    e[9] = m21;\n    e[10] = m22;\n    e[11] = m23;\n\n    e[12] = m30;\n    e[13] = m31;\n    e[14] = m32;\n    e[15] = m33;\n  }\n\n  /**\n   * 获取向量 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[12];\n  }\n\n  /**\n   * 获取向量 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[13];\n  }\n\n  /**\n   * 获取向量 z 值\n   * @return number;\n   */\n  get z() {\n    return this.elements[14];\n  }\n\n  /**\n   * 获取向量 w 值\n   * @return number;\n   */\n  get w() {\n    return this.elements[15];\n  }\n\n  /**\n   * 获取单位矩阵\n   */\n  static get identity() {\n    return new Matrix4().fromArray(identity([]));\n  }\n\n  /**\n   * 将此矩阵的每一项设置为给定的值\n   * @param m00\n   * @param m01\n   * @param m02\n   * @param m03\n   * @param m10\n   * @param m11\n   * @param m12\n   * @param m13\n   * @param m20\n   * @param m21\n   * @param m22\n   * @param m23\n   * @param m30\n   * @param m31\n   * @param m32\n   * @param m33\n   */\n  set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    set(this.elements, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n    return this;\n  }\n\n  /**\n   * 将此矩阵转换为转置矩阵\n   * @return {Matrix4} this\n   */\n  transpose() {\n    transpose(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 将此矩阵转换为逆矩阵\n   * @param m 默认为当前实例\n   * @return Matrix4\n   */\n  invert(m = this) {\n    invert(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 计算此矩阵的伴随矩阵\n   * @param m 默认为当前实例\n   */\n  adjoint(m = this) {\n    adjoint(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 计算行列式\n   * @return {Number}\n   */\n  determinant() {\n    return determinant(this.elements);\n  }\n\n  /**\n   * 将两个 Matrix4 矩阵相加\n   * @param {Matrix4} a\n   * @param {Matrix4} [b] 如果不传，计算 this 和 a 的和\n   * @return {Matrix4} this\n   */\n  add(a: Matrix4, b?: Matrix4) {\n    if (b) {\n      add(this.elements, a.elements, b.elements);\n    } else {\n      add(this.elements, this.elements, a.elements);\n    }\n\n    return this;\n  }\n\n  /**\n   * 将两个 Matrix4 矩阵相减\n   * @param {Matrix4} a\n   * @param {Matrix4} [b] 如果不传，计算 this 和 a 的差\n   * @return {Matrix4} this\n   */\n  subtract(a: Matrix4, b?: Matrix4) {\n    if (b) {\n      subtract(this.elements, a.elements, b.elements);\n    } else {\n      subtract(this.elements, this.elements, a.elements);\n    }\n    return this;\n  }\n\n  /**\n   * 计算两个 Matrix4 矩阵的乘积\n   * @param  {Matrix4} a\n   * @param  {Matrix4} [b] 如果不传，计算 this 和 a 的乘积\n   * @return {Matrix4} this\n   */\n  multiply(a: Matrix4, b?: Matrix4) {\n    if (b) {\n      multiply(this.elements, a.elements, b.elements);\n    } else {\n      multiply(this.elements, this.elements, a.elements);\n    }\n    return this;\n  }\n\n  /**\n   * 计算 Matrix4 与标量的乘积\n   * @param a 如果不传，计算 this 和 b 的乘积\n   * @param b\n   */\n  multiplyScalar(a: Matrix4 = this, b?: number) {\n    multiplyScalar(this.elements, a.elements, b);\n    return this;\n  }\n\n  /**\n   * 左乘\n   * @param  {Matrix4} a\n   * @param  {Matrix4} b 如果不传，计算 this 和 a 的左乘\n   * @return {Matrix4}  this\n   */\n  premultiply(a: Matrix4, b?: Matrix4) {\n    if (b) {\n      multiply(this.elements, b.elements, a.elements);\n    } else {\n      multiply(this.elements, a.elements, this.elements);\n    }\n    return this;\n  }\n\n  /**\n   * 通过给定的向量 Vector3 平移此矩阵\n   * @param  {Vector3} v 向量\n   * @return {Matrix4} this\n   */\n  translate(v: Vector3) {\n    translate(this.elements, this.elements, v.elements);\n    return this;\n  }\n\n  /**\n   * 旋转此矩阵\n   * @param  {Number} rad 弧度\n   * @return {Matrix4} this\n   */\n  rotate(rad: number) {\n    rotate(this.elements, this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 通过给定的 Vector3 向量缩放此矩阵\n   * @param vec3\n   */\n  scale(vec3: Vector3) {\n    scale(this.elements, this.elements, vec3.elements);\n    return this;\n  }\n\n  /**\n   * 通过标量 s 缩放此矩阵，默认在内部构建一个三维向量 [s, s, s]\n   * @param s\n   */\n  scaleScalar(s: number) {\n    scale(this.elements, this.elements, [s, s, s]);\n    return this;\n  }\n\n  /**\n   * 从平移向量创建矩阵\n   * @param vec\n   */\n  fromTranslation(vec: Vector3) {\n    fromTranslation(this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从给定轴和旋转角度创建矩阵\n   * @param rad 弧度\n   * @param axis 轴\n   */\n  fromRotation(rad: number, axis) {\n    fromRotation(this.elements, rad, axis);\n    return this;\n  }\n\n  /**\n   * 从绕 X 轴的给定角度创建矩阵\n   * @param rad\n   */\n  fromRotationX(rad: number) {\n    fromXRotation(this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 从绕 Y 轴的给定角度创建矩阵\n   * @param rad\n   */\n  fromRotationY(rad: number) {\n    fromYRotation(this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 从绕 Z 轴的给定角度创建矩阵\n   * @param rad\n   */\n  fromRotationZ(rad) {\n    fromZRotation(this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 从缩放向量计算矩阵\n   * @param vec\n   */\n  fromScale(vec: Vector3) {\n    fromScaling(this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从平移向量和四元数计算矩阵\n   * @param quat\n   * @param v\n   */\n  fromRotationTranslation(quat: Quaternion, v: Vector3) {\n    fromRotationTranslation(this.elements, quat.elements, v.elements);\n    return this;\n  }\n\n  /**\n   * 创建一个透视投影矩阵\n   * @param fov\n   * @param aspect\n   * @param near\n   * @param far\n   */\n  fromPerspective(fov, aspect, near, far) {\n    perspective(this.elements, degToRad(fov), aspect, near, far);\n    return this;\n  }\n\n  /**\n   * 创建一个正交投影矩阵\n   * @param left\n   * @param right\n   * @param bottom\n   * @param top\n   * @param near\n   * @param far\n   */\n  fromOrthogonal(left, right, bottom, top, near, far) {\n    ortho(this.elements, left, right, bottom, top, near, far);\n    return this;\n  }\n\n  /**\n   * 从给定的四元数计算矩阵\n   * @param q\n   */\n  fromQuat(q: Quaternion) {\n    fromQuat(this.elements, q.elements);\n    return this;\n  }\n\n  /**\n   * 判断两个矩阵是否近似相等\n   * @param mat4\n   */\n  equals(mat4) {\n    return equals(this.elements, mat4.value);\n  }\n\n  /**\n   * 获取旋转向量\n   * @param q\n   */\n  getRotation(q = new Quaternion()) {\n    getRotation(tempArray, this.elements);\n    q.set(tempArray[0], tempArray[1], tempArray[2], tempArray[3]);\n    return q;\n  }\n\n  /**\n   * 获取缩放向量\n   * @param v\n   */\n  getScale(v = new Vector3()) {\n    getScaling(tempArray, this.elements);\n    v.set(tempArray[0], tempArray[1], tempArray[2]);\n    return v;\n  }\n\n  /**\n   * 获取平移向量\n   * @param v\n   */\n  getTranslation(v = new Vector3()) {\n    getTranslation(tempArray, this.elements);\n    v.set(tempArray[0], tempArray[1], tempArray[2]);\n    return v;\n  }\n\n  /**\n   * 围绕 X 轴按给定弧度旋转矩阵\n   * @param rad\n   */\n  rotateX(rad) {\n    rotateX(this.elements, this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 围绕 Y 轴按给定弧度旋转矩阵\n   * @param rad\n   */\n  rotateY(rad) {\n    rotateY(this.elements, this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 围绕 Z 轴按给定弧度旋转矩阵\n   * @param rad\n   */\n  rotateZ(rad) {\n    rotateZ(this.elements, this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 从四元数旋转、平移和缩放创建矩阵\n   * @param v\n   * @param q\n   * @param s\n   */\n  compose(v: Vector3, q: Quaternion, s: Vector3) {\n    fromRotationTranslationScale(this.elements, q.elements, v.elements, s.elements);\n    return this;\n  }\n\n  /**\n   * 从矩阵转换到四元数、平移和缩放向量\n   */\n  decompose() {\n    return {\n      rotation: this.getRotation(),\n      scale: this.getScale(),\n      translation: this.getTranslation(),\n    };\n  }\n\n  /**\n   * 将传入的 Matrix4 复制到此矩阵\n   * @param  {Matrix4} m 源矩阵\n   * @return {Matrix4} this\n   */\n  copy(m: Matrix4) {\n    copy(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 从此矩阵创建一个新的 4*4 矩阵\n   * @return {Matrix4} a new Matrix4\n   */\n  clone() {\n    return new Matrix4().copy(this);\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n", "import { clamp, getFloatArrayConstructor } from '../utils/math';\n\nimport Vector from './Vector';\nimport Vector3 from './Vector3';\nimport Matrix4 from './Matrix4';\nimport Quaternion from './Quaternion';\n\nimport type { ICallback } from '../types';\n\nexport type ANGLE_ORDER = 'zyx' | 'xyz' | 'yxz' | 'yzx' | 'zxy' | 'xzy';\n\n/**\n * 欧拉角描述一个旋转变换，通过指定轴顺序和其各个轴向上的指定旋转角度来旋转一个物体\n *\n * ```ts\n * const a = new Euler(0, 1, 1.57, 'xyz' )\n * ```\n */\nexport default class Euler extends Vector {\n  elements = new (getFloatArrayConstructor())(3);\n\n  #changeCallbacks: ICallback[] = [];\n\n  #order: ANGLE_ORDER = 'xyz';\n\n  /**\n   * @param x 用弧度表示x轴旋转量，默认值是 0\n   * @param y 用弧度表示y轴旋转量，默认值是 0\n   * @param z 用弧度表示z轴旋转量，默认值是 0\n   * @param order 表示旋转顺序的字符串，默认为'xyz'\n   */\n  constructor(x = 0, y = 0, z = 0, order: ANGLE_ORDER = 'xyz') {\n    super();\n    const v = this.elements;\n    v[0] = x;\n    v[1] = y;\n    v[2] = z;\n    this.#order = order;\n  }\n\n  /**\n   * 获取 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[0];\n  }\n\n  /**\n   * 设置 x 值\n   * @param x\n   */\n  set x(x: number) {\n    this.elements[0] = x;\n    this.triggerChange();\n  }\n\n  /**\n   * 获取 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[1];\n  }\n\n  /**\n   * 设置 y 值\n   * @param y\n   */\n  set y(y) {\n    this.elements[1] = y;\n    this.triggerChange();\n  }\n\n  /**\n   * 获取 z 值\n   * @return number;\n   */\n  get z() {\n    return this.elements[2];\n  }\n\n  /**\n   * 设置 z 值\n   * @param z\n   */\n  set z(z: number) {\n    this.elements[2] = z;\n    this.triggerChange();\n  }\n\n  /**\n   * 获取旋转顺序\n   */\n  get order() {\n    return this.#order;\n  }\n\n  /**\n   * 设置旋转顺序\n   * @param order\n   */\n  set order(order) {\n    this.#order = order;\n    this.triggerChange();\n  }\n\n  get roll() {\n    return this.x;\n  }\n\n  set roll(roll) {\n    this.x = roll;\n  }\n\n  get pitch() {\n    return this.y;\n  }\n\n  set pitch(pitch) {\n    this.y = pitch;\n  }\n\n  get yaw() {\n    return this.z;\n  }\n\n  set yaw(yaw) {\n    this.z = yaw;\n  }\n\n  /**\n   * 从对象创建欧拉角\n   * @param x\n   * @param y\n   * @param z\n   * @param order\n   */\n  fromObject({ x, y, z, order }) {\n    if (x !== undefined) {\n      this.x = x;\n    }\n    if (y !== undefined) {\n      this.y = y;\n    }\n    if (z !== undefined) {\n      this.z = z;\n    }\n    if (order !== undefined) {\n      this.order = order;\n    }\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 转换到对象\n   */\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z,\n      order: this.order,\n    };\n  }\n\n  /**\n   * 从 Matrix4 创建欧拉角\n   * @param m\n   * @param order\n   * @param update\n   */\n  fromRotationMatrix(m: Matrix4, order = this.#order, update = true) {\n    const te = m.toArray();\n    const m11 = te[0];\n    const m12 = te[4];\n    const m13 = te[8];\n    const m21 = te[1];\n    const m22 = te[5];\n    const m23 = te[9];\n    const m31 = te[2];\n    const m32 = te[6];\n    const m33 = te[10];\n\n    switch (order) {\n      case 'xyz':\n        this.y = Math.asin(clamp(m13, -1, 1));\n\n        if (Math.abs(m13) < 0.9999999) {\n          this.x = Math.atan2(-m23, m33);\n          this.z = Math.atan2(-m12, m11);\n        } else {\n          this.x = Math.atan2(m32, m22);\n          this.z = 0;\n        }\n        break;\n      case 'yxz':\n        this.x = Math.asin(-clamp(m23, -1, 1));\n\n        if (Math.abs(m23) < 0.9999999) {\n          this.y = Math.atan2(m13, m33);\n          this.z = Math.atan2(m21, m22);\n        } else {\n          this.y = Math.atan2(-m31, m11);\n          this.z = 0;\n        }\n\n        break;\n      case 'zxy':\n        this.x = Math.asin(clamp(m32, -1, 1));\n\n        if (Math.abs(m32) < 0.9999999) {\n          this.y = Math.atan2(-m31, m33);\n          this.z = Math.atan2(-m12, m22);\n        } else {\n          this.y = 0;\n          this.z = Math.atan2(m21, m11);\n        }\n        break;\n      case 'zyx':\n        this.y = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < 0.9999999) {\n          this.x = Math.atan2(m32, m33);\n          this.z = Math.atan2(m21, m11);\n        } else {\n          this.x = 0;\n          this.z = Math.atan2(-m12, m22);\n        }\n        break;\n      case 'yzx':\n        this.z = Math.asin(clamp(m21, -1, 1));\n\n        if (Math.abs(m21) < 0.9999999) {\n          this.x = Math.atan2(-m23, m22);\n          this.y = Math.atan2(-m31, m11);\n        } else {\n          this.x = 0;\n          this.y = Math.atan2(m13, m33);\n        }\n        break;\n      case 'xzy':\n        this.z = Math.asin(-clamp(m12, -1, 1));\n\n        if (Math.abs(m12) < 0.9999999) {\n          this.x = Math.atan2(m32, m22);\n          this.y = Math.atan2(m13, m11);\n        } else {\n          this.x = Math.atan2(-m23, m33);\n          this.y = 0;\n        }\n        break;\n      default:\n        throw new Error('Unknown Euler angle order');\n    }\n    this.#order = order;\n    if (update) {\n      this.triggerChange();\n    }\n\n    return this;\n  }\n\n  /**\n   * 从四元数创建欧拉角\n   * @param q\n   */\n  fromQuaternion(q: Quaternion) {\n    const [x, y, z, w] = q.elements;\n    const a = y * y;\n    const s = -2 * (a + z * z) + 1;\n    const o = 2 * (x * y + w * z);\n    let l = -2 * (x * z - w * y);\n    const c = 2 * (y * z + w * x);\n    const h = -2 * (x * x + a) + 1;\n    l = l > 1 ? 1 : l;\n    l = l < -1 ? -1 : l;\n    const d = Math.atan2(c, h);\n    const u = Math.asin(l);\n    const f = Math.atan2(o, s);\n    return new Euler(d, u, f, 'zyx');\n  }\n\n  /**\n   * 从 Vector3 创建欧拉角\n   * @param vec3\n   * @param order\n   */\n  fromVector3(vec3, order = this.#order) {\n    return this.set(vec3.x, vec3.y, vec3.z, order);\n  }\n\n  /**\n   * 转换到四元数\n   */\n  toQuaternion() {\n    const t = Math.cos(0.5 * this.yaw);\n    const e = Math.sin(0.5 * this.yaw);\n    const n = Math.cos(0.5 * this.roll);\n    const r = Math.sin(0.5 * this.roll);\n    const i = Math.cos(0.5 * this.pitch);\n    const a = Math.sin(0.5 * this.pitch);\n    return new Quaternion(\n      t * r * i - e * n * a,\n      t * n * a + e * r * i,\n      e * n * i - t * r * a,\n      t * n * i + e * r * a,\n    );\n  }\n\n  /**\n   * 转换到 Vector3\n   */\n  toVector3() {\n    return new Vector3(this.x, this.y, this.z);\n  }\n\n  /**\n   * 设置欧拉角的 x、y、z、order\n   * @param x\n   * @param y\n   * @param z\n   * @param order\n   */\n  set(x, y, z, order = this.#order) {\n    this.elements[0] = x;\n    this.elements[1] = y;\n    this.elements[2] = z;\n    this.#order = order;\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 克隆此欧拉角对象\n   */\n  clone() {\n    return new Euler().copy(this);\n  }\n\n  /**\n   * 将传入的 euler 的各数值复制到此欧拉角\n   * @param euler\n   */\n  copy(euler: Euler) {\n    let i = 0;\n    for (; i < this.elements.length; i++) {\n      this.elements[i] = euler.elements[i];\n    }\n\n    this.#order = euler.order;\n\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 判断两个欧拉角是否相同\n   * @param e\n   */\n  equals(e: Euler) {\n    return this.x === e.x && this.y === e.y && this.z === e.z && this.order === e.order;\n  }\n\n  /**\n   * 监听欧拉角变更\n   * @param cb 回调函数\n   */\n  onChange(cb: ICallback) {\n    if (!this.#changeCallbacks.includes(cb)) {\n      this.#changeCallbacks.push(cb);\n    }\n  }\n\n  /**\n   * 触发所有的回调函数\n   */\n  triggerChange() {\n    this.#changeCallbacks.forEach((f) => f());\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n", "export default function(e,f){var a={white:\"#ffffff\",bisque:\"#ffe4c4\",blue:\"#0000ff\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",azure:\"#f0ffff\",whitesmoke:\"#f5f5f5\",papayawhip:\"#ffefd5\",plum:\"#dda0dd\",blanchedalmond:\"#ffebcd\",black:\"#000000\",gold:\"#ffd700\",goldenrod:\"#daa520\",gainsboro:\"#dcdcdc\",cornsilk:\"#fff8dc\",cornflowerblue:\"#6495ed\",burlywood:\"#deb887\",aquamarine:\"#7fffd4\",beige:\"#f5f5dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkkhaki:\"#bdb76b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",darkgrey:\"#a9a9a9\",peachpuff:\"#ffdab9\",darkmagenta:\"#8b008b\",darkred:\"#8b0000\",darkorchid:\"#9932cc\",darkorange:\"#ff8c00\",darkslateblue:\"#483d8b\",gray:\"#808080\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",wheat:\"#f5deb3\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",ghostwhite:\"#f8f8ff\",darkviolet:\"#9400d3\",magenta:\"#ff00ff\",green:\"#008000\",dodgerblue:\"#1e90ff\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",blueviolet:\"#8a2be2\",forestgreen:\"#228b22\",lawngreen:\"#7cfc00\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",fuchsia:\"#ff00ff\",brown:\"#a52a2a\",maroon:\"#800000\",mediumblue:\"#0000cd\",lightcoral:\"#f08080\",darkturquoise:\"#00ced1\",lightcyan:\"#e0ffff\",ivory:\"#fffff0\",lightyellow:\"#ffffe0\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",linen:\"#faf0e6\",mediumaquamarine:\"#66cdaa\",lemonchiffon:\"#fffacd\",lime:\"#00ff00\",khaki:\"#f0e68c\",mediumseagreen:\"#3cb371\",limegreen:\"#32cd32\",mediumspringgreen:\"#00fa9a\",lightskyblue:\"#87cefa\",lightblue:\"#add8e6\",midnightblue:\"#191970\",lightpink:\"#ffb6c1\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",mintcream:\"#f5fffa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",navajowhite:\"#ffdead\",navy:\"#000080\",mediumvioletred:\"#c71585\",powderblue:\"#b0e0e6\",palegoldenrod:\"#eee8aa\",oldlace:\"#fdf5e6\",paleturquoise:\"#afeeee\",mediumturquoise:\"#48d1cc\",mediumorchid:\"#ba55d3\",rebeccapurple:\"#663399\",lightsteelblue:\"#b0c4de\",mediumslateblue:\"#7b68ee\",thistle:\"#d8bfd8\",tan:\"#d2b48c\",orchid:\"#da70d6\",mediumpurple:\"#9370db\",purple:\"#800080\",pink:\"#ffc0cb\",skyblue:\"#87ceeb\",springgreen:\"#00ff7f\",palegreen:\"#98fb98\",red:\"#ff0000\",yellow:\"#ffff00\",slateblue:\"#6a5acd\",lavenderblush:\"#fff0f5\",peru:\"#cd853f\",palevioletred:\"#db7093\",violet:\"#ee82ee\",teal:\"#008080\",slategray:\"#708090\",slategrey:\"#708090\",aliceblue:\"#f0f8ff\",darkseagreen:\"#8fbc8f\",darkolivegreen:\"#556b2f\",greenyellow:\"#adff2f\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",tomato:\"#ff6347\",silver:\"#c0c0c0\",sienna:\"#a0522d\",lavender:\"#e6e6fa\",lightgreen:\"#90ee90\",orange:\"#ffa500\",orangered:\"#ff4500\",steelblue:\"#4682b4\",royalblue:\"#4169e1\",turquoise:\"#40e0d0\",yellowgreen:\"#9acd32\",salmon:\"#fa8072\",saddlebrown:\"#8b4513\",sandybrown:\"#f4a460\",rosybrown:\"#bc8f8f\",darksalmon:\"#e9967a\",lightgoldenrodyellow:\"#fafad2\",snow:\"#fffafa\",lightgrey:\"#d3d3d3\",lightgray:\"#d3d3d3\",dimgray:\"#696969\",dimgrey:\"#696969\",olivedrab:\"#6b8e23\",olive:\"#808000\"},r={};for(var d in a)r[a[d]]=d;var l={};e.prototype.toName=function(f){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return\"transparent\";var d,i,n=r[this.toHex()];if(n)return n;if(null==f?void 0:f.closest){var o=this.toRgb(),t=1/0,b=\"black\";if(!l.length)for(var c in a)l[c]=new e(a[c]).toRgb();for(var g in a){var u=(d=o,i=l[g],Math.pow(d.r-i.r,2)+Math.pow(d.g-i.g,2)+Math.pow(d.b-i.b,2));u<t&&(t=u,b=g)}return b}};f.string.push([function(f){var r=f.toLowerCase(),d=\"transparent\"===r?\"#0000\":a[r];return d?new e(d).toRgb():null},\"name\"])}\n", "import { colord, extend } from 'colord';\nimport type { AnyColor } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\nimport Vector4 from '../math/Vector4';\nimport Vector3 from '../math/Vector3';\nimport { isUndef, isNumber, isHex, clamp } from '../utils';\n\nextend([namesPlugin]);\n\n/**\n * 归一化\n * @param a\n * @param min\n * @param max\n */\nconst normalize = (a, min, max) => {\n  const hex = isHex(a);\n  const diff = max - min;\n  let v = clamp(Number.parseFloat(`${a}`), min, max);\n  if (hex) {\n    v = Number.parseInt('' + a * max, 10) / 100;\n  }\n  return Math.abs(v - max) < 1e-6 ? 1 : (a % diff) / diff;\n};\n\n/**\n * 一个表示颜色的类，可以使用这个类来初始化颜色\n * ```ts\n * // 默认是白色\n * const color1 = new Color();\n *\n * // 16进制颜色\n * const color2 = new Color('#ff0000');\n *\n * // RGB\n * const color3 = new Color('rgb(255, 0, 0)');\n * const color3 = new Color({ r: 255, g: 255, b: 255 });\n * const color3 = new Color({ r: 255, g: 255, b: 255, a: 1 });\n *\n * // css 颜色名称\n * const color5 = new Color('skyblue');\n *\n * // HSL\n * const color6 = new Color('hsl(0, 100%, 50%)');\n *\n * // HSV\n * const color6 = new Color({ h: 360, s: 100, v: 100, a: 1 });\n *\n * // 设置 rgba 值, 支持归一化和非归一化的值\n * const color7 = new Color(1, 0, 0);\n * const color7 = new Color(1, 0, 0, 1, true);\n * ```\n */\nexport default class Color {\n  public r: number;\n  public g: number;\n  public b: number;\n  public a: number;\n\n  /**\n   * @param v 可以是 rgba 的 r 通道值，也可以是 AnyColor\n   * @param g g 通道\n   * @param b b 通道\n   * @param a alpha 通道\n   * @param isNormalized 是否是归一化的数值\n   */\n  constructor(v: number | AnyColor = 255, g?: number, b?: number, a = 1, isNormalized = false) {\n    this.r = 1;\n    this.g = 1;\n    this.b = 1;\n    this.a = 1;\n\n    /**\n     * 如果仅传入一个值，说明要么是数字要么是一个表示颜色的字符串或者对象\n     */\n    if (isUndef(g) && isUndef(b)) {\n      // 此处是（0-255 的值）可能和 three 不太一样\n      if (isNumber(v) && v <= 255) {\n        this.setRGBA(v, v, v, this.a, isNormalized);\n      } else {\n        // css 变量和颜色字符串都在此处解析\n        const rgb = colord(v as AnyColor).toRgb();\n        if (rgb) {\n          this.setRGBA(rgb.r, rgb.g, rgb.b, rgb.a);\n        } else {\n          console.error('Unsupported color value {'.concat(String(v), '} provided'));\n        }\n      }\n    } else {\n      this.setRGBA(v, g, b, a);\n    }\n  }\n\n  /**\n   * 解析颜色，凡是可以被 [colord](https://github.com/omgovich/colord) 解析的都可以使用\n   * @param c\n   */\n  fromColor(c: AnyColor) {\n    const color = colord(c).toRgb();\n    return this.setRGBA(color.r, color.g, color.b, color.a);\n  }\n\n  /**\n   * 解析 hsl 颜色\n   * @param h\n   * @param s\n   * @param l\n   * @param a\n   */\n  fromHSL(h, s, l, a = 1) {\n    const color = colord({\n      h,\n      s,\n      l,\n      a,\n    }).toRgb();\n    return this.setRGBA(color.r, color.g, color.b, color.a);\n  }\n\n  /**\n   * 解析 hsv 颜色\n   * @param h\n   * @param s\n   * @param v\n   * @param a\n   */\n  fromHSV(h, s, v, a = 1) {\n    const color = colord({\n      h,\n      s,\n      v,\n      a,\n    }).toRgb();\n    return this.setRGBA(color.r, color.g, color.b, color.a);\n  }\n\n  /**\n   * 设置 rgb 数值\n   * @param r r 值，一般为 0-255\n   * @param g g 值，一般为 0-255\n   * @param b b 值，一般为 0-255\n   */\n  setRGB(r: number, g: number, b: number) {\n    this.setRGBA(r, g, b, this.a);\n    return this;\n  }\n\n  /**\n   * 设置各通道的值\n   * @param r red 通道\n   * @param g green 通道\n   * @param b blue 通道\n   * @param a alpha 通道\n   * @param isNormalized 是否已经归一化（一般从颜色字符串解析的都是未归一化的）\n   */\n  setRGBA(r, g, b, a, isNormalized?: boolean) {\n    this.r = isNormalized ? r : normalize(r, 0, 255);\n    this.g = isNormalized ? g : normalize(g, 0, 255);\n    this.b = isNormalized ? b : normalize(b, 0, 255);\n    this.setAlpha(a);\n    return this;\n  }\n\n  /**\n   * 设置 alpha 通道\n   * @param alpha\n   */\n  setAlpha(alpha) {\n    if (alpha > 1) {\n      this.a = normalize(alpha, 0, 255);\n    } else {\n      this.a = alpha;\n    }\n    return this;\n  }\n\n  /**\n   * 输出 16 进制字符串\n   */\n  toHex() {\n    return colord(this.toObject()).toHex();\n  }\n\n  /**\n   * 输出 hsl 对象\n   */\n  toHSL() {\n    return colord(this.toObject()).toHsl();\n  }\n\n  /**\n   * 输出 hsv 对象\n   */\n  toHSV() {\n    return colord(this.toObject()).toHsv();\n  }\n\n  /**\n   * 将颜色转换为对象\n   * @param isNormalized 是否进行归一化，默认采用 0-255\n   */\n  toObject(isNormalized = false) {\n    const m = isNormalized ? 1 : 255;\n    return {\n      r: this.r * m,\n      g: this.g * m,\n      b: this.b * m,\n      a: this.a,\n    };\n  }\n\n  /**\n   * 转换为数组（一般已经归一化。可以直接传递给 gl）\n   */\n  toArray() {\n    return [this.r, this.g, this.b, this.a];\n  }\n\n  /**\n   * 转换为 Vector4\n   */\n  toVector() {\n    return new Vector4().fromArray(this.toArray());\n  }\n\n  /**\n   * 转换为 Vector3\n   */\n  toVector3() {\n    return new Vector3().fromArray(this.toArray());\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\n  }\n}\n\nexport type ColorLike =\n  | Color\n  | {\n      r: number;\n      g: number;\n      b: number;\n      a?: number;\n    };\n", "import { frustum, lookAt, perspective, ortho } from 'gl-matrix/mat4';\n\nimport Matrix4 from './Matrix4';\nimport Vector3 from './Vector3';\n\nexport default class ProjectionMatrix extends Matrix4 {\n  /**\n   * 一般用于生成相机的视椎体，用来做视椎剔除加速渲染\n   * @param mat4\n   * @param left\n   * @param right\n   * @param top\n   * @param bottom\n   * @param near\n   * @param far\n   */\n  frustum(mat4, left, right, top, bottom, near, far) {\n    frustum(mat4.elements, left, right, bottom, top, near, far);\n    return this;\n  }\n\n  /**\n   * 生成平面相机投影矩阵\n   * @param left\n   * @param right\n   * @param top\n   * @param bottom\n   * @param near\n   * @param far\n   */\n  orthographic(left, right, top, bottom, near, far) {\n    ortho(this.elements, left, right, bottom, top, near, far);\n    return this;\n  }\n\n  /**\n   * 生成透视相机投影矩阵\n   * @param fovy\n   * @param aspect\n   * @param near\n   * @param far\n   */\n  perspective(fovy, aspect, near, far) {\n    perspective(this.elements, fovy, aspect, near, far);\n    return this;\n  }\n\n  /**\n   * 设置物体的朝向\n   * @param eye\n   * @param target\n   * @param up\n   */\n  lookAt(eye, target = new Vector3(0, 0, 0), up = new Vector3(0, 1, 0)) {\n    lookAt(this.elements, eye.elements, target.elements, up.elements);\n    return this;\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString(): string {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n", "import type { WithNull } from '../types';\nimport Euler from '../math/Euler';\nimport Quaternion from '../math/Quaternion';\nimport Vector3 from '../math/Vector3';\nimport ProjectionMatrix from '../math/ProjectionMatrix';\n\n/**\n * 三维物体，是大部分对象的基类，提供了一系列的属性和方法来对三维空间中的物体进行操作\n */\nexport default class Object3D {\n  /**\n   * 是否可见\n   */\n  public visible: boolean;\n\n  /**\n   * 局部变换矩阵\n   */\n  public localMatrix: ProjectionMatrix;\n\n  /**\n   * 物体的世界变换矩阵 (如果没有父级，那么他和局部变化矩阵相同)\n   */\n  public worldMatrix: ProjectionMatrix;\n\n  /**\n   * 当这个属性设置了之后，它将计算每一帧的位移、旋转（四元变换）和缩放矩阵，并重新计算 `worldMatrix` 属性\n   */\n  public matrixAutoUpdate: boolean;\n\n  /**\n   * 物体局部位置\n   */\n  public position: Vector3;\n\n  /**\n   * 物体的局部缩放\n   */\n  public scale: Vector3;\n\n  /**\n   * 物体的局部旋转\n   */\n  public rotation: Euler;\n\n  /**\n   * 物体的局部旋转\n   */\n  public quaternion: Quaternion;\n\n  /**\n   * 物体的朝向\n   */\n  public up: Vector3;\n\n  /**\n   * 对象子级\n   */\n  public children: Object3D[];\n\n  /**\n   * 对象父级\n   */\n  public parent: WithNull<Object3D>;\n\n  /**\n   * 当这个属性设置了之后，它将计算在那一帧中的 `worldMatrix`，并将这个值重置为false。默认值为false\n   */\n  public worldMatrixNeedsUpdate: boolean;\n\n  constructor() {\n    this.visible = true;\n    this.localMatrix = new ProjectionMatrix();\n    this.worldMatrix = new ProjectionMatrix();\n    this.matrixAutoUpdate = true;\n    this.position = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.rotation = new Euler();\n    this.quaternion = new Quaternion();\n    this.up = new Vector3(0, 1, 0);\n    this.parent = null;\n    this.children = [];\n    this.worldMatrixNeedsUpdate = false;\n    this.rotation.onChange(() => {\n      this.quaternion.fromEuler(this.rotation);\n    });\n    this.quaternion.onChange(() => {\n      this.rotation.fromQuaternion(this.quaternion);\n    });\n  }\n\n  /**\n   * 添加对象到这个对象的子级\n   * @param object\n   * @param notifyChild\n   */\n  add(object: Object3D, notifyChild = true) {\n    if (!this.contains(object)) {\n      this.children.push(object);\n    }\n    if (notifyChild) {\n      object.setParent(this, false);\n    }\n  }\n\n  /**\n   * 从此对象移除传入的对象（如果存在）\n   * @param object\n   * @param notifyChild\n   */\n  remove(object: Object3D, notifyChild = true) {\n    if (this.contains(object)) {\n      this.children.splice(this.children.indexOf(object), 1);\n    }\n    if (notifyChild) {\n      object.setParent(null, false);\n    }\n  }\n\n  /**\n   * 判断此渲染对象的子集是否包含传入的渲染对象\n   * @param object\n   */\n  contains(object: Object3D) {\n    return this.children.includes(object);\n  }\n\n  /**\n   * 设置此渲染对象的父集\n   * @param object 渲染对象\n   * @param notifyParent 设置是否将此渲染对象添加到传入的渲染对象中\n   */\n  setParent(object, notifyParent = true) {\n    if (this.parent && object !== this.parent) {\n      this.parent.remove(this, false);\n    }\n    this.parent = object;\n    if (notifyParent && object) {\n      object.add(this, false);\n    }\n  }\n\n  /**\n   * 遍历此对象（包含子对象）\n   * @param callback 回调函数\n   */\n  traverse(callback) {\n    if (!callback(this)) {\n      for (let i = 0, l = this.children.length; i < l; i++) {\n        this.children[i].traverse(callback);\n      }\n    }\n  }\n\n  /**\n   * 旋转物体使其在世界空间中面朝一个点\n   * @param eye 朝向位置\n   * @param invert 是否反转\n   */\n  lookAt(eye: Vector3, invert?: boolean) {\n    if (invert) {\n      this.localMatrix.lookAt(this.position, eye, this.up);\n    } else {\n      this.localMatrix.lookAt(eye, this.position, this.up);\n    }\n    this.localMatrix.getRotation(this.quaternion);\n    this.rotation.fromQuaternion(this.quaternion);\n  }\n\n  /**\n   * 更新渲染对象的世界矩阵\n   * @param force 是否更新次渲染对象的子集\n   */\n  updateMatrixWorld(force?: boolean) {\n    let f = force;\n    if (this.matrixAutoUpdate) {\n      this.updateMatrix();\n    }\n    if (this.worldMatrixNeedsUpdate || f) {\n      if (this.parent === null) {\n        this.worldMatrix.copy(this.localMatrix);\n      } else {\n        this.worldMatrix.multiply(this.parent.worldMatrix, this.localMatrix);\n      }\n\n      this.worldMatrixNeedsUpdate = false;\n      f = true;\n    }\n\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      const child = this.children[i];\n\n      child.updateMatrixWorld(f);\n    }\n  }\n\n  /**\n   * 更新局部变换矩阵\n   */\n  updateMatrix() {\n    this.localMatrix.compose(this.position, this.quaternion, this.scale);\n    this.worldMatrixNeedsUpdate = true;\n  }\n\n  /**\n   * 从局部矩阵计算位置，旋转和缩放\n   */\n  decompose() {\n    this.localMatrix.getTranslation(this.position);\n    this.localMatrix.getRotation(this.quaternion);\n    this.localMatrix.getScale(this.scale);\n    this.rotation.fromQuaternion(this.quaternion);\n  }\n\n  /**\n   * 克隆此渲染对象\n   */\n  clone() {\n    return new Object3D().copy(this, false);\n  }\n\n  /**\n   * 复制给定的对象到这个对象中\n   * @param object 渲染对象\n   * @param recursive 设置是否复制子对象\n   */\n  copy(object: Object3D, recursive?: boolean) {\n    this.visible = object.visible;\n    this.position.copy(object.position);\n    this.scale.copy(object.scale);\n    this.rotation.copy(object.rotation);\n    this.quaternion.copy(object.quaternion);\n    this.up.copy(object.up);\n    this.localMatrix.copy(object.localMatrix);\n    this.worldMatrix.copy(object.worldMatrix);\n    this.matrixAutoUpdate = object.matrixAutoUpdate;\n\n    if (recursive) {\n      for (let i = 0, n = object.children.length; i < n; i++) {\n        const children = object.children[i];\n        this.add(children.clone());\n      }\n    }\n    return this;\n  }\n}\n", "import Renderer from './Renderer';\n\n/**\n * 这是一个基类，主要用于暴露 `renderer` 和 `gl` 以及 `rendererState`\n */\nexport default class Base {\n  public renderer: Renderer;\n\n  constructor(renderer: Renderer) {\n    this.renderer = renderer;\n  }\n\n  /**\n   * 获取 `webgl` 实例\n   */\n  get gl(): WebGLRenderingContext | WebGL2RenderingContext {\n    return this.renderer.gl;\n  }\n\n  /**\n   * 获取渲染状态\n   */\n  get rendererState() {\n    return this.renderer.state;\n  }\n}\n", "import { uid } from '../utils';\nimport type { WithNull } from '../types';\nimport Renderer from './Renderer';\n\n/**\n * `attribute` 支持的数据类型\n */\nexport type DataType =\n  | Float32Array\n  | Float64Array\n  | Uint32Array\n  | Uint16Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int32Array\n  | Int16Array\n  | Int8Array;\n\nexport interface Attribute {\n  /**\n   * `Attribute` 数据，必须是 `TypedArray` 类型\n   */\n  data: DataType;\n\n  /**\n   * 指定缓冲区每个顶点分量的个数, 一般为 1-4\n   */\n  size?: number;\n\n  /**\n   * 指定数组中每个元素的数据类型，一般我们不传时会由内部进行判断。\n   */\n  type?: GLenum;\n\n  /**\n   * 指定当整数值转换为浮点数时是否应该将整数数值归一化到特定的范围。\n   * - 对于 `gl.BYTE` 和 `gl.SHORT`，当设置为`true`时，归一化到 [-1, 1]。\n   * - 对于 `gl.UNSIGNED_BYTE` 和 `gl.UNSIGNED_SHORT`，当设置为`true`时，归一化到 [0, 1]。\n   * - 对于 `gl.FLOAT` 和 `gl.HALF_FLOAT`，此参数无效。\n   */\n  normalized?: boolean;\n\n  /**\n   * 指定实例化渲染的数量，仅当 `ANGLE_instanced_arrays` 扩展可用时才支持此参数，在\n   * `webgl2` 中默认支持，调用函数为 `vertexAttribDivisor`\n   */\n  divisor?: number;\n\n  /**\n   * 以字节为单位指定连续顶点属性开始之间的偏移量(即数组中一行长度)\n   */\n  stride?: number;\n\n  /**\n   * 指定顶点属性数组中第一部分的字节偏移量。必须是类型的字节长度的倍数\n   */\n  offset?: number;\n\n  /**\n   * 顶点数量\n   */\n  count?: number;\n\n  /**\n   * 指定缓冲区对象，常用的值为`gl.ARRAY_BUFFER` 和 `gl.ELEMENT_ARRAY_BUFFER`。当然在`webgl2` 中有一些新的可用值，如 `gl.UNIFORM_BUFFER`和 `gl.TRANSFORM_FEEDBACK_BUFFER`。\n   */\n  target?: GLenum;\n\n  /**\n   * 标记如何使用这些数据，`webgl` 会针对性的做一些优化，默认是 `gl.STATIC_DRAW`，即标记数据不会经常性改变。\n   * 其他可用值请参考 https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData。\n   */\n  usage?: GLenum;\n\n  /**\n   * `WebGLBuffer`，一般我们不需要指定，会在内部进行创建\n   */\n  buffer?: WebGLBuffer;\n\n  /**\n   * 标记此 `Attribute` 是否需要重新上传 `GPU`，一般我们在数据改变时需要将此值设置为`true`。\n   */\n  needsUpdate?: boolean;\n}\n\n/**\n * 获取 `Buffer` 数据类型\n * @param gl\n * @param data\n */\nconst getBufferType = (gl, data) => {\n  if (data instanceof Float32Array || data instanceof Float64Array) {\n    return gl.FLOAT;\n  }\n\n  if (data instanceof Uint16Array) {\n    return gl.UNSIGNED_SHORT;\n  }\n\n  if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {\n    return gl.UNSIGNED_BYTE;\n  }\n\n  if (data instanceof Uint32Array) {\n    return gl.UNSIGNED_INT;\n  }\n\n  if (data instanceof Int8Array) {\n    return gl.BYTE;\n  }\n\n  if (data instanceof Int16Array) {\n    return gl.SHORT;\n  }\n\n  if (data instanceof Int32Array) {\n    return gl.INT;\n  }\n};\n\n/**\n * 存储和 `BufferAttribute` 相关的属性\n */\nexport default class BufferAttribute {\n  /**\n   * `BufferAttribute` 的 `id`，不传时由内部生成。\n   */\n  public id: string;\n\n  /**\n   * `Attribute` 数据，必须是 `TypedArray` 类型\n   */\n  public data: DataType;\n\n  /**\n   * `BufferAttribute`中元素的数据类型\n   */\n  public type: GLenum;\n\n  /**\n   * `BufferAttribute`中缓冲区每个顶点分量的个数, 一般为 1-4\n   */\n  public size: number;\n\n  /**\n   * `BufferAttribute` 是否是实例化数据\n   */\n  public instanced: boolean;\n\n  /**\n   * `BufferAttribute`中缓冲区顶点的偏移量\n   */\n  public stride: number;\n\n  /**\n   * `BufferAttribute`中顶点属性数组中第一部分的字节偏移量\n   */\n  public offset: number;\n\n  /**\n   * 指定实例化渲染的数量\n   */\n  public divisor: number;\n\n  /**\n   * 当整数值转换为浮点数时是否应该将整数数值归一化到特定的范围\n   */\n  public normalized: boolean;\n\n  /**\n   * 标记此 `BufferAttribute` 是否需要重新上传 `GPU`，一般我们在数据改变时需要将此值设置为`true`。\n   */\n  public needsUpdate: boolean;\n\n  /**\n   * 顶点数量\n   */\n  public count: number;\n\n  /**\n   * 标记如何使用这些数据，`webgl` 会针对性的做一些优化，默认是 `gl.STATIC_DRAW`，即标记数据不会经常性改变。\n   * 其他可用值请参考 https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData。\n   */\n  public usage: GLenum;\n\n  /**\n   * 缓冲区对象，常用的值为`gl.ARRAY_BUFFER` 和 `gl.ELEMENT_ARRAY_BUFFER`。当然在`webgl2` 中有一些新的可用值，如 `gl.UNIFORM_BUFFER`和 `gl.TRANSFORM_FEEDBACK_BUFFER`。\n   */\n  public target: GLenum;\n\n  /**\n   * WebGLBuffer\n   */\n  public buffer: WithNull<WebGLBuffer>;\n\n  constructor(renderer: Renderer, attribute: Attribute) {\n    const attr = Object.assign(\n      {},\n      {\n        size: 1,\n        normalized: true,\n        stride: 0,\n        offset: 0,\n        divisor: 0,\n        usage: renderer.gl.STATIC_DRAW,\n      },\n      attribute,\n    );\n    this.id = uid('attribute');\n    this.needsUpdate = false;\n\n    if (!attribute.data || Array.isArray(attribute.data)) {\n      throw new TypeError('BufferAttribute: data should be a typed array');\n    }\n\n    this.data = attr.data;\n    this.size = attr.size || 1;\n    this.type = attr.type || getBufferType(renderer.gl, attr.data);\n    this.normalized = attr.normalized || false;\n    this.stride = attr.stride || 0;\n    this.offset = attr.offset || 0;\n    this.divisor = attr.divisor || 0;\n    this.instanced = attr.divisor > 0;\n    this.usage = attr.usage || renderer.gl.STATIC_DRAW;\n\n    if (attr.target) {\n      this.target = attr.target;\n    }\n\n    let count = attr.count;\n    if (attr.count === undefined || attr.count === null) {\n      count = attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size;\n    }\n    this.count = count as number;\n  }\n}\n", "import { omit, uid } from '../utils';\nimport Program from '../core/Program';\nimport Base from './Base';\nimport Renderer from './Renderer';\nimport BufferAttribute from './BufferAttribute';\nimport type { Attribute, DataType } from './BufferAttribute';\nimport Vector3 from '../math/Vector3';\nimport Vector4 from '../math/Vector4';\n\nconst tempVec3 = new Vector3();\n\ntype AttributesOmitKeys = 'id' | 'buffer';\n\nexport interface Attributes {\n  [key: string]: Attribute;\n}\n\n/**\n * 几何体对象，包含了顶点位置，面片索引、法向量、颜色值、UV 坐标和自定义缓存属性值等，这些数据最终会上传到`GPU`中。\n *\n * 示例代码：\n *\n * ```ts\n * const geometry = new ve.Geometry(renderer, {\n *     position: {\n *       size: 3,\n *       data: new Float32Array([\n *         -0.5, 0.5, 0,\n *         -0.5, -0.5, 0,\n *         0.5, 0.5, 0,\n *         0.5, -0.5, 0\n *       ])\n *     },\n *     uv: {\n *       size: 2,\n *       data: new Float32Array([0, 1, 1, 1, 0, 0, 1, 0])\n *     },\n *     index: {\n *       data: new Uint16Array([0, 1, 2, 1, 3, 2])\n *     },\n *   });\n * ```\n */\nexport default class Geometry extends Base {\n  #id: string;\n\n  #attributes: Map<string, BufferAttribute>;\n\n  #VAOs: Map<string, any>;\n\n  #bounds: any;\n\n  drawRange: any;\n\n  instancedCount: number;\n\n  isInstanced: boolean;\n\n  drawMode: number;\n\n  /**\n   * @param renderer 渲染器\n   * @param attributes 属性信息（顶点数据）\n   */\n  constructor(renderer: Renderer, attributes: Attributes = {}) {\n    super(renderer);\n    this.drawRange = {\n      start: 0,\n      count: 0,\n    };\n    this.instancedCount = 0;\n    this.isInstanced = false;\n    this.#attributes = new Map();\n    this.#VAOs = new Map();\n\n    this.#id = uid('geometry');\n    this.drawMode = this.gl.TRIANGLES;\n    renderer.bindVertexArray(null);\n    renderer.state.setActiveGeometry(null);\n    // eslint-disable-next-line guard-for-in\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      if (attribute instanceof BufferAttribute) {\n        if (name === 'index') {\n          this.setIndex(attribute);\n        } else {\n          this.addAttribute(name, attribute);\n        }\n      } else {\n        if (attribute.data) {\n          const n = new BufferAttribute(this.renderer, attribute);\n          if (name === 'index') {\n            this.setIndex(n);\n          } else {\n            this.addAttribute(name, n);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * 获取当前几何体数据的唯一标识\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * 获取全部的属性信息\n   */\n  get attributes() {\n    return this.#attributes;\n  }\n\n  /**\n   * 获取属性数据\n   */\n  get attributesData(): Attributes {\n    const attributes: Attributes = {};\n    const iterator = this.#attributes.entries();\n    for (let i = 0; i < this.#attributes.size; i++) {\n      const entry = iterator.next().value;\n      attributes[entry[0]] = omit<Attribute & { id: string }, AttributesOmitKeys>(entry[1], [\n        'id',\n        'buffer',\n      ]);\n    }\n\n    return attributes;\n  }\n\n  /**\n   * 获取顶点索引属性\n   */\n  get index() {\n    return this.attributes.get('index');\n  }\n\n  /**\n   * 获取当前几何体的包围盒\n   */\n  get bounds() {\n    return this.#bounds;\n  }\n\n  /**\n   * 手动设置包围盒，一般我们只需要内部计算\n   * @param bounds\n   */\n  set bounds(bounds) {\n    this.#bounds = bounds;\n  }\n\n  /**\n   * 添加对应的属性信息（顶点数据）\n   * @param name\n   * @param attribute\n   */\n  addAttribute(name: string, attribute: BufferAttribute) {\n    if (!attribute.target) {\n      attribute.target = name === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n    }\n    attribute.needsUpdate = false;\n    this.attributes.set(name, attribute);\n    if (!attribute.buffer) {\n      attribute.buffer = this.gl.createBuffer();\n      this.updateAttribute(attribute);\n    }\n    if (attribute.divisor) {\n      this.isInstanced = true;\n      if (this.instancedCount && this.instancedCount !== attribute.count * attribute.divisor) {\n        this.instancedCount = Math.min(this.instancedCount, attribute.count * attribute.divisor);\n        // eslint-disable-next-line max-len\n        return console.warn(\n          `Geometry has multiple instanced buffers of different length - instancedCount: ${this.instancedCount}, count: ${attribute.count}, divisor: ${attribute.divisor}, attribute: ${name}`,\n        );\n      }\n      this.instancedCount = attribute.count * attribute.divisor;\n    } else if (name === 'index') {\n      this.drawRange.count = attribute.count;\n    } else if (!this.index) {\n      this.drawRange.count = Math.max(this.drawRange.count, attribute.count);\n    }\n  }\n\n  /**\n   * 获取对应的属性信息（顶点数据）\n   * @param name\n   */\n  getAttribute(name) {\n    return this.attributes.get(name);\n  }\n\n  /**\n   * 设置对应的属性数据\n   * @param name\n   * @param data\n   */\n  setAttributeData(name, data) {\n    const attribute = this.getAttribute(name);\n    if (attribute) {\n      attribute.data = data;\n      attribute.needsUpdate = true;\n    }\n  }\n\n  /**\n   * 更新顶点属性数据\n   * @param attribute\n   */\n  updateAttribute(attribute) {\n    const createBuffer = !attribute.buffer;\n    if (createBuffer) {\n      attribute.buffer = this.gl.createBuffer();\n    }\n    if (this.rendererState.boundBuffer !== attribute.buffer) {\n      this.gl.bindBuffer(attribute.target, attribute.buffer);\n      this.rendererState.boundBuffer = attribute.buffer;\n    }\n\n    // if (createBuffer) {\n    //   this.gl.bufferData(attribute.target, attribute.data, attribute.usage);\n    // } else {\n    //   this.gl.bufferSubData(attribute.target, 0, attribute.data);\n    // }\n    this.gl.bufferData(attribute.target, attribute.data, attribute.usage);\n    attribute.needsUpdate = false;\n  }\n\n  /**\n   * 移除属性信息\n   * @param attribute\n   */\n  removeAttribute(attribute) {\n    this.attributes.delete(attribute);\n  }\n\n  /**\n   * 设置顶点索引数据\n   * @param index\n   */\n  setIndex(index) {\n    if (index instanceof BufferAttribute) {\n      index.size = 1;\n      this.addAttribute('index', index);\n    } else {\n      // eslint-disable-next-line max-len\n      const buffer = new BufferAttribute(this.renderer, {\n        data: index.length > 65535 ? new Uint32Array(index) : new Uint16Array(index),\n        size: 1,\n      });\n      this.addAttribute('index', buffer);\n    }\n    this.drawRange.count = this.index?.count;\n  }\n\n  /**\n   * 设置顶点数据\n   * @param data\n   */\n  setVertices(data) {\n    const array: number[] = [];\n    const len = data.length;\n    for (let i = 0; i < len; i++) {\n      const item: number[] = data[i];\n      array.push(item[0], item[1], item[2]);\n    }\n    this.addAttribute(\n      'position',\n      new BufferAttribute(this.renderer, {\n        data: new Float32Array(array),\n        size: 3,\n      }),\n    );\n  }\n\n  /**\n   * 设置顶点法向量数据\n   * @param data\n   */\n  setNormals(data) {\n    this.addAttribute(\n      'normal',\n      new BufferAttribute(this.renderer, {\n        data: new Float32Array(data),\n        size: 2,\n      }),\n    );\n  }\n\n  /**\n   * 设置纹理 UV 数据\n   * @param data\n   */\n  setUVs(data) {\n    this.addAttribute(\n      'uv',\n      new BufferAttribute(this.renderer, {\n        data: new Float32Array(data),\n        size: 2,\n      }),\n    );\n  }\n\n  /**\n   * 设置顶点颜色数据\n   * @param colors\n   */\n  setColors(colors: (Vector4 | Vector3 | number[] | Float32Array | Float64Array)[]) {\n    const data: number[] = [];\n    for (let i = 0; i < colors.length; i++) {\n      let color = colors[i];\n      if (color && (color instanceof Vector3 || color instanceof Vector4)) {\n        color = color.toArray();\n      }\n      data.push(color[0], color[1], color[2], color[3] || 1);\n    }\n    this.addAttribute(\n      'color',\n      new BufferAttribute(this.renderer, {\n        data: new Float32Array(data),\n        size: 4,\n      }),\n    );\n  }\n\n  /**\n   * 设置顶点渲染的开始索引和数量\n   * @param start 开始索引\n   * @param count 数量\n   */\n  setDrawRange(start: number, count: number) {\n    this.drawRange.start = start;\n    this.drawRange.count = count;\n  }\n\n  /**\n   * 设置实例化渲染的数量\n   * @param count 数量\n   */\n  setInstancedCount(count: number) {\n    this.instancedCount = count;\n  }\n\n  /**\n   * 创建 Vao\n   * @param program\n   */\n  createVAO(program: Program) {\n    const { attributeOrder } = program;\n    const vao = this.renderer.createVertexArray();\n    this.renderer.bindVertexArray(vao);\n    this.#VAOs.set(attributeOrder, vao);\n    this.bindAttributes(program);\n  }\n\n  /**\n   * 绑定顶点属性数据\n   * https://devdocs.io/dom/webgl2renderingcontext/vertexattribipointer\n   * @param program\n   */\n  bindAttributes(program: Program) {\n    program.attributeLocations.forEach((location, { name, type }) => {\n      const attributes = this.attributes.get(name);\n      if (!attributes) return;\n      this.gl.bindBuffer(attributes.target, attributes.buffer);\n      this.rendererState.boundBuffer = attributes.buffer;\n      let numLoc = 1;\n      if (type === this.gl.FLOAT_MAT2) numLoc = 2;\n      if (type === this.gl.FLOAT_MAT3) numLoc = 3;\n      if (type === this.gl.FLOAT_MAT4) numLoc = 4;\n\n      const size = attributes.size / numLoc;\n      const stride = numLoc === 1 ? 0 : numLoc * numLoc * numLoc;\n      const offset = numLoc === 1 ? 0 : numLoc * numLoc;\n\n      for (let i = 0; i < numLoc; i++) {\n        const attribIndex = location + i;\n        this.gl.vertexAttribPointer(\n          attribIndex,\n          size,\n          attributes.type,\n          attributes.normalized,\n          attributes.stride + stride,\n          attributes.offset + offset,\n        );\n        this.gl.enableVertexAttribArray(attribIndex);\n        this.renderer.vertexAttribDivisor(attribIndex, attributes.divisor);\n      }\n    });\n    const index = this.attributes.get('index');\n    if (index) {\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, index.buffer);\n    }\n  }\n\n  /**\n   * 计算当前几何体的的矩形边界（立方体包围盒）\n   * @param vertices 外部传入的顶点数据\n   */\n  computeBoundingBox(vertices?: DataType | number[]) {\n    const { data, offset = 0, stride, size } = this.attributes.get('position') as BufferAttribute;\n    if (!this.#bounds) {\n      this.#bounds = {\n        min: new Vector3(),\n        max: new Vector3(),\n        center: new Vector3(),\n        scale: new Vector3(),\n        radius: Number.POSITIVE_INFINITY,\n      };\n    }\n    this.#bounds.min.setScalar(+Number.POSITIVE_INFINITY);\n    this.#bounds.max.setScalar(Number.NEGATIVE_INFINITY);\n    const array = vertices || data;\n    const dl = stride || size;\n    for (let i = offset; i < array.length; i += dl) {\n      const x = array[i + 0];\n      const y = array[i + 1];\n      const z = array[i + 2];\n      this.#bounds.min.x = Math.min(x, this.#bounds.min.x);\n      this.#bounds.min.y = Math.min(y, this.#bounds.min.y);\n      this.#bounds.min.z = Math.min(z, this.#bounds.min.z);\n      this.#bounds.max.x = Math.max(x, this.#bounds.max.x);\n      this.#bounds.max.y = Math.max(y, this.#bounds.max.y);\n      this.#bounds.max.z = Math.max(z, this.#bounds.max.z);\n    }\n    this.#bounds.scale.subVectors(this.#bounds.max, this.#bounds.min);\n    this.#bounds.center.add(this.#bounds.min).add(this.#bounds.max).divideScalar(2);\n    return this.#bounds;\n  }\n\n  /**\n   * 计算当前几何体的的球形边界（球形包围盒）\n   * @param vertices 外部传入的顶点数据\n   */\n  computeBoundingSphere(vertices?: DataType | number[]) {\n    const { data, offset = 0, stride, size } = this.attributes.get('position') as BufferAttribute;\n    if (!this.#bounds) {\n      this.computeBoundingBox(vertices);\n    }\n    const array = vertices || data;\n    let len = 0;\n    const dl = stride || size;\n    const length = array.length;\n    for (let j = offset; j < length; j += dl) {\n      tempVec3.fromArray(array, j);\n      len = Math.max(len, this.#bounds.center.distanceToSquared(tempVec3));\n    }\n    this.#bounds.radius = Math.sqrt(len);\n  }\n\n  /**\n   * 执行绘制\n   * @param program Program 对象\n   * @param drawMode 绘制模式\n   */\n  draw(program, drawMode = this.drawMode) {\n    const { start, count } = this.drawRange;\n    const activeGeometryId = `${this.id}_${program.attributeOrder}`;\n    if (this.rendererState.activeGeometryId !== activeGeometryId) {\n      const vao = this.#VAOs.get(program.attributeOrder);\n      if (!vao) {\n        this.createVAO(program);\n      }\n      this.renderer.bindVertexArray(this.#VAOs.get(program.attributeOrder));\n      this.rendererState.activeGeometryId = activeGeometryId;\n    }\n\n    program.attributeLocations.forEach((location, { name }) => {\n      const attribute = this.getAttribute(name);\n      if (attribute && attribute.needsUpdate) {\n        this.updateAttribute(attribute);\n      }\n    });\n\n    if (this.isInstanced) {\n      if (this.index) {\n        const offset = this.index.offset + 2 * start;\n        this.renderer.drawElementsInstanced(\n          drawMode,\n          count,\n          this.index.type,\n          offset,\n          this.instancedCount,\n        );\n      } else {\n        this.renderer.drawArraysInstanced(drawMode, start, count, this.instancedCount);\n      }\n    } else if (this.index) {\n      const offset = this.index.offset + 2 * start;\n      this.gl.drawElements(drawMode, count, this.index.type, offset);\n    } else {\n      this.gl.drawArrays(drawMode, start, count);\n    }\n  }\n\n  /**\n   * 将传入的几何体对象的属性值拷贝到此对象\n   * @param source 源几何体对象\n   */\n  copy(source: Geometry) {\n    const attributes = source.attributesData;\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      if (attribute instanceof BufferAttribute) {\n        if (name === 'index') {\n          this.setIndex(attribute);\n        } else {\n          this.addAttribute(name, attribute);\n        }\n      } else {\n        if (attribute.data) {\n          const n = new BufferAttribute(this.renderer, attribute);\n          if (name === 'index') {\n            this.setIndex(n);\n          } else {\n            this.addAttribute(name, n);\n          }\n        }\n      }\n    }\n\n    if (source.bounds) {\n      this.bounds = {\n        min: new Vector3().copy(source.bounds.min),\n        max: new Vector3().copy(source.bounds.max),\n        center: new Vector3().copy(source.bounds.center),\n        scale: new Vector3().copy(source.bounds.scale),\n        radius: source.bounds.radius,\n      };\n    }\n\n    return this;\n  }\n\n  /**\n   * 克隆此几何体对象\n   */\n  clone() {\n    const geometry = new Geometry(this.renderer, {}).copy(this);\n    geometry.drawMode = this.drawMode;\n    return geometry;\n  }\n\n  /**\n   * 销毁几何体对象\n   */\n  destroy() {\n    this.#VAOs.forEach((t) => {\n      this.renderer.deleteVertexArray(t);\n    });\n    this.#VAOs.clear();\n    this.#attributes.forEach((t) => {\n      this.gl.deleteBuffer(t.buffer);\n    });\n    this.#attributes.clear();\n  }\n}\n", "import { getWireframeIndex, uid } from '../utils';\nimport Object3D from './Object3D';\nimport Vector2 from '../math/Vector2';\nimport Matrix3 from '../math/Matrix3';\nimport Matrix4 from '../math/Matrix4';\nimport Geometry from '../core/Geometry';\nimport Program from '../core/Program';\nimport Renderer from '../core/Renderer';\nimport RenderTarget from '../core/RenderTarget';\n\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport OrthographicCamera from '../cameras/OrthographicCamera';\nimport type { DataType } from '../core/BufferAttribute';\n\nexport interface MeshOptions {\n  /**\n   * `Mesh` 的`id`\n   */\n  id?: string;\n\n  /**\n   * 几何体`Geometry`对象\n   */\n  geometry: Geometry;\n\n  /**\n   * `Program` 对象\n   */\n  program: Program;\n\n  /**\n   * 渲染方式，默认值为`gl.TRIANGLES`。\n   * 其他可用值如下：\n   * - `gl.POINTS`: 绘制一系列点。\n   * - `gl.LINE_STRIP`: 绘制一个线条。即，绘制一系列线段，上一点连接下一点。\n   * - `gl.LINE_LOOP`: 绘制一个线圈。即，绘制一系列线段，上一点连接下一点，并且最后一点与第一个点相连。\n   * - `gl.LINES`: 绘制一系列单独线段。每两个点作为端点，线段之间不连接。\n   * - `gl.TRIANGLE_STRIP`：绘制一个三角带。\n   * - `gl.TRIANGLE_FAN`：绘制一个三角扇。\n   * - `gl.TRIANGLES`: 绘制一系列三角形。每三个点作为顶点。\n   */\n  mode?: GLenum;\n\n  /**\n   * 是否启用视锥体剔除\n   */\n  frustumCulled?: boolean;\n\n  /**\n   * 指定`Mesh` 的渲染顺序值\n   */\n  renderOrder?: number;\n\n  /**\n   * 设置是否是网格渲染，默认是 `false`。当此值为 `true` 时，会去构建 `wireframeIndex` 索引。\n   */\n  wireframe?: boolean;\n}\n\nexport interface MeshDrawOptions {\n  /**\n   * 渲染器\n   */\n  renderer: Renderer;\n\n  /**\n   * 相机\n   */\n  camera: PerspectiveCamera | OrthographicCamera;\n\n  /**\n   * 指定渲染目标 `RenderTarget`，常用于在多个 `RenderPass` 做流转，用来实现诸如后处理 `PostProcessing`。\n   */\n  target: RenderTarget;\n}\n\n/**\n * 网格渲染对象\n *\n * 代码示例：\n *\n * ```ts\n * const points = new Mesh(renderer, { mode: renderer.gl.POINTS, geometry, program });\n * points.setParent(scene);\n * points.position.set(-1, 1, 0);\n * ```\n */\nexport default class Mesh extends Object3D {\n  public gl: WebGLRenderingContext | WebGL2RenderingContext;\n\n  public modelViewMatrix: Matrix4;\n\n  public normalMatrix: Matrix3;\n\n  public renderOrder: number;\n\n  public zDepth: number;\n\n  public frustumCulled: boolean;\n\n  public mode: GLenum;\n\n  public renderer: Renderer;\n\n  #id: string;\n\n  #lastMode: GLenum;\n\n  #geometry: Geometry;\n\n  #program: Program;\n\n  #wireframe: boolean;\n\n  #wireframeGeometry: Geometry;\n\n  /**\n   * @param renderer 渲染器\n   * @param options MeshOptions\n   */\n  constructor(renderer, options: MeshOptions = {} as MeshOptions) {\n    super();\n    const opts = Object.assign({}, {\n      mode: renderer.gl.TRIANGLES,\n      frustumCulled: true,\n      renderOrder: 0,\n    }, options);\n    this.renderer = renderer;\n    this.gl = this.renderer.gl;\n    this.modelViewMatrix = new Matrix4();\n    this.normalMatrix = new Matrix3();\n    this.renderOrder = opts.renderOrder;\n    this.frustumCulled = opts.frustumCulled;\n    this.zDepth = 0;\n    this.#id = opts.id || uid('mesh');\n    this.#geometry = opts.geometry;\n    this.#program = opts.program;\n    this.#wireframe = Boolean(opts.wireframe);\n    this.mode = opts.mode;\n    this.#lastMode = opts.mode;\n\n    if (this.#wireframe) {\n      this.mode = this.gl.LINES;\n      this.updateWireframeGeometry(this.#wireframe);\n    }\n  }\n\n  /**\n   * 获取当前 `Mesh` 的 `id`\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * 获取当前 `Mesh` 的几何体信息\n   */\n  get geometry() {\n    return this.#wireframe ? this.#wireframeGeometry : this.#geometry;\n  }\n\n  /**\n   * 获取当前 `Mesh` 的 `program` 对象\n   */\n  get program() {\n    return this.#program;\n  }\n\n  /**\n   * 设置是否是网格渲染\n   * @param wireframe\n   */\n  set wireframe(wireframe: boolean) {\n    this.mode = wireframe ? this.gl.LINES : this.#lastMode;\n\n    this.#wireframe = wireframe;\n\n    this.updateWireframeGeometry(this.#wireframe);\n  }\n\n  /**\n   * 获取是否是网格渲染\n   */\n  get wireframe() {\n    return this.#wireframe;\n  }\n\n  /**\n   * 执行`Mesh` 的渲染，一般由`Renderer` 渲染器进行调度。\n   * @param options\n   */\n  draw(options: MeshDrawOptions = {} as MeshDrawOptions) {\n    const { camera, target } = options;\n    const uniforms = {};\n    if (camera) {\n      Object.assign(uniforms, {\n        projectionMatrix: camera.projectionMatrix,\n        cameraPosition: camera.worldPosition,\n        viewMatrix: camera.viewMatrix,\n      });\n      this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n      this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n    } else {\n      this.modelViewMatrix.copy(this.worldMatrix);\n    }\n\n    Object.assign(uniforms, {\n      resolution: new Vector2(\n        this.renderer.state?.viewport?.width || 1,\n        this.renderer.state?.viewport?.height || 1,\n      ),\n      modelMatrix: this.worldMatrix,\n      modelViewMatrix: this.modelViewMatrix,\n      normalMatrix: this.normalMatrix,\n    });\n    Object.keys(uniforms).forEach((key) => {\n      if (!Object.hasOwn(this.program.uniforms, key)) {\n        this.program.uniforms[key] = { value: null };\n      }\n      this.program.uniforms[key].value = uniforms[key];\n    });\n    if (target) target.bind();\n    this.program.use();\n    this.geometry.draw(this.program, this.mode);\n    if (target) target.unbind();\n  }\n\n  /**\n   * 更新网格几何体数据，主要是顶点索引数据\n   * @param wireframe 是否更新索引数据为网格数据\n   * @param force 是否强制更新\n   */\n  updateWireframeGeometry(wireframe, force = false) {\n    if (this.#geometry && (force || !this.#wireframeGeometry)) {\n      if (this.#wireframeGeometry) {\n        this.#wireframeGeometry.destroy();\n      }\n\n      const attributes = this.#geometry.attributes;\n\n      const positionArray = attributes.get('position')?.data as DataType;\n      const indexAttribute = this.#geometry.index?.data;\n      const numIndices = indexAttribute ? indexAttribute.length : Math.floor(positionArray.length / 3);\n      const index = [];\n\n      if (this.#geometry.index) {\n        if (indexAttribute) {\n          getWireframeIndex(positionArray, index, numIndices, indexAttribute as (Uint32Array | Uint16Array));\n        }\n      } else {\n        getWireframeIndex(positionArray, index, numIndices);\n      }\n\n      const indices = index.length > 65536 ? new Uint32Array(index) : new Uint16Array(index);\n\n      this.#wireframeGeometry = new Geometry(this.renderer, {\n        ...this.#geometry.attributesData,\n        index: {\n          data: indices,\n        },\n      });\n    }\n  }\n\n  /**\n   * 更新几何体信息，如果开启了 `wireframe` 还需要更新 `WireframeGeometry`\n   * @param geometry 几何体\n   * @param destroy 是否销毁上一个几何体\n   */\n  updateGeometry(geometry, destroy = true) {\n    if (destroy && this.#geometry) {\n      this.#geometry.destroy();\n    }\n    this.#geometry = geometry;\n    this.updateWireframeGeometry(this.#wireframe, true);\n  }\n\n  /**\n   * 更新 `Program` 对象\n   * @param program\n   * @param destroy 是否销毁上一个 program\n   */\n  updateProgram(program, destroy = true) {\n    if (destroy && this.#program) {\n      this.#program.destroy();\n    }\n    this.#program = program;\n  }\n\n  /**\n   * 销毁此 `Mesh`\n   */\n  destroy() {\n    this.program.destroy();\n    this.geometry.destroy();\n  }\n\n  /**\n   * 克隆 `Mesh` 对象\n   */\n  clone() {\n    return new Mesh(this.gl, {\n      geometry: this.geometry,\n      program: this.program,\n      frustumCulled: this.frustumCulled,\n      mode: this.mode,\n      renderOrder: this.renderOrder,\n    }).copy(this);\n  }\n\n  /**\n   * 将给定的 `Mesh` 对象复制到此对象\n   * @param mesh 源对象\n   * @param recursive 设置是否复制子对象\n   */\n  copy(mesh, recursive = true) {\n    super.copy(mesh, recursive);\n    this.modelViewMatrix.copy(mesh.modelViewMatrix);\n    this.normalMatrix.copy(mesh.normalMatrix);\n    this.mode = mesh.mode;\n    this.renderOrder = mesh.renderOrder;\n    this.zDepth = mesh.zDepth;\n    return this;\n  }\n}\n", "import Object3D from './Object3D';\n\n/**\n * 场景对象，一般我们会将创建的网格渲染对象添加到场景中进行渲染\n *\n * 代码示例：\n * ```ts\n * const scene = new Scene();\n *\n * const points = new Mesh(renderer, { mode: renderer.gl.POINTS, geometry, program });\n *\n * points.position.set(-1, 1, 0);\n *\n * scene.add(points);\n * ```\n */\nexport default class Scene extends Object3D {\n  /**\n   * 克隆场景对象\n   */\n  clone() {\n    return new Scene().copy(this, false);\n  }\n\n  /**\n   * 将传入的场景对象的各属性复制到此场景实例中\n   * @param source 源场景\n   * @param recursive 设置是否复制子对象\n   */\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.matrixAutoUpdate = source.matrixAutoUpdate;\n\n    return this;\n  }\n}\n", "import type { WithNull } from '../types';\nimport { isNull, isUndef } from '../utils';\nimport Color, { ColorLike } from '../math/Color';\nimport Base from './Base';\nimport Renderer from './Renderer';\n\nexport enum BlendType {\n  NoBlending = 0,\n  NormalBlending = 1,\n  AdditiveBlending = 2,\n  SubtractiveBlending = 3,\n  MultiplyBlending = 4,\n  CustomBlending = 5,\n}\n\ntype IBlendType = BlendType;\n\ntype FBOData = {\n  target?: GLenum;\n  buffer: WithNull<WebGLFramebuffer>;\n};\n\ninterface StateOptions {\n  textureUnits: (number | string)[];\n  activeTextureUnit: number;\n  activeGeometryId: string | number;\n  currentProgramId: string | number;\n\n  boundBuffer: WebGLBuffer | null;\n\n  colorMask: boolean;\n\n  blending: IBlendType;\n\n  premultiplyAlpha: boolean;\n\n  blendFunc: {\n    src: number;\n    dst: number;\n    srcAlpha?: number;\n    dstAlpha?: number;\n  };\n\n  blendEquation: {\n    modeRGB: number;\n    modeAlpha?: number;\n  };\n\n  stencil: {\n    mask: GLenum;\n    func: {\n      cmp: GLenum;\n      ref: GLenum;\n      mask: GLenum;\n    };\n    opFront: {\n      fail: GLenum;\n      zFail: GLenum;\n      zPass: GLenum;\n    };\n    opBack: {\n      fail: GLenum;\n      zFail: GLenum;\n      zPass: GLenum;\n    };\n  };\n\n  clearAlpha: number;\n\n  clearColor: ColorLike;\n\n  cullFace: GLenum;\n\n  frontFace: GLenum;\n\n  depthMask: boolean;\n\n  depthFunc: GLenum;\n\n  depthTest: boolean;\n\n  depthWrite: boolean;\n\n  unpackAlignment: number;\n\n  flipY: boolean;\n\n  anisotropy: number;\n\n  lineWidth: number;\n\n  polygonOffset: boolean;\n\n  polygonOffsetFactor: GLenum;\n\n  polygonOffsetUnits: GLenum;\n\n  framebuffer: WithNull<WebGLFramebuffer>;\n\n  viewport: { x: number; y: number; width: number; height: number };\n}\n\ninterface IState extends StateOptions {\n  framebuffer: WithNull<WebGLFramebuffer>;\n}\n\n/**\n * 渲染状态管理，目的是减少CPU与GPU的交互，一般我们不需要主动创建，它默认包含在 `Renderer` 实例中。\n */\nexport default class State extends Base {\n  #state: IState;\n\n  constructor(renderer: Renderer, options?: Partial<StateOptions>) {\n    super(renderer);\n    const { gl } = renderer;\n    this.#state = {\n      viewport: {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n      },\n    } as IState;\n    this.apply(\n      options ||\n        ({\n          frontFace: gl.CCW,\n          depthTest: false,\n          depthWrite: true,\n          depthMask: true,\n          depthFunc: gl.LESS,\n          blending: BlendType.NormalBlending,\n          blendFunc: {\n            src: gl.ONE,\n            dst: gl.ZERO,\n          },\n          blendEquation: {\n            modeRGB: gl.FUNC_ADD,\n          },\n          premultiplyAlpha: false,\n          unpackAlignment: 4,\n          flipY: false,\n          framebuffer: null,\n          textureUnits: [],\n          activeTextureUnit: -1,\n          activeGeometryId: -1,\n          currentProgramId: -1,\n          clearAlpha: 1,\n          clearColor: new Color(0),\n          stencil: {\n            func: {},\n            opFront: {},\n            opBack: {},\n          },\n        } as unknown as StateOptions),\n    );\n  }\n\n  /**\n   * 获取所有状态\n   */\n  get state() {\n    return this.#state;\n  }\n\n  /**\n   * 获取视图\n   */\n  get viewport() {\n    return this.#state.viewport;\n  }\n\n  /**\n   * 获取当前 `gl` 的纹理单位\n   */\n  get textureUnits() {\n    return this.#state.textureUnits;\n  }\n\n  /**\n   * 获取已激活的纹理\n   */\n  get activeTextureUnit() {\n    return this.#state.activeTextureUnit;\n  }\n\n  /**\n   * 设置当前激活的纹理\n   * @param activeTextureUnit\n   */\n  set activeTextureUnit(activeTextureUnit) {\n    this.#state.activeTextureUnit = activeTextureUnit;\n  }\n\n  /**\n   * 获取当前的 `Program` id\n   */\n  get currentProgramId() {\n    return this.#state.currentProgramId;\n  }\n\n  /**\n   * 设置当前的 `Program` id\n   * @param id\n   */\n  set currentProgramId(id: string | number) {\n    this.#state.currentProgramId = id;\n  }\n\n  /**\n   * 获取当前激活的几何体 id\n   */\n  get activeGeometryId() {\n    return this.#state.activeGeometryId;\n  }\n\n  /**\n   * 设置当前激活的几何体 id\n   * @param id\n   */\n  set activeGeometryId(id: string | number) {\n    this.#state.activeGeometryId = id;\n  }\n\n  /**\n   * 设置 `flipY`\n   * @param flipY\n   */\n  set flipY(flipY: boolean) {\n    this.#state.flipY = flipY;\n  }\n\n  /**\n   * 获取 `flipY` 配置\n   */\n  get flipY(): boolean {\n    return this.#state.flipY;\n  }\n\n  /**\n   * 设置 `unpackAlignment`\n   * @param unpackAlignment\n   */\n  set unpackAlignment(unpackAlignment: number) {\n    this.#state.unpackAlignment = unpackAlignment;\n  }\n\n  /**\n   * 获取 `unpackAlignment` 配置\n   */\n  get unpackAlignment(): number {\n    return this.#state.unpackAlignment;\n  }\n\n  /**\n   * 设置 `premultipliedAlpha`\n   * @param premultiplyAlpha\n   */\n  set premultiplyAlpha(premultiplyAlpha: boolean) {\n    this.#state.premultiplyAlpha = premultiplyAlpha;\n  }\n\n  /**\n   * 获取 `premultipliedAlpha` 配置\n   */\n  get premultiplyAlpha(): boolean {\n    return this.#state.premultiplyAlpha;\n  }\n\n  /**\n   * 设置最后一次绑定的顶点数据\n   * @param boundBuffer\n   */\n  set boundBuffer(boundBuffer) {\n    this.#state.boundBuffer = boundBuffer;\n  }\n\n  /**\n   * 获取最后一次绑定的顶点数据\n   */\n  get boundBuffer() {\n    return this.#state.boundBuffer;\n  }\n\n  /**\n   * 配置 `anisotropy`\n   * @param anisotropy\n   */\n  set anisotropy(anisotropy: number) {\n    this.#state.anisotropy = anisotropy;\n  }\n\n  /**\n   * 获取 `anisotropy` 配置\n   */\n  get anisotropy() {\n    return this.#state.anisotropy;\n  }\n\n  /**\n   * apply options 并且更新状态\n   * @param options\n   */\n  apply(options: Partial<StateOptions>) {\n    if (options.blending !== undefined && options.blending !== null) {\n      this.setBlending(options.blending, options);\n    } else {\n      if (options.blendFunc) {\n        const { src, dst, srcAlpha, dstAlpha } = options.blendFunc;\n        this.setBlendFunc(src, dst, srcAlpha, dstAlpha);\n        this.enable(this.gl.BLEND);\n      } else {\n        this.disable(this.gl.BLEND);\n      }\n      if (options.blendEquation) {\n        const { modeRGB, modeAlpha } = options.blendEquation;\n        this.setBlendEquation(modeRGB, modeAlpha);\n      }\n    }\n\n    if (!isUndef(options.cullFace) && !isNull(options.cullFace)) {\n      this.setCullFace(options.cullFace);\n    }\n    if (!isUndef(options.frontFace) && !isNull(options.frontFace)) {\n      this.setFrontFace(options.frontFace);\n    }\n\n    if (options.depthTest) {\n      this.enable(this.gl.DEPTH_TEST);\n    } else {\n      this.disable(this.gl.DEPTH_TEST);\n    }\n\n    if (!isUndef(options.depthMask) && !isNull(options.depthMask)) {\n      this.setDepthMask(options.depthMask);\n    }\n\n    if (!isUndef(options.depthWrite) && !isNull(options.depthWrite)) {\n      this.setDepthMask(options.depthWrite);\n    }\n\n    if (!isUndef(options.depthFunc) && !isNull(options.depthFunc)) {\n      this.setDepthFunc(options.depthFunc);\n    }\n\n    if (!isUndef(options.lineWidth) && !isNull(options.lineWidth)) {\n      this.setLineWidth(options.lineWidth);\n    }\n\n    this.#state = Object.assign(this.#state, options);\n  }\n\n  /**\n   * 开启诸如 `DEPTH_TEST`、`BLEND` 等功能\n   * @param id\n   */\n  enable(id) {\n    if (this.#state[id] !== true) {\n      this.gl.enable(id);\n      this.#state[id] = true;\n    }\n  }\n\n  /**\n   * 关闭诸如 `DEPTH_TEST`、`BLEND` 等功能\n   * @param id\n   */\n  disable(id) {\n    if (this.#state[id] !== false) {\n      this.gl.disable(id);\n      this.#state[id] = false;\n    }\n  }\n\n  /**\n   * 设置 Viewport\n   * @param width\n   * @param height\n   * @param x\n   * @param y\n   */\n  setViewport(width, height, x = 0, y = 0) {\n    if (this.#state.viewport.width === width && this.#state.viewport.height === height) return;\n    this.gl.viewport(x, y, width, height);\n    this.#state.viewport = {\n      width,\n      height,\n      x,\n      y,\n    };\n  }\n\n  /**\n   * 设置颜色缓冲的状态\n   * 模板缓冲可以实现渲染剔除，需要遮罩的话，可能希望只绘制模板缓冲而不绘制颜色缓冲\n   * gl.colorMask(false, false, false, false)：关闭颜色缓冲的所有通道\n   * gl.colorMask(true, true, true, true)：开启颜色缓冲的所有通道\n   * @param colorMask\n   */\n  setMask(colorMask: boolean) {\n    if (this.#state.colorMask !== colorMask) {\n      this.gl.colorMask(colorMask, colorMask, colorMask, colorMask);\n      this.#state.colorMask = colorMask;\n    }\n  }\n\n  /**\n   * 指定渲染时的颜色混合方式\n   * https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFunc\n   * @param blending\n   * @param options\n   */\n  setBlending(blending: IBlendType, options?: Partial<StateOptions>) {\n    this.#state.blending = blending;\n    if (blending === BlendType.NoBlending) {\n      this.disable(this.gl.BLEND);\n      return;\n    } else {\n      this.enable(this.gl.BLEND);\n    }\n    if (blending === BlendType.AdditiveBlending) {\n      if (this.#state.premultiplyAlpha) {\n        this.setBlendEquation(this.gl.FUNC_ADD, this.gl.FUNC_ADD);\n        this.setBlendFunc(this.gl.ONE, this.gl.ONE, this.gl.ONE, this.gl.ONE);\n      } else {\n        this.setBlendEquation(this.gl.FUNC_ADD);\n        this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE);\n      }\n    } else if (blending === BlendType.SubtractiveBlending) {\n      if (this.#state.premultiplyAlpha) {\n        this.setBlendEquation(this.gl.FUNC_ADD, this.gl.FUNC_ADD);\n        this.setBlendFunc(\n          this.gl.ZERO,\n          this.gl.ZERO,\n          this.gl.ONE_MINUS_SRC_COLOR,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n        );\n      } else {\n        this.setBlendEquation(this.gl.FUNC_ADD);\n        this.setBlendFunc(this.gl.ZERO, this.gl.ONE_MINUS_SRC_COLOR);\n      }\n    } else if (blending === BlendType.MultiplyBlending) {\n      if (this.#state.premultiplyAlpha) {\n        this.setBlendEquation(this.gl.FUNC_ADD, this.gl.FUNC_ADD);\n        this.setBlendFunc(this.gl.ZERO, this.gl.SRC_COLOR, this.gl.ZERO, this.gl.SRC_ALPHA);\n      } else {\n        this.setBlendEquation(this.gl.FUNC_ADD);\n        this.setBlendFunc(this.gl.ZERO, this.gl.SRC_COLOR);\n      }\n    } else if (blending === BlendType.NormalBlending) {\n      if (this.#state.premultiplyAlpha) {\n        this.setBlendEquation(this.gl.FUNC_ADD, this.gl.FUNC_ADD);\n        this.setBlendFunc(\n          this.gl.ONE,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n          this.gl.ONE,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n        );\n      } else {\n        this.setBlendEquation(this.gl.FUNC_ADD, this.gl.FUNC_ADD);\n        this.setBlendFunc(\n          this.gl.SRC_ALPHA,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n          this.gl.ONE,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n        );\n      }\n    } else if (blending === BlendType.CustomBlending) {\n      if (options?.blendFunc) {\n        const { src, dst, srcAlpha, dstAlpha } = options.blendFunc;\n        this.setBlendFunc(src, dst, srcAlpha, dstAlpha);\n        this.enable(this.gl.BLEND);\n      }\n      if (options?.blendEquation) {\n        const { modeRGB, modeAlpha } = options.blendEquation;\n        this.setBlendEquation(modeRGB, modeAlpha);\n      }\n    } else {\n      console.error('State: Invalid blending: ', blending);\n    }\n  }\n\n  /**\n   * 设置混合方式\n   * @param src\n   * @param dst\n   * @param srcAlpha\n   * @param dstAlpha\n   */\n  setBlendFunc(src: number, dst: number, srcAlpha?: number, dstAlpha?: number) {\n    if (\n      src !== this.#state.blendFunc?.src ||\n      dst !== this.#state.blendFunc?.dst ||\n      srcAlpha !== this.#state.blendFunc?.srcAlpha ||\n      dstAlpha !== this.#state.blendFunc?.dstAlpha\n    ) {\n      this.#state.blendFunc = {\n        src,\n        dst,\n        srcAlpha,\n        dstAlpha,\n      };\n      if (!isUndef(srcAlpha) && !isNull(srcAlpha) && !isUndef(dstAlpha) && !isNull(dstAlpha)) {\n        this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n      } else {\n        this.gl.blendFunc(src, dst);\n      }\n    }\n  }\n\n  /**\n   * 设置 blendEquation\n   * gl.FUNC_ADD：相加处理\n   * gl.FUNC_SUBTRACT：相减处理\n   * gl.FUNC_REVERSE_SUBSTRACT：反向相减处理，即 dest 减去 source\n   *\n   * @param modeRGB\n   * @param modeAlpha\n   */\n  setBlendEquation(modeRGB: number, modeAlpha?: number) {\n    if (\n      modeRGB !== this.#state.blendEquation?.modeRGB ||\n      modeAlpha !== this.#state.blendEquation?.modeAlpha\n    ) {\n      this.#state.blendEquation = {\n        modeRGB,\n        modeAlpha,\n      };\n\n      if (!isUndef(modeAlpha) && !isNull(modeAlpha)) {\n        this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n      } else {\n        this.gl.blendEquation(modeRGB);\n      }\n    }\n  }\n\n  /**\n   * 设置当前 State 下的清屏的透明度\n   * @param alpha\n   */\n  setClearAlpha(alpha: number) {\n    if (this.#state.clearAlpha !== alpha) {\n      this.#state.clearAlpha = alpha;\n    }\n  }\n\n  /**\n   * 设置清屏颜色和透明度值\n   * @param color 颜色\n   * @param alpha 透明度\n   */\n  setClearColor(color: ColorLike, alpha?: number) {\n    if (this.#state.clearAlpha !== alpha || this.#state.clearColor !== color) {\n      this.#state.clearColor = color;\n      if (!isUndef(alpha) && !isNull(alpha)) {\n        this.#state.clearAlpha = alpha;\n      } else {\n        this.#state.clearAlpha = color.a as number;\n      }\n      this.gl.clearColor(color.r, color.g, color.b, this.#state.clearAlpha);\n    }\n  }\n\n  /**\n   * 设置背面剔除方式\n   * @param cullFace\n   */\n  setCullFace(cullFace: GLenum) {\n    if (this.#state.cullFace !== cullFace) {\n      if (cullFace) {\n        this.gl.enable(this.gl.CULL_FACE);\n      } else {\n        this.gl.disable(this.gl.CULL_FACE);\n      }\n\n      this.#state.cullFace = cullFace;\n      this.gl.cullFace(cullFace);\n    }\n  }\n\n  /**\n   * 设置正面三角形顶点顺序\n   * 绘制立体图形时会使用三角形的顶点顺序来决定三角形的面是否朝向观察者，背向观察者的三角形一般不进行光栅化处理，绘制时会被剔除\n   * @param frontFace\n   */\n  setFrontFace(frontFace: GLenum) {\n    if (this.#state.frontFace !== frontFace) {\n      this.#state.frontFace = frontFace;\n      this.gl.frontFace(frontFace);\n    }\n  }\n\n  /**\n   * 设置深度缓冲区的写入操作方式（只读或者可写）\n   * @param mask\n   */\n  setDepthMask(mask: boolean) {\n    if (this.#state.depthMask !== mask) {\n      this.#state.depthMask = mask;\n      this.gl.depthMask(mask);\n    }\n  }\n\n  /**\n   * 指定将输入像素深度与当前深度缓冲区值进行比较的函数\n   * @param func\n   */\n  setDepthFunc(func: GLenum) {\n    if (this.#state.depthFunc !== func) {\n      this.#state.depthFunc = func;\n      this.gl.depthFunc(func);\n    }\n  }\n\n  /**\n   * 设置是否开启深度测试\n   * @param state\n   */\n  setDepthTest(state: boolean) {\n    if (this.#state.depthTest !== state) {\n      this.#state.depthTest = state;\n      if (state) {\n        this.enable(this.gl.DEPTH_TEST);\n      } else {\n        this.disable(this.gl.DEPTH_TEST);\n      }\n    }\n  }\n\n  /**\n   * 设置模板缓冲测试方式\n   * @param cmp 指定比较方式\n   * @param ref 用来做stencil测试的参考值\n   * @param mask 指定操作掩码，在测试的时候会先将ref与mask进行与运算\n   * @param face\n   */\n  setStencilFunc(cmp: GLenum, ref: GLenum, mask: GLenum, face?: GLenum) {\n    if (\n      this.#state?.stencil?.func?.cmp !== cmp ||\n      this.#state?.stencil?.func?.ref !== ref ||\n      this.#state?.stencil?.func?.mask !== mask\n    ) {\n      if (!this.#state?.stencil) {\n        this.#state.stencil = {} as StateOptions['stencil'];\n      }\n      if (!this.#state?.stencil?.func) {\n        this.#state.stencil.func = {} as StateOptions['stencil']['func'];\n      }\n      this.#state.stencil.func = {\n        ref,\n        mask,\n        cmp,\n      };\n      if (face) {\n        this.gl.stencilFuncSeparate(face, cmp, ref, mask);\n      } else {\n        this.gl.stencilFunc(cmp, ref, mask);\n      }\n    }\n  }\n\n  /**\n   * 设置模板测试的操作\n   * @param fail 指定模板测试失败时要使用的操作。默认值为 `gl.KEEP`\n   * @param zFail 指定模板测试通过但深度测试失败时要使用的操作。默认值为 `gl.KEEP`\n   * @param zPass 指定当模板测试和深度测试都通过时使用的操作，或者当模板测试通过但没有深度缓冲区或深度测试被禁用时使用的操作。默认值为 `gl.KEEP`\n   * @param face\n   */\n  setStencilOp(fail, zFail, zPass, face?: GLenum) {\n    const flag = false;\n\n    if (!this.#state?.stencil) {\n      this.#state.stencil = {} as StateOptions['stencil'];\n    }\n\n    if (!face || face === this.gl.FRONT_AND_BACK) {\n      return (\n        this.#state.stencil?.opFront?.fail !== fail ||\n        this.#state.stencil?.opFront?.zFail !== zFail ||\n        this.#state.stencil?.opFront?.zPass !== zPass ||\n        this.#state.stencil?.opBack?.fail !== fail ||\n        this.#state.stencil?.opBack?.zFail !== zFail ||\n        this.#state.stencil?.opBack?.zPass !== zPass\n      );\n    } else if (face === this.gl.FRONT) {\n      return (\n        this.#state.stencil?.opFront?.fail !== fail ||\n        this.#state.stencil?.opFront?.zFail !== zFail ||\n        this.#state.stencil?.opFront?.zPass !== zPass\n      );\n    } else if (face === this.gl.BACK) {\n      return (\n        this.#state.stencil?.opBack?.fail !== fail ||\n        this.#state.stencil?.opBack?.zFail !== zFail ||\n        this.#state.stencil?.opBack?.zPass !== zPass\n      );\n    }\n\n    if (flag) {\n      if (face) {\n        if (!this.#state.stencil?.opFront) {\n          this.#state.stencil.opFront = {} as StateOptions['stencil']['opFront'];\n        }\n        if (!this.#state.stencil?.opBack) {\n          this.#state.stencil.opBack = {} as StateOptions['stencil']['opBack'];\n        }\n        if (face === this.gl.FRONT_AND_BACK) {\n          this.#state.stencil.opFront.fail = fail;\n          this.#state.stencil.opFront.zFail = zFail;\n          this.#state.stencil.opFront.zPass = zPass;\n          this.#state.stencil.opBack.fail = fail;\n          this.#state.stencil.opBack.zFail = zFail;\n          this.#state.stencil.opBack.zPass = zPass;\n        } else if (face === this.gl.FRONT) {\n          this.#state.stencil.opFront.fail = fail;\n          this.#state.stencil.opFront.zFail = zFail;\n          this.#state.stencil.opFront.zPass = zPass;\n        } else if (face === this.gl.BACK) {\n          this.#state.stencil.opBack.fail = fail;\n          this.#state.stencil.opBack.zFail = zFail;\n          this.#state.stencil.opBack.zPass = zPass;\n        }\n\n        this.gl.stencilOpSeparate(face, fail, zFail, zPass);\n      } else {\n        this.#state.stencil.opFront.fail = fail;\n        this.#state.stencil.opFront.zFail = zFail;\n        this.#state.stencil.opFront.zPass = zPass;\n        this.#state.stencil.opBack.fail = fail;\n        this.#state.stencil.opBack.zFail = zFail;\n        this.#state.stencil.opBack.zPass = zPass;\n        this.gl.stencilOp(fail, zFail, zPass);\n      }\n    }\n  }\n\n  /**\n   * 设置模版测试的操作掩码\n   * @param mask\n   * @param face\n   */\n  setStencilMask(mask, face?: GLenum) {\n    if (this.#state.stencil?.mask !== mask) {\n      this.#state.stencil = {\n        ...this.#state.stencil,\n        mask,\n      };\n      if (face) {\n        this.gl.stencilMaskSeparate(face, mask);\n      } else {\n        this.gl.stencilMask(mask);\n      }\n    }\n  }\n\n  /**\n   * 设置当前激活的纹理单位\n   * @param unit\n   */\n  setActiveTexture(unit) {\n    if (this.#state.activeTextureUnit !== unit) {\n      this.#state.activeTextureUnit = unit;\n      this.gl.activeTexture(this.gl.TEXTURE0 + unit);\n    }\n  }\n\n  /**\n   * 设置 webgl 的线宽（注意大部分浏览器下是有 BUG 的）\n   * @param width\n   */\n  setLineWidth(width) {\n    if (this.#state.lineWidth !== width) {\n      this.#state.lineWidth = width;\n      this.gl.lineWidth(width);\n    }\n  }\n\n  /**\n   * 设置深度值的偏移量，主要可以用于解决当几何图形或物体的两个表面非常接近时会出现的深度冲突(Z fighting)。\n   * 原因是因为两个表面过于接近，深度缓冲区有限的精度无法区分哪个在前哪个在后。\n   *\n   * gl.polygonOffset(factor, units)方法指定加到每个顶点绘制后Z值上的偏移量，\n   * 偏移量按照公式 `m*factor+r*units` 计算，其中m表示顶点所在表面相对于观察者的视线的角度，\n   * 而r表示硬件能够区分两个Z值之差的最小值\n   * @param polygonOffset\n   * @param factor\n   * @param units\n   */\n  setPolygonOffset(polygonOffset, factor, units) {\n    if (polygonOffset) {\n      this.enable(this.gl.POLYGON_OFFSET_FILL);\n      if (this.#state.polygonOffsetFactor !== factor || this.#state.polygonOffsetUnits !== units) {\n        this.gl.polygonOffset(factor, units);\n\n        this.#state.polygonOffsetFactor = factor;\n        this.#state.polygonOffsetUnits = units;\n      }\n    } else {\n      this.disable(this.gl.POLYGON_OFFSET_FILL);\n    }\n  }\n\n  /**\n   * 绑定或者解绑 FBO\n   * @param v\n   */\n  bindFramebuffer(v: FBOData = {} as FBOData) {\n    const { target = this.gl.FRAMEBUFFER, buffer = null } = v;\n    if (this.#state.framebuffer !== buffer) {\n      this.#state.framebuffer = buffer;\n      this.gl.bindFramebuffer(target, buffer);\n    }\n  }\n\n  /**\n   * 设置当前激活的 Geometry\n   * @param id\n   */\n  setActiveGeometry(id) {\n    this.#state.activeGeometryId = id;\n  }\n\n  /**\n   * 重置 `State`\n   * @param force\n   */\n  reset(force = true) {\n    const keys = Object.keys(this.#state);\n    if (force) {\n      keys\n        .filter((key) => ['viewport', 'premultiplyAlpha'].indexOf(key) < 0)\n        .forEach((key) => {\n          delete this.#state[key];\n        });\n      this.bindFramebuffer({\n        buffer: null,\n      });\n      this.apply({\n        frontFace: this.gl.CCW,\n        depthTest: false,\n        depthWrite: true,\n        depthMask: true,\n        depthFunc: this.gl.LESS,\n        blending: BlendType.NormalBlending,\n        blendFunc: {\n          src: this.gl.ONE,\n          dst: this.gl.ZERO,\n        },\n        blendEquation: {\n          modeRGB: this.gl.FUNC_ADD,\n        },\n        premultiplyAlpha: false,\n        unpackAlignment: 4,\n        flipY: false,\n        framebuffer: null,\n        textureUnits: [],\n        activeTextureUnit: -1,\n        activeGeometryId: -1,\n        currentProgramId: -1,\n        clearAlpha: 1,\n        clearColor: new Color(0),\n        stencil: {\n          func: {},\n          opFront: {},\n          opBack: {},\n        },\n      } as unknown as StateOptions);\n    } else {\n      keys\n        .filter(\n          (key) =>\n            [\n              'flipY',\n              'framebuffer',\n              'textureUnits',\n              'activeTextureUnit',\n              'activeGeometryId',\n              'currentProgramId',\n            ].indexOf(key) > -1,\n        )\n        .forEach((key) => {\n          delete this.#state[key];\n        });\n\n      this.bindFramebuffer({\n        buffer: null,\n      });\n\n      this.#state.flipY = false;\n      this.#state.activeGeometryId = -1;\n      this.#state.activeTextureUnit = -1;\n      this.#state.currentProgramId = -1;\n      this.#state.textureUnits = [];\n      this.#state.boundBuffer = null;\n    }\n  }\n}\n", "import State from './State';\nimport RenderTarget from './RenderTarget';\nimport Scene from '../objects/Scene';\nimport { isWebGL, isWebGL2, getContext } from '../utils';\nimport type { WithNull, WithUndef } from '../types';\n\nconst innerExtensionKeys = [\n  'ANGLE_instanced_arrays', // 实例化绘制\n  'OES_vertex_array_object', // 顶点数组对象\n] as const;\n\ntype InnerExtensionKeys = typeof innerExtensionKeys[number];\n\n/**\n * 仅在 webgl 1 中使用的扩展，webgl2 直接支持\n */\nconst external1ExtensionKeys = [\n  'WEBGL_depth_texture', // 深度纹理\n  'OES_texture_half_float', // 半浮点型纹理\n  'OES_texture_float', // 浮点型纹理\n  'OES_standard_derivatives', // 标准导数\n  'OES_element_index_uint', // UNSIGNED_INT索引\n  'EXT_frag_depth', // 设置gl_FragDepth\n  'EXT_blend_minmax', // 混合公式MIN/MAX\n  'EXT_shader_texture_lod', // 直接纹理LOD获取\n  'WEBGL_draw_buffers', // 多种绘制缓冲\n  'WEBGL_color_buffer_float', // 32 位浮点数颜色缓冲区\n] as const;\n\n/**\n * 仅在 webgl 2 中支持的扩展\n */\nconst external2ExtensionKeys = [\n  'EXT_color_buffer_float', // 32 位浮点数颜色缓冲区\n] as const;\n\n/**\n * 在 webgl1 和 webgl2 都支持的扩展\n */\nconst external12ExtensionKeys = [\n  'WEBGL_lose_context', // 模拟丢失和恢复 gl 上下文\n  'OES_texture_half_float_linear', // 半浮点型纹理线性过滤\n  'OES_texture_float_linear', // 浮点型纹理线性过滤\n  'EXT_color_buffer_half_float', // 半（16 位）浮点数颜色缓冲区\n  'WEBGL_debug_renderer_info', // 图形驱动信息\n  'EXT_texture_filter_anisotropic', // 有效各向异性值\n] as const;\n\ntype External1ExtensionKeys = typeof external1ExtensionKeys[number];\ntype External2ExtensionKeys = typeof external2ExtensionKeys[number];\ntype External12ExtensionKeys = typeof external12ExtensionKeys[number];\n\ntype ExternalExtensionKeys =\n  | External1ExtensionKeys\n  | External2ExtensionKeys\n  | External12ExtensionKeys;\n\ntype ExtensionKeys = InnerExtensionKeys | ExternalExtensionKeys;\n\ntype Extensions =\n  | ANGLE_instanced_arrays\n  | OES_vertex_array_object\n  | WEBGL_depth_texture\n  | OES_texture_half_float\n  | OES_texture_float\n  | OES_texture_half_float_linear\n  | OES_texture_float_linear\n  | OES_standard_derivatives\n  | OES_element_index_uint\n  | EXT_frag_depth\n  | EXT_blend_minmax\n  | EXT_shader_texture_lod\n  | WEBGL_draw_buffers;\n\nexport interface RendererOptions {\n  /**\n   * 指定 `devicePixelRatio`\n   */\n  dpr: number;\n\n  /**\n   * 指定是否开启自动清除\n   */\n  autoClear: boolean;\n\n  /**\n   * 指定是否开启深度检测\n   */\n  depth: boolean;\n\n  /**\n   * 指定画布是否包含alpha缓冲区，仅在传入的是 `canvas` 对象时有用\n   */\n  alpha: boolean;\n\n  /**\n   * 指定是否开启抗锯齿，仅在传入的是 `canvas` 对象时有用\n   */\n  antialias: boolean;\n\n  /**\n   * 指定是否开启模板缓冲区\n   */\n  stencil: boolean;\n\n  /**\n   * 指定GPU的性能配置，仅在传入的是 `canvas` 对象时有用\n   */\n  powerPreference: WebGLPowerPreference;\n\n  /**\n   * 指定是否开启预乘alpha\n   */\n  premultipliedAlpha: boolean;\n\n  /**\n   * 是否开启绘制缓冲区，仅在传入的是 `canvas` 对象时有用\n   */\n  preserveDrawingBuffer: boolean;\n\n  /**\n   * 获取 `webgl2` 实例，仅在传入的是 `canvas` 对象时有用\n   */\n  requestWebGl2: boolean;\n  /**\n   * 是否开启视锥剔除，默认不开启\n   */\n  frustumCull: boolean;\n\n  /**\n   * WebGL 上下文支持的扩展列表。默认 []\n   */\n  extensions: ExternalExtensionKeys[];\n}\n\nexport interface RenderParams {\n  /**\n   * 场景对象\n   */\n  scene: Scene;\n\n  /**\n   * 相机对象\n   */\n  camera: any;\n\n  /**\n   * 指定渲染目标 `RenderTarget`，常用于在多个 `RenderPass` 做流转，用来实现诸如后处理 `PostProcessing`。\n   */\n  target?: RenderTarget;\n\n  /**\n   * 指定是否强制更新\n   */\n  update?: boolean;\n\n  /**\n   * 指定是否进行渲染对象的排序\n   */\n  sort?: boolean;\n\n  /**\n   * 是否开启进行视锥剔除（通过计算各渲染对象的包围盒，完全在视锥外的排除在`RendererList` 之外）。\n   */\n  frustumCull?: boolean;\n\n  /**\n   * 指定是否进行（颜色、深度、模版）缓冲区清除\n   */\n  clear?: boolean;\n}\n\n/**\n * 渲染器\n */\nexport default class Renderer {\n  readonly #gl: WebGLRenderingContext | WebGL2RenderingContext;\n\n  readonly #state: State;\n\n  readonly #extensions: {\n    [key in ExtensionKeys]: Extensions;\n  };\n\n  readonly #autoClear: boolean;\n\n  readonly #depth: WithUndef<boolean>;\n\n  readonly #alpha: WithUndef<boolean>;\n\n  readonly #stencil: WithUndef<boolean>;\n\n  readonly #antialias: WithUndef<boolean>;\n\n  readonly #premultipliedAlpha: WithUndef<boolean>;\n\n  readonly #preserveDrawingBuffer: WithUndef<boolean>;\n\n  readonly #color: boolean;\n\n  readonly #dpr: number;\n\n  readonly #frustumCull: boolean;\n\n  public vertexAttribDivisor:\n    | ANGLE_instanced_arrays['vertexAttribDivisorANGLE']\n    | WebGL2RenderingContext['vertexAttribDivisor'];\n  public drawArraysInstanced:\n    | ANGLE_instanced_arrays['drawArraysInstancedANGLE']\n    | WebGL2RenderingContext['drawArraysInstanced'];\n  public drawElementsInstanced:\n    | ANGLE_instanced_arrays['drawElementsInstancedANGLE']\n    | WebGL2RenderingContext['drawElementsInstanced'];\n  public createVertexArray:\n    | OES_vertex_array_object['createVertexArrayOES']\n    | WebGL2RenderingContext['createVertexArray'];\n  public bindVertexArray:\n    | OES_vertex_array_object['bindVertexArrayOES']\n    | WebGL2RenderingContext['bindVertexArray'];\n  public deleteVertexArray:\n    | OES_vertex_array_object['deleteVertexArrayOES']\n    | WebGL2RenderingContext['deleteVertexArray'];\n\n  public width: number;\n\n  public height: number;\n\n  constructor(\n    gl: WebGLRenderingContext | WebGL2RenderingContext | HTMLCanvasElement,\n    opts: Partial<RendererOptions> = {},\n  ) {\n    const options = Object.assign(\n      {},\n      {\n        autoClear: true,\n        depth: true,\n        alpha: false,\n        stencil: false,\n        antialias: false,\n        premultipliedAlpha: false,\n        preserveDrawingBuffer: false,\n        requestWebGl2: true,\n        extensions: [],\n      },\n      opts,\n    );\n\n    this.#autoClear = Boolean(options.autoClear);\n\n    this.#depth = options.depth;\n\n    this.#alpha = options.alpha;\n\n    this.#stencil = options.stencil;\n\n    this.#antialias = options.antialias;\n\n    this.#premultipliedAlpha = options.premultipliedAlpha;\n\n    this.#preserveDrawingBuffer = options.preserveDrawingBuffer;\n\n    this.#gl = (\n      isWebGL(gl) || isWebGL2(gl)\n        ? gl\n        : getContext(\n            gl as HTMLCanvasElement,\n            {\n              alpha: this.#alpha,\n              depth: this.#depth,\n              stencil: this.#stencil,\n              antialias: this.#antialias,\n              powerPreference: options.powerPreference,\n              premultipliedAlpha: this.#premultipliedAlpha,\n              preserveDrawingBuffer: this.#preserveDrawingBuffer,\n            },\n            options.requestWebGl2,\n          )\n    ) as WebGLRenderingContext | WebGL2RenderingContext;\n\n    const attrs = this.#gl?.getContextAttributes();\n\n    const viewport = this.#gl?.getParameter(this.#gl.VIEWPORT);\n    const flipY = this.#gl?.getParameter(this.#gl.UNPACK_FLIP_Y_WEBGL);\n\n    this.#state = new State(this);\n\n    if (attrs) {\n      this.#depth = Boolean(attrs.depth);\n      this.#antialias = Boolean(attrs.antialias);\n      this.#alpha = Boolean(attrs.alpha);\n      this.#stencil = Boolean(attrs.stencil);\n      this.#premultipliedAlpha = Boolean(attrs.premultipliedAlpha);\n      this.#preserveDrawingBuffer = Boolean(attrs.preserveDrawingBuffer);\n    }\n\n    this.#state.flipY = Boolean(flipY);\n    this.#state.setViewport(viewport[2], viewport[3], viewport[0], viewport[1]);\n    this.#state.premultiplyAlpha = this.#premultipliedAlpha;\n\n    this.#color = true;\n\n    this.#dpr = options.dpr || 1;\n\n    this.width = this.gl.canvas.width / this.#dpr;\n    this.height = this.gl.canvas.height / this.#dpr;\n\n    this.#frustumCull = !!options.frustumCull;\n\n    this.#extensions = {} as {\n      [key in ExtensionKeys]: Extensions;\n    };\n\n    this.vertexAttribDivisor = this.getExtension(\n      'ANGLE_instanced_arrays',\n      'vertexAttribDivisor',\n      'vertexAttribDivisorANGLE',\n    );\n    this.drawArraysInstanced = this.getExtension(\n      'ANGLE_instanced_arrays',\n      'drawArraysInstanced',\n      'drawArraysInstancedANGLE',\n    );\n    this.drawElementsInstanced = this.getExtension(\n      'ANGLE_instanced_arrays',\n      'drawElementsInstanced',\n      'drawElementsInstancedANGLE',\n    );\n    this.createVertexArray = this.getExtension(\n      'OES_vertex_array_object',\n      'createVertexArray',\n      'createVertexArrayOES',\n    );\n    this.bindVertexArray = this.getExtension(\n      'OES_vertex_array_object',\n      'bindVertexArray',\n      'bindVertexArrayOES',\n    );\n    this.deleteVertexArray = this.getExtension(\n      'OES_vertex_array_object',\n      'deleteVertexArray',\n      'deleteVertexArrayOES',\n    );\n\n    if (options.extensions) {\n      options.extensions\n        .filter(\n          (extension: ExternalExtensionKeys) =>\n            external1ExtensionKeys.findIndex((ext) => ext === extension) > -1,\n        )\n        .forEach((extension: ExternalExtensionKeys) => {\n          if (!this.#extensions[extension] && !this.isWebGL2) {\n            this.#extensions[extension] = this.gl.getExtension(extension);\n          }\n        });\n\n      options.extensions\n        .filter(\n          (extension: ExternalExtensionKeys) =>\n            external2ExtensionKeys.findIndex((ext) => ext === extension) > -1,\n        )\n        .forEach((extension: ExternalExtensionKeys) => {\n          if (!this.#extensions[extension] && this.isWebGL2) {\n            this.#extensions[extension] = this.gl.getExtension(extension);\n          }\n        });\n\n      options.extensions\n        .filter(\n          (extension: ExternalExtensionKeys) =>\n            external12ExtensionKeys.findIndex((ext) => ext === extension) > -1,\n        )\n        .forEach((extension: ExternalExtensionKeys) => {\n          if (!this.#extensions[extension]) {\n            this.#extensions[extension] = this.gl.getExtension(extension);\n          }\n        });\n    }\n  }\n\n  /**\n   * 获取 gl 实例\n   */\n  get gl() {\n    return this.#gl;\n  }\n\n  /**\n   * 获取 `Renderer` 的内部属性值\n   */\n  get attributes() {\n    return {\n      dpr: this.#dpr,\n      flipY: this.#state.flipY,\n      depth: this.#depth,\n      color: this.#color,\n      antialias: this.#antialias,\n      alpha: this.#alpha,\n      stencil: this.#stencil,\n      autoClear: this.#autoClear,\n      frustumCull: this.#frustumCull,\n      premultipliedAlpha: this.#premultipliedAlpha,\n      preserveDrawingBuffer: this.#preserveDrawingBuffer,\n    };\n  }\n\n  /**\n   * 获取 canvas 实例\n   */\n  get canvas() {\n    return this.#gl.canvas;\n  }\n\n  /**\n   * 判断是否是 `webgl1`\n   */\n  get isWebGL() {\n    return isWebGL(this.gl);\n  }\n\n  /**\n   * 判断是否是 `webgl2`\n   */\n  get isWebGL2() {\n    return isWebGL2(this.gl);\n  }\n\n  /**\n   * 获取已开启的扩展\n   */\n  get extensions() {\n    return this.#extensions;\n  }\n\n  /**\n   * 获取指定的扩展\n   * @param key\n   */\n  extension(key: ExtensionKeys) {\n    return this.#extensions[key];\n  }\n\n  /**\n   * 获取 canvas 画布大小\n   */\n  get size() {\n    return {\n      width: 'clientWidth' in this.canvas ? this.canvas.clientWidth : this.canvas.width,\n      height: 'clientHeight' in this.canvas ? this.canvas.clientHeight : this.canvas.height,\n    };\n  }\n\n  /**\n   * 获取 `renderState`\n   */\n  get state(): State {\n    return this.#state;\n  }\n\n  /**\n   * 获取 `premultipliedAlpha` 配置\n   */\n  get premultipliedAlpha() {\n    return this.#premultipliedAlpha;\n  }\n\n  /**\n   * 设置画布宽高\n   * @param width 宽\n   * @param height 高\n   */\n  setSize(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n\n    this.gl.canvas.width = width * this.#dpr;\n    this.gl.canvas.height = height * this.#dpr;\n  }\n\n  /**\n   * 设置 `webgl` 的 `viewport`\n   * @param width\n   * @param height\n   * @param x\n   * @param y\n   */\n  setViewport(width, height, x = 0, y = 0) {\n    this.#state.setViewport(width, height, x, y);\n  }\n\n  /**\n   * @private\n   * 获取扩展\n   * @param extension\n   * @param method\n   * @param extFunc\n   */\n  getExtension(extension, method, extFunc) {\n    const func = this.gl[method];\n    if (method && func) return func.bind(this.gl);\n    if (!this.#extensions[extension]) {\n      this.#extensions[extension] = this.gl.getExtension(extension);\n    }\n    const ef = this.#extensions[extension];\n    return method ? (ef ? ef[extFunc].bind(ef) : null) : ef;\n  }\n\n  /**\n   * 获取渲染列表（排序先不实现）\n   * @param scene\n   * @param camera\n   */\n  getRenderList({ scene, camera }) {\n    const renderList: any[] = [];\n\n    scene.traverse((node) => {\n      if (!node.visible) return true;\n      if (!node.draw) return;\n\n      if (this.#frustumCull && node.frustumCulled && camera) {\n        if (!camera.frustumIntersectsMesh(node)) return;\n      }\n\n      renderList.push(node);\n    });\n\n    return renderList;\n  }\n\n  /**\n   * 渲染函数，一般会在每一帧中调用此方法\n   * @param params\n   */\n  render(params: RenderParams) {\n    const { scene, camera, target = null, update = true, clear } = params;\n    if (target === null) {\n      // make sure no render target bound so draws to canvas\n      this.#state.bindFramebuffer({\n        buffer: null,\n      });\n      this.setViewport(this.width * this.#dpr, this.height * this.#dpr);\n    } else {\n      // bind supplied render target and update viewport\n      target.bind();\n      this.setViewport(target.width, target.height);\n    }\n\n    if (clear || (this.#autoClear && clear !== false)) {\n      // 确保深度缓冲区写入已启用，以便可以将其清除\n      if (this.#depth && (!target || target.depth)) {\n        this.#state.enable(this.gl.DEPTH_TEST);\n        this.#state.setDepthMask(true);\n      }\n\n      this.clear(this.#color, this.#depth, this.#stencil);\n    }\n\n    // 更新场景矩阵\n    if (update) scene.updateMatrixWorld();\n\n    // 单独更新相机矩阵\n    if (camera) camera.updateMatrixWorld();\n\n    const renderList = this.getRenderList({ scene, camera });\n\n    let i = 0;\n    const len = renderList.length;\n    for (; i < len; i++) {\n      const node = renderList[i];\n      node.draw({ camera });\n    }\n\n    if (target) {\n      target.unbind();\n    }\n  }\n\n  /**\n   * 清空画布\n   * @param color 颜色\n   * @param depth 深度\n   * @param stencil 模板\n   */\n  clear(color = this.#color, depth = this.#depth, stencil = this.#stencil) {\n    let bits = 0;\n\n    if (color) bits |= this.gl.COLOR_BUFFER_BIT;\n    if (depth) bits |= this.gl.DEPTH_BUFFER_BIT;\n    if (stencil) bits |= this.gl.STENCIL_BUFFER_BIT;\n\n    this.gl.clear(bits);\n  }\n\n  /**\n   * 重置内部 `WebGL` 状态。\n   * 需要注意的是一般单独使用时我们不需要去重置状态，但是在跨多个 `WebGL` 库共享单个 `WebGL` 上下文时我们需要关注此方法。默认情况下\n   * 我们会重置所有的状态，但是当我们确认多个共享库使用的状态完全相同时我们可以考虑仅重置部分状态以提高性能。但是有可能会出现无法预料的情况\n   * 请在你确认状态完全匹配时使用 `force = false` 重置部分状态。\n   * @param force 是否强制重置所用状态，默认是 `true`\n   * @param vao\n   */\n  resetState(\n    force = true,\n    vao: WithNull<WebGLVertexArrayObject | WebGLVertexArrayObjectOES> = null,\n  ) {\n    this.#state.reset(force);\n    this.bindVertexArray(vao);\n  }\n}\n", "import { uid } from '../utils';\nimport type { WithUndef } from '../types';\n\nimport Base from './Base';\nimport Renderer from './Renderer';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\nexport interface ResourceOptions {\n  id: string;\n  name: string;\n  handle: any;\n  userData: any;\n}\n\nexport default class Resource<T extends ResourceOptions> extends Base {\n  #handle: any;\n\n  #lastHandle: any;\n\n  id: string;\n\n  name: WithUndef<string>;\n\n  userData: any;\n\n  // Only meaningful for resources that allocate GPU memory\n  byteLength: number;\n\n  options: Partial<T>;\n\n  constructor(renderer: Renderer, options: Partial<T> = {}) {\n    super(renderer);\n    this.id = options?.id || uid(this.constructor.name);\n    this.name = options?.name;\n    this.userData = options?.userData;\n    this.#handle = options?.handle;\n\n    this.options = options;\n    if (this.#handle === undefined) {\n      this.#handle = this.createHandle();\n    }\n\n    this.byteLength = 0;\n  }\n\n  get handle() {\n    return this.#handle;\n  }\n\n  /**\n   * 交换为新的 `handle`（一般我们会用在虚拟 webgl 环境中）\n   * @param handle\n   */\n  swapHandle(handle) {\n    this.#lastHandle = this.#handle;\n    this.#handle = handle;\n  }\n\n  /**\n   * 恢复为原有 `handle`\n   */\n  restoreHandle() {\n    this.#handle = this.#lastHandle;\n  }\n\n  /**\n   * 销毁相关资源\n   */\n  destroy(): void {\n    this.delete();\n  }\n\n  delete({ deleteChildren = false } = {}) {\n    // Delete this object, and get refs to any children\n    // @ts-expect-error\n    const children = this.handle && this.deleteHandle(this.handle);\n    if (this.handle) {\n      this.removeStats();\n    }\n    this.#handle = null;\n\n    // Optionally, recursively delete the children\n    if (children && deleteChildren) {\n      children.filter(Boolean).forEach((child) => child.delete());\n    }\n\n    return this;\n  }\n\n  bind(funcOrHandle = this.handle) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  removeStats() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  toString(): string {\n    return `${this.constructor.name}(${this.id})`;\n  }\n}\n", "import Resource, { ResourceOptions } from './Resource';\nimport Renderer from './Renderer';\n\nexport interface RenderBufferOptions extends ResourceOptions {\n  /**\n   * 缓冲区宽度\n   */\n  width: number;\n\n  /**\n   * 缓冲区高度\n   */\n  height: number;\n\n  /**\n   * 指定渲染缓冲区的内部格式。更多文档请参考：[renderbufferStorage](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/renderbufferStorage)\n   */\n  format: GLenum;\n}\n\n/**\n * 渲染缓冲区对象。\n * 由于渲染缓冲区对象是只写的，因此它们通常用作深度和模板关联对象。\n *\n * 实例代码：\n * ```ts\n * const renderBuffer = new RenderBuffer(renderer, {\n *   format: renderer.gl.DEPTH_COMPONENT16,\n *   width: 1920,\n *   height: 1080,\n * });\n *\n * renderBuffer.bind();\n * renderBuffer.unbind();\n * ```\n */\nexport default class RenderBuffer extends Resource<RenderBufferOptions> {\n  /**\n   * 渲染缓冲区宽度\n   */\n  public width: number;\n\n  /**\n   * 渲染缓冲区高度\n   */\n  public height: number;\n\n  #internalFormat: GLenum;\n\n  constructor(renderer: Renderer, options: Partial<RenderBufferOptions> = {} as RenderBufferOptions) {\n    super(renderer, {\n      ...options,\n      format: options.format || renderer.gl.DEPTH_COMPONENT16,\n    });\n\n    this.#internalFormat = this.options.format as GLenum;\n\n    this.width = this.options.width as number;\n    this.height = this.options.height as number;\n\n    console.assert(\n      this.width > 0 && this.height > 0,\n      'Renderbuffer object requires valid width and height greater than zero',\n    );\n    this.bind();\n    renderer.gl.renderbufferStorage(\n      renderer.gl.RENDERBUFFER,\n      this.#internalFormat,\n      this.width,\n      this.height,\n    );\n  }\n\n  /**\n   * 设置此渲染对象的的大小\n   * @param width\n   * @param height\n   */\n  resize(width, height) {\n    if (width === this.width && height === this.height) return;\n    this.width = width;\n    this.height = height;\n    this.bind();\n    this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.#internalFormat, width, height);\n    this.unbind();\n  }\n\n  /**\n   * 绑定渲染缓冲\n   */\n  bind() {\n    this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.handle);\n  }\n\n  /**\n   * 解绑渲染缓冲\n   */\n  unbind() {\n    this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, null);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  removeStats() {}\n\n  /**\n   * 销毁此渲染对象\n   */\n  destroy() {\n    this.unbind();\n    this.deleteHandle();\n  }\n\n  /**\n   * 创建 `RBO`\n   */\n  createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  /**\n   * 移除 `RBO`\n   */\n  deleteHandle() {\n    this.handle && this.gl.deleteRenderbuffer(this.handle);\n  }\n}\n", "import Resource, { ResourceOptions } from './Resource';\nimport Renderer from './Renderer';\nimport { isNumber, isPowerOfTwo } from '../utils';\n\nexport interface TextureOptions extends ResourceOptions {\n  /**\n   * 默认为 `gl.TEXTURE_2D`\n   */\n  target: GLenum;\n\n  /**\n   * 纹理宽度，默认为 0\n   */\n  width: number;\n\n  /**\n   * 纹理高度，默认为 0\n   */\n  height: number;\n\n  /**\n   * 纹理放大时使用的过滤类型。\n   * 可能的值：`gl.NEAREST`，`gl.LINEAR`\n   */\n  magFilter: number;\n\n  /**\n   * 纹理缩小时使用的过滤类型。\n   * 可能的值：`gl.NEAREST`，`gl.LINEAR`\n   */\n  minFilter: number;\n\n  /**\n   * 水平采样纹理时使用的行为。\n   * 可能的值：`gl.REPEAT`，`gl.MIRRORED_REPEAT`，`gl.CLAMP_TO_EDGE`\n   */\n  wrapS: number;\n\n  /**\n   * 垂直采样纹理时使用的行为。\n   * 可能的值：`gl.REPEAT`，`gl.MIRRORED_REPEAT`，`gl.CLAMP_TO_EDGE`\n   */\n  wrapT: number;\n\n  /**\n   * 纹理数据的格式，在 WebGL 1 中，它必须与 internalformat 相同。\n   * 可能的值：`gl.RGBA`，`gl.RGB`，`gl.LUMINANCE`，`gl.LUMINANCE_ALPHA`\n   */\n  format: number;\n\n  /**\n   * 用于指定纹理图像的内部格式\n   * 可能的值：`gl.RGBA`，`gl.RGB`，`gl.ALPHA` 等等\n   */\n  internalFormat: number;\n\n  /**\n   * 指定纹理数据的数据类型。\n   * 可能的值：`gl.UNSIGNED_BYTE`，`gl.FLOAT`，`gl.UNSIGNED_SHORT`，`gl.UNSIGNED_INT` 等等\n   */\n  type: number;\n\n  /**\n   * 配置是否启用 `mipmap`，默认为`true`\n   * `generateMipmaps`会自动生成若干小尺寸的纹理，根据当前三维物体在屏幕上的大小来自动选择最合适的尺寸。\n   * 在 `webgl2` 使用`mipmap` 不再强制要求纹理的长度和宽度必须是2的整数次幂。\n   */\n  generateMipmaps: boolean;\n\n  /**\n   * 设置纹理上传时是否翻转 Y 轴，默认为 `false`\n   */\n  flipY: boolean;\n\n  /**\n   *  沿通过具有最高纹理像素密度的像素的坐标轴取样的数量。默认情况下，此值为 `1`。\n   *  较高的值会产生比基本mipmap更少的模糊结果，但需要使用更多纹理样本。通常我们在实现让物体缩小时\n   *  获取更高的清晰度，可以将此值设大，注意需要 `gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT)`\n   *  获取允许的最大值。（see: https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic）\n   */\n  anisotropy: number;\n\n  /**\n   * 指定内存中每个像素行起点的对齐要求。\n   * 可能的值: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n   */\n  unpackAlignment: number;\n\n  /**\n   * 设置纹理上传时是否预乘 `alpha` 值，默认为 `false`\n   */\n  premultiplyAlpha: boolean;\n\n  /**\n   * 指定mipmap的精细度，级别 0 是基础图像级别，级别 n 是第 n 个 mipmap 缩减级别。默认为 `0`。\n   */\n  level: number;\n\n  /**\n   * [GLintptr](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Types) 类型偏移到 [WebGLBuffer](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLBuffer) 的数据存储中。用于上传数据到当前范围 [WebGLTexture](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLTexture) 从WebGLBuffer 范围到PIXEL_UNPACK_BUFFER 目标\n   */\n  offset?: number;\n\n  /**\n   * 纹理数据\n   */\n  image: any;\n}\n\nexport interface TextureState {\n  version: number;\n  image: any;\n  wrapS: GLenum;\n  wrapT: GLenum;\n  minFilter: GLenum;\n  magFilter: GLenum;\n}\n\nexport const emptyPixel = new Uint8Array(4);\n\n/**\n * 纹理\n * 一般在 `webgl` 中会将纹理用于贴图，或者作为 `renderTarget`\n *\n * 代码示例：\n * ```ts\n * const texture = new ve.Texture(renderer, {\n *   generateMipmaps: true,\n *   flipY: true,\n * });\n *\n * const image = new Image();\n *\n * image.onload = () => {\n *   texture.setData(image, image.width, image.height);\n * };\n *\n * image.src = './assets/posx.jpg';\n * ```\n */\nexport default class Texture<T extends TextureOptions = TextureOptions> extends Resource<T> {\n  /**\n   * 设置纹理是否需要更新，一般我们会在纹理数据或者配置变更时将此配置项设置为 `true`\n   * 这样会在下一次渲染时应用对应的纹理数据和配置。\n   */\n  public needsUpdate = false;\n\n  /**\n   * 设置纹理单位\n   */\n  public textureUnit = 0;\n\n  /**\n   * 纹理数据\n   */\n  public image: any;\n\n  /**\n   * 纹理宽度\n   */\n  public width: number;\n\n  /**\n   * 纹理高度\n   */\n  public height: number;\n\n  /**\n   * `texImage2D` target\n   */\n  public target: GLenum;\n\n  #state: TextureState = {} as TextureState;\n\n  /**\n   * @param renderer Renderer 对象\n   * @param options 配置项\n   * @param needsUpdate 是否需要`update`\n   */\n  constructor(renderer: Renderer, options: Partial<T> = {}, needsUpdate = true) {\n    const { gl } = renderer;\n    const defaultOptions = {\n      target: gl.TEXTURE_2D,\n      type: gl.UNSIGNED_BYTE,\n      format: gl.RGBA,\n      internalFormat: options.format || gl.RGBA,\n      wrapS: gl.CLAMP_TO_EDGE,\n      wrapT: gl.CLAMP_TO_EDGE,\n      generateMipmaps: true,\n      minFilter: gl.LINEAR,\n      magFilter: gl.LINEAR,\n      premultiplyAlpha: false,\n      unpackAlignment: 4,\n      anisotropy: 0,\n      flipY: false,\n      level: 0,\n    };\n\n    const opt = Object.assign({}, defaultOptions, options);\n    super(renderer, opt);\n    this.textureUnit = 0;\n    this.image = this.options.image;\n    this.width = this.options.width as number;\n    this.height = this.options.height as number;\n    this.target = this.options.target as GLenum;\n    this.#state.version = -1;\n    this.needsUpdate = Boolean(needsUpdate);\n    if (this.needsUpdate) {\n      this.update();\n    }\n  }\n\n  /**\n   * 设置纹理数据\n   * @param image 纹理数据\n   * @param width 纹理宽度，默认为原始宽度\n   * @param height 纹理高度，默认为原始高度\n   */\n  setData(image, width = this.width, height = this.height) {\n    this.image = image;\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = true;\n  }\n\n  /**\n   * 设置纹理配置（默认进行合并）\n   * @param options 配置项\n   */\n  setOptions(options: Partial<T>) {\n    this.options = Object.assign(this.options, options);\n    this.width = this.options.width as number;\n    this.height = this.options.height as number;\n    this.needsUpdate = true;\n  }\n\n  /**\n   * 从 Url 设置纹理对象的数据，会默认标记为需要更新 `needsUpdate = true`\n   * @param url\n   */\n  fromSrc(url: string) {\n    return new Promise((resolve, reject) => {\n      const image = new Image();\n      image.onload = () => {\n        this.setData(image, image.width, image.height);\n        resolve(this);\n      };\n      image.onerror = (e) => {\n        reject(e);\n      };\n      image.crossOrigin = '*';\n      image.src = url;\n    });\n  }\n\n  /**\n   * 更新纹理数据或者纹理相关配置\n   * @param units 纹理单位，默认为 0\n   */\n  update(units = 0) {\n    const needUpdate = !(this.image === this.#state.image && !this.needsUpdate);\n    const checked =\n      needUpdate ||\n      this.rendererState.textureUnits[units] !== this.id ||\n      this.rendererState.activeTextureUnit !== units;\n    if (checked) {\n      this.rendererState.setActiveTexture(units);\n      this.bind(units);\n    }\n    if (!needUpdate) return;\n    this.needsUpdate = false;\n    if (this.options.wrapS !== this.#state.wrapS) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.options.wrapS as GLenum);\n      this.#state.wrapS = this.options.wrapS as GLenum;\n    }\n    if (this.options.wrapT !== this.#state.wrapT) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.options.wrapT as GLenum);\n      this.#state.wrapT = this.options.wrapT as GLenum;\n    }\n    if (this.options.minFilter !== this.#state.minFilter) {\n      this.gl.texParameteri(\n        this.target,\n        this.gl.TEXTURE_MIN_FILTER,\n        this.options.minFilter as GLenum,\n      );\n      this.#state.minFilter = this.options.minFilter as GLenum;\n    }\n    if (this.options.magFilter !== this.#state.magFilter) {\n      this.gl.texParameteri(\n        this.target,\n        this.gl.TEXTURE_MAG_FILTER,\n        this.options.magFilter as GLenum,\n      );\n      this.#state.magFilter = this.options.magFilter as GLenum;\n    }\n    if (this.options.flipY !== this.rendererState.flipY) {\n      this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.options.flipY as boolean);\n      this.rendererState.flipY = this.options.flipY as boolean;\n    }\n    if (this.options.premultiplyAlpha !== this.rendererState.premultiplyAlpha) {\n      this.gl.pixelStorei(\n        this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,\n        this.options.premultiplyAlpha as boolean,\n      );\n      this.rendererState.premultiplyAlpha = this.options.premultiplyAlpha as boolean;\n    }\n    if (this.options.unpackAlignment !== this.rendererState.unpackAlignment) {\n      this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.options.unpackAlignment as GLenum);\n      this.rendererState.unpackAlignment = this.options.unpackAlignment as number;\n    }\n\n    if (this.options.anisotropy && this.options.anisotropy !== this.rendererState.anisotropy) {\n      const extTextureFilterAnisotropic =\n        this.gl.getExtension('EXT_texture_filter_anisotropic') ||\n        this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic') ||\n        this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n      if (extTextureFilterAnisotropic) {\n        const max = this.gl.getParameter(\n          extTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT,\n        );\n        let v = this.options.anisotropy;\n        if (this.options.anisotropy > max) {\n          v = max;\n          console.warn(\n            `[Texture]: Texture.anisotropy option exceeded the maximum allowed value ${max} of the device`,\n          );\n        }\n        this.gl.texParameterf(\n          this.target,\n          extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,\n          v,\n        );\n      }\n      this.rendererState.anisotropy = this.options.anisotropy;\n    }\n\n    if (this.image) {\n      if (this.image.width) {\n        this.width = this.image.width;\n        this.height = this.image.height;\n      }\n\n      if (this.renderer.isWebGL2 && isNumber(this.options.offset)) {\n        this.gl.texImage2D(\n          this.target,\n          this.options.level as GLenum,\n          this.options.internalFormat as GLenum,\n          this.width,\n          this.height,\n          0,\n          this.options.format as GLenum,\n          this.options.type as GLenum,\n          this.image,\n          this.options.offset,\n        );\n      } else {\n        if (ArrayBuffer.isView(this.image)) {\n          this.gl.texImage2D(\n            this.target,\n            this.options.level as GLenum,\n            this.options.internalFormat as GLenum,\n            this.width,\n            this.height,\n            0,\n            this.options.format as GLenum,\n            this.options.type as GLenum,\n            this.image,\n          );\n        } else {\n          this.gl.texImage2D(\n            this.target,\n            this.options.level as GLenum,\n            this.options.internalFormat as GLenum,\n            this.options.format as GLenum,\n            this.options.type as GLenum,\n            this.image,\n          );\n        }\n      }\n\n      if (this.options.generateMipmaps) {\n        if (\n          this.renderer.isWebGL2 ||\n          (isPowerOfTwo(this.image.width) && isPowerOfTwo(this.image.height))\n        ) {\n          this.gl.generateMipmap(this.target);\n        } else {\n          this.options.generateMipmaps = false;\n          this.options.wrapS = this.gl.CLAMP_TO_EDGE;\n          this.options.wrapT = this.options.wrapS;\n          this.options.minFilter = this.gl.LINEAR;\n        }\n      }\n    } else {\n      if (this.renderer.isWebGL2 && isNumber(this.options.offset)) {\n        if (this.width > 0) {\n          (this.gl as WebGL2RenderingContext).texImage2D(\n            this.target,\n            this.options.level as GLenum,\n            this.options.internalFormat as GLenum,\n            this.width,\n            this.height,\n            0,\n            this.options.format as GLenum,\n            this.options.type as GLenum,\n            this.options.offset,\n          );\n        } else {\n          this.gl.texImage2D(\n            this.target,\n            0,\n            this.gl.RGBA,\n            1,\n            1,\n            0,\n            this.gl.RGBA,\n            this.gl.UNSIGNED_BYTE,\n            emptyPixel,\n            this.options.offset,\n          );\n        }\n      } else {\n        if (this.width > 0) {\n          this.gl.texImage2D(\n            this.target,\n            this.options.level as GLenum,\n            this.options.internalFormat as GLenum,\n            this.width,\n            this.height,\n            0,\n            this.options.format as GLenum,\n            this.options.type as GLenum,\n            null,\n          );\n        } else {\n          this.gl.texImage2D(\n            this.target,\n            0,\n            this.gl.RGBA,\n            1,\n            1,\n            0,\n            this.gl.RGBA,\n            this.gl.UNSIGNED_BYTE,\n            emptyPixel,\n          );\n        }\n      }\n    }\n    this.#state.image = this.image;\n    this.#state.version += 1;\n  }\n\n  /**\n   * 绑定纹理\n   * @param unit 纹理单位，默认为 `this.textureUnit`\n   */\n  bind(unit = this.textureUnit) {\n    if (this.rendererState.textureUnits[this.rendererState.activeTextureUnit] === this.id) return;\n    this.textureUnit = unit;\n    this.rendererState.textureUnits[this.textureUnit] = this.id;\n    this.gl.bindTexture(this.target, this.handle);\n  }\n\n  /**\n   * 解绑纹理\n   */\n  unbind() {\n    this.gl.activeTexture(this.gl.TEXTURE0 + this.textureUnit);\n    this.gl.bindTexture(this.target, null);\n    delete this.rendererState.textureUnits[this.textureUnit];\n  }\n\n  /**\n   * 销毁纹理\n   */\n  destroy() {\n    this.unbind();\n    super.destroy();\n  }\n\n  /**\n   * 移除相关状态\n   */\n  removeStats() {\n    this.#state = {\n      version: -1,\n    } as TextureState;\n  }\n\n  /**\n   * @private\n   * 创建纹理对象\n   */\n  createHandle() {\n    return this.gl.createTexture();\n  }\n\n  /**\n   * @private\n   */\n  deleteHandle() {\n    if (this.handle) {\n      this.gl.deleteTexture(this.handle);\n    }\n  }\n\n  /**\n   * 获取字符串数据\n   */\n  toString(): string {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n}\n", "import Texture from './Texture';\nimport type { TextureOptions } from './Texture';\n\nexport interface DataTextureOptions extends TextureOptions {\n  data: any;\n}\n\n/**\n * 数据纹理对象，常用于结构化数据的纹理对象。\n *\n * 代码实例：\n *\n * ```ts\n * const texture = new DataTexture(renderer, opt);\n * ```\n */\nexport default class DataTexture extends Texture<DataTextureOptions> {\n  /**\n   * 设置纹理是否需要更新，一般我们会在纹理数据或者配置变更时将此配置项设置为 `true`\n   * 这样会在下一次渲染时应用对应的纹理数据和配置。\n   */\n  public needsUpdate = true;\n\n  constructor(renderer, options: Partial<DataTextureOptions> = {}) {\n    super(renderer, {\n      ...options,\n      image: options.data,\n      premultiplyAlpha: true,\n      flipY: false,\n      unpackAlignment: 1,\n    });\n  }\n}\n", "import Resource, { ResourceOptions } from './Resource';\nimport Vector4 from '../math/Vector4';\nimport Texture, { TextureOptions } from './Texture';\nimport DataTexture from './DataTexture';\nimport RenderBuffer from './RenderBuffer';\nimport Renderer from './Renderer';\nimport { isNumber, omit } from '../utils';\n\nexport type Attachment = [GLenum, Texture | DataTexture | RenderBuffer];\n\nexport interface RenderTargetOptions extends ResourceOptions {\n  /**\n   * 非图片和 canvas 数据，传入的是一组结构化数组，这里我们先不去指定数据类型\n   */\n  data: any;\n\n  /**\n   * 设置此 `RenderTarget` 的名称，方便我们区分不同的 `RenderTarget`。\n   */\n  name: string;\n\n  /**\n   * `RenderTarget` 的宽度\n   */\n  width: number;\n\n  /**\n   * `RenderTarget` 的高度\n   */\n  height: number;\n\n  /**\n   * 颜色关联对象的数量，默认是`1`。\n   * 可以理解为整个帧缓存对象就是一张纹理，这个纹理的颜色就保存在`color attachment`中。\n   */\n  color: number;\n\n  /**\n   * 关联对象，此参数是一个数组，可以指定多组关联对象\n   */\n  attachments: Attachment[];\n\n  /**\n   * 是否包含深度关联对象\n   */\n  depth: boolean;\n\n  /**\n   * 是否包含模版关联对象\n   */\n  stencil: boolean;\n\n  /**\n   * 是否是深度纹理，默认是`false`。\n   */\n  depthTexture: boolean;\n}\n\n/**\n * `RenderTarget` 是一种用于将场景渲染到纹理的方法，主要用于做离屏渲染和后处理等效果。\n *\n * 示例代码：\n * ```ts\n * const options = {\n *   width: 256,\n *   height: 256,\n *   minFilter: renderer.gl.NEAREST,\n *   magFilter: renderer.gl.NEAREST\n * };\n * const current = new RenderTarget(renderer, options);\n *\n * current.resize(width, height);\n * current.bind();\n * renderer.setViewport(0, 0, width, height);\n * mesh.updateMatrixWorld();\n * mesh.draw();\n * current.unbind();\n * ```\n */\nexport default class RenderTarget extends Resource<RenderTargetOptions> {\n  #textures: Map<any, any>;\n\n  #renderBuffers: Map<any, any>;\n\n  public depth: boolean;\n\n  /**\n   * `RenderTarget` 宽度\n   */\n  public width: number;\n\n  /**\n   * `RenderTarget` 高度\n   */\n  public height: number;\n\n  /**\n   * `RenderTarget` 视图大小，默认是一个四维向量\n   */\n  public viewport: Vector4;\n\n  /**\n   * 绘制对象是否变化\n   */\n  public drawBuffersChanged: boolean;\n\n  /**\n   * 绘制缓存(绘制缓存设置了上一次绑定帧缓存状态，如果没有帧缓存可用的话，则用绘制缓存)\n   */\n  public drawBuffers: number[];\n\n  /**\n   * 清屏颜色配置；因为在我们在指定多个关联对象时，可能每个关联对象需要的清屏颜色不一致。\n   */\n  #clearColors: [number, number, number, number][];\n\n  /**\n   * 清除深度缓冲区，深度值默认是 `1`。\n   */\n  #clearDepth: number;\n\n  /**\n   * 清除模版缓冲区，默认值为`0`。\n   */\n  #clearStencil: number;\n\n  /**\n   * @param renderer `Renderer` 对象\n   * @param options 配置项，详见 #RenderTargetOptions\n   */\n  constructor(renderer: Renderer, options: Partial<RenderTargetOptions> = {}) {\n    super(renderer, {\n      color: 1,\n      depth: true,\n      depthTexture: false,\n      stencil: false,\n      ...options,\n    });\n\n    this.#renderBuffers = new Map();\n    this.#textures = new Map();\n    this.depth = Boolean(options.depth);\n    /**\n     * 在 `webgl1` 需要开启 `WEBGL_draw_buffers` 扩展\n     */\n    this.drawBuffers = [];\n    this.drawBuffersChanged = false;\n    this.width = this.options.width as number;\n    this.height = this.options.height as number;\n    this.viewport = new Vector4(0, 0, this.width, this.height);\n    this.name = this.options.name;\n    const attachments = this.options.attachments || [];\n\n    /**\n     * 此处注意如果配置中未传入指定的关联对象，那么在这里我们会内部进行创建\n     */\n    if (attachments.length === 0) {\n      for (let i = 0; i < this.options.color!; i++) {\n        const opt: any = {\n          wrapS: this.gl.CLAMP_TO_EDGE,\n          wrapT: this.gl.CLAMP_TO_EDGE,\n          minFilter: this.gl.LINEAR,\n          magFilter: this.gl.LINEAR,\n          type: this.gl.UNSIGNED_BYTE,\n          format: this.gl.RGBA,\n          flipY: false,\n          generateMipmaps: false,\n          ...options,\n        };\n        let texture;\n        if (opt.data) {\n          texture = new DataTexture(renderer, opt);\n        } else {\n          texture = new Texture(\n            renderer,\n            omit<TextureOptions & RenderTargetOptions, keyof RenderTargetOptions>(opt, [\n              'data',\n              'name',\n              'attachments',\n              'depthTexture',\n            ]),\n          );\n        }\n        attachments.push([this.gl.COLOR_ATTACHMENT0 + i, texture]);\n      }\n      if (\n        options.depthTexture &&\n        (renderer.isWebGL2 ||\n          // 此扩展仅适用于WebGL1上下文。在WebGL2 中，此扩展的功能默认在 WebGL2 上下文中可用。WebGL2 中的常量是 gl.UNSIGNED_INT_24_8\n          // @link https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture\n          (!renderer.isWebGL2 && renderer.gl.getExtension('WEBGL_depth_texture')))\n      ) {\n        const texture = new Texture(renderer, {\n          width: this.width,\n          height: this.height,\n          minFilter: this.gl.NEAREST,\n          magFilter: this.gl.NEAREST,\n          format: this.gl.DEPTH_COMPONENT,\n          internalFormat: renderer.isWebGL2 ? this.gl.DEPTH_COMPONENT16 : this.gl.DEPTH_COMPONENT,\n          type: this.gl.UNSIGNED_INT,\n        });\n        attachments.push([this.gl.DEPTH_ATTACHMENT, texture]);\n      } else {\n        const { depth, stencil } = options;\n        if (depth && !stencil) {\n          const renderBuffer = new RenderBuffer(renderer, {\n            format: this.gl.DEPTH_COMPONENT16,\n            width: this.width,\n            height: this.height,\n          });\n          attachments.push([this.gl.DEPTH_ATTACHMENT, renderBuffer]);\n        } else if (stencil && !depth) {\n          const renderBuffer = new RenderBuffer(renderer, {\n            format: this.gl.STENCIL_INDEX8,\n            width: this.width,\n            height: this.height,\n          });\n          attachments.push([this.gl.STENCIL_ATTACHMENT, renderBuffer]);\n        } else if (depth && stencil) {\n          const renderBuffer = new RenderBuffer(renderer, {\n            format: this.gl.DEPTH_STENCIL,\n            width: this.width,\n            height: this.height,\n          });\n          attachments.push([this.gl.DEPTH_STENCIL_ATTACHMENT, renderBuffer]);\n        }\n      }\n    }\n    this.create(attachments);\n  }\n\n  get texture() {\n    return this.#textures.values().next().value;\n  }\n\n  /**\n   * 设置清屏颜色值\n   * @param colors\n   */\n  set clearColors(colors) {\n    this.#clearColors = colors;\n  }\n\n  /**\n   * 获取清屏颜色值\n   */\n  get clearColors() {\n    return this.#clearColors;\n  }\n\n  /**\n   * 设置清除深度缓冲区的深度值\n   * @param depth 深度值\n   */\n  set clearDepth(depth) {\n    this.#clearDepth = depth;\n  }\n\n  /**\n   * 获取深度缓冲区的深度值\n   */\n  get clearDepth() {\n    return this.#clearDepth;\n  }\n\n  /**\n   * 设置清除模版缓冲区的默认值\n   * @param stencil 模版缓冲区默认值\n   */\n  set clearStencil(stencil) {\n    this.#clearStencil = stencil;\n  }\n\n  /**\n   * 获取缓冲区的默认值\n   */\n  get clearStencil() {\n    return this.#clearStencil;\n  }\n\n  /**\n   * 创建帧缓冲关联对象\n   * @param attachments\n   */\n  create(attachments: Attachment[]) {\n    this.#clearColors = [];\n    this.#clearDepth = 1;\n    this.#clearStencil = 0;\n    for (const attachment of attachments) {\n      const attach = attachment[0];\n      const target = attachment[1];\n      if (target instanceof RenderBuffer) {\n        this.#renderBuffers.set(attach, target);\n      } else if (target instanceof Texture) {\n        this.#textures.set(attach, target);\n        this.drawBuffers.push(attach);\n      }\n      const i = attach - this.gl.COLOR_ATTACHMENT0;\n      this.#clearColors[i] = [0, 0, 0, 0];\n    }\n\n    if (this.options.color! > 1) {\n      // @link https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers#browser_compatibility 兼容性不好\n      if (this.renderer.isWebGL2) {\n        (this.gl as WebGL2RenderingContext).drawBuffers(this.drawBuffers);\n      } else {\n        const ext = this.renderer.extension('WEBGL_draw_buffers') as WEBGL_draw_buffers;\n        if (ext && ext.drawBuffersWEBGL) {\n          ext.drawBuffersWEBGL(this.drawBuffers);\n        } else {\n          throw new Error(\n            'Please open the corresponding extension [WEBGL_draw_buffers](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers#browser_compatibility) and check whether the browser supports it',\n          );\n        }\n      }\n    }\n\n    this.drawBuffersChanged = true;\n    this.bind();\n\n    /**\n     * 将渲染缓冲区关联到帧缓冲区\n     */\n    this.#renderBuffers.forEach((rbo, attachment) => {\n      this.gl.framebufferRenderbuffer(\n        this.gl.FRAMEBUFFER,\n        attachment,\n        this.gl.RENDERBUFFER,\n        rbo.handle,\n      );\n    });\n\n    /**\n     * 将纹理缓冲区与帧缓冲区关联\n     */\n    this.#textures.forEach((texture, attachment) => {\n      this.gl.framebufferTexture2D(\n        this.gl.FRAMEBUFFER,\n        attachment,\n        this.gl.TEXTURE_2D,\n        texture.handle,\n        0,\n      );\n    });\n    this.unbind();\n    const status = this.gl.checkFramebufferStatus(this.gl.FRAMEBUFFER);\n    if (status !== this.gl.FRAMEBUFFER_COMPLETE) {\n      switch (status) {\n        case this.gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n          throw new Error(\n            'The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete',\n          );\n        case this.gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n          throw new Error('There is no attachment');\n        case this.gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n          throw new Error(' Height and width of the attachment are not the same.');\n        case this.gl.FRAMEBUFFER_UNSUPPORTED:\n          throw new Error(\n            'The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer',\n          );\n      }\n    }\n\n    return this.handle;\n  }\n\n  /**\n   * 清空此帧缓冲区\n   */\n  clear() {\n    this.bind();\n\n    let flags = 0;\n\n    if (this.clearColors[0]) {\n      const color = this.clearColors[0];\n      this.gl.clearColor(color[0], color[1], color[2], color[3]);\n      flags |= this.gl.COLOR_BUFFER_BIT;\n    }\n    if (isNumber(this.#clearDepth)) {\n      this.gl.clearDepth(this.#clearDepth);\n      flags |= this.gl.DEPTH_BUFFER_BIT;\n    }\n\n    if (isNumber(this.#clearStencil)) {\n      this.gl.clearStencil(this.#clearStencil);\n      flags |= this.gl.STENCIL_BUFFER_BIT;\n    }\n\n    this.gl.clear(flags);\n    this.unbind();\n  }\n\n  getTexture(key) {\n    return this.#textures.get(key);\n  }\n\n  /**\n   * 重新设置此帧缓冲区的大小\n   * @param width 宽度\n   * @param height 高度\n   */\n  resize(width: number, height: number) {\n    if (this.width !== width || this.height !== height) {\n      this.width = width;\n      this.height = height;\n      this.#textures.forEach((texture: Texture) => {\n        if (texture.width !== width || texture.height !== height) {\n          texture.width = width;\n          texture.height = height;\n          texture.needsUpdate = true;\n          texture.update();\n        }\n      });\n      this.#renderBuffers.forEach((rbo) => {\n        rbo.resize(width, height);\n      });\n      this.viewport.set(0, 0, width, height);\n    }\n  }\n\n  /**\n   * 绑定帧缓冲区\n   * @param fbo 如果未传入 `fbo`，默认是此 `RenderTarget` 创建的帧缓冲\n   */\n  bind(fbo = this.gl.FRAMEBUFFER) {\n    this.gl.bindFramebuffer(fbo, this.handle);\n  }\n\n  /**\n   * 解绑帧缓冲区\n   * @param fbo 如果未传入 `fbo`，默认是此 `RenderTarget` 创建的帧缓冲\n   */\n  unbind(fbo = this.gl.FRAMEBUFFER) {\n    this.gl.bindFramebuffer(fbo, null);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  removeStats() {}\n\n  /**\n   * 销毁此 `RenderTarget`\n   * - 销毁关联的纹理缓冲区\n   * - 销毁关联的渲染缓冲区\n   * - 销毁帧缓冲区\n   */\n  destroy() {\n    this.#textures.forEach((texture: Texture) => {\n      texture.destroy();\n    });\n    this.#renderBuffers.forEach((buffer) => {\n      buffer.destroy();\n    });\n    this.deleteHandle();\n  }\n\n  /**\n   * 创建帧缓冲区\n   */\n  createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  /**\n   * 移除帧缓冲区\n   */\n  deleteHandle() {\n    this.handle && this.gl.deleteFramebuffer(this.handle);\n  }\n\n  /**\n   * 将此实例转换为字符串标识\n   */\n  toString(): string {\n    return `RenderTarget(${this.id},${this.width}x${this.height})`;\n  }\n}\n", "import type { Attributes } from '../core/Geometry';\nimport Geometry from '../core/Geometry';\nimport Renderer from '../core/Renderer';\n\nexport interface PlaneOptions {\n  /**\n   * 平面几何体沿着`X`轴的宽度，默认值是`1`。\n   */\n  width: number;\n\n  /**\n   * 平面几何体沿着`Y`轴的宽度，默认值是`1`。\n   */\n  height: number;\n\n  /**\n   * 宽度分段数，默认值是`1`。\n   */\n  widthSegments: number;\n\n  /**\n   * 高度分段数，默认值是`1`。\n   */\n  heightSegments: number;\n\n  /**\n   * 顶点数据\n   */\n  attributes: Attributes;\n}\n\n/**\n * 获取平面几何体数据\n * @param position\n * @param normal\n * @param uv\n * @param index\n * @param width\n * @param height\n * @param depth\n * @param widthSegments\n * @param heightSegments\n * @param u\n * @param v\n * @param w\n * @param uDir\n * @param vDir\n * @param i\n * @param ii\n */\nexport function getPlaneBuffer(\n  position: Float32Array,\n  normal: Float32Array,\n  uv: Float32Array,\n  index: Uint32Array | Uint16Array,\n  width = 1,\n  height = 1,\n  depth = 0,\n  widthSegments = 1,\n  heightSegments = 1,\n  u = 0,\n  v = 1,\n  w = 2,\n  uDir = 1,\n  vDir = -1,\n  i = 0,\n  ii = 0,\n) {\n  const consti = i;\n  const widthHalf = width / 2;\n  const heightHalf = height / 2;\n  const depthHalf = depth / 2;\n\n  const gridX = Math.floor(widthSegments);\n  const gridY = Math.floor(heightSegments);\n\n  const gridX1 = gridX + 1;\n  const gridY1 = gridY + 1;\n\n  const segmentWidth = width / gridX;\n  const segmentHeight = height / gridY;\n\n  for (let iy = 0; iy < gridY1; iy++) {\n    const y = iy * segmentHeight - heightHalf;\n    for (let ix = 0; ix < gridX1; ix++) {\n      position[i * 3 + u] = (ix * segmentWidth - widthHalf) * uDir;\n      position[i * 3 + v] = y * vDir;\n      position[i * 3 + w] = depthHalf;\n\n      normal[i * 3 + u] = 0;\n      normal[i * 3 + v] = 0;\n      normal[i * 3 + w] = depth >= 0 ? 1 : -1;\n\n      uv[i * 2] = ix / gridX;\n      uv[i * 2 + 1] = 1 - iy / gridY;\n\n      // eslint-disable-next-line no-param-reassign\n      i++;\n      if (iy === gridY || ix === gridX) continue;\n\n      const a = consti + ix + gridX1 * iy;\n      const b = consti + ix + gridX1 * (iy + 1);\n      const c = consti + ix + 1 + gridX1 * (iy + 1);\n      const d = consti + ix + 1 + gridX1 * iy;\n\n      index[ii * 6] = a;\n      index[ii * 6 + 1] = b;\n      index[ii * 6 + 2] = d;\n      index[ii * 6 + 3] = b;\n      index[ii * 6 + 4] = c;\n      index[ii * 6 + 5] = d;\n\n      // eslint-disable-next-line no-param-reassign\n      ii++;\n    }\n  }\n}\n\n/**\n * 平面几何体\n *\n * 代码示例：\n * ```ts\n * const plane - new Plane(renderer);\n *\n * const plane = new Mesh(renderer, { geometry: planeGeometry, program });\n * scene.add(plane);\n * ```\n */\nexport default class Plane extends Geometry {\n  /**\n   * @param renderer 渲染器\n   * @param width 平面几何体沿着`X`轴的宽度，默认值是`1`。\n   * @param height 平面几何体沿着`Y`轴的宽度，默认值是`1`。\n   * @param widthSegments 宽度分段数，默认值是`1`。\n   * @param heightSegments 高度分段数，默认值是`1`。\n   * @param attributes 顶点数据\n   */\n  constructor(\n    renderer: Renderer,\n    {\n      width = 1,\n      height = 1,\n      widthSegments = 1,\n      heightSegments = 1,\n      attributes = {},\n    }: Partial<PlaneOptions> = {},\n  ) {\n    const gridX = Math.floor(widthSegments);\n    const gridY = Math.floor(heightSegments);\n\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n\n    const num = gridX1 * gridY1;\n    const numIndices = gridX * gridY * 6;\n\n    const position = new Float32Array(num * 3);\n    const normal = new Float32Array(num * 3);\n    const uv = new Float32Array(num * 2);\n    const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n    getPlaneBuffer(position, normal, uv, index, width, height, 0, widthSegments, heightSegments);\n\n    super(renderer, {\n      ...attributes,\n      position: {\n        size: 3,\n        data: position,\n      },\n      normal: {\n        size: 3,\n        data: normal,\n      },\n      uv: {\n        size: 2,\n        data: uv,\n      },\n      index: {\n        data: index,\n      },\n    });\n  }\n}\n", "import type { Attributes } from '../core/Geometry';\nimport Geometry from '../core/Geometry';\nimport Renderer from '../core/Renderer';\nimport { getPlaneBuffer } from './Plane';\n\nexport interface BoxOptions {\n  /**\n   * 几何体沿着`X`轴的宽度，默认值是`1`。\n   */\n  width: number;\n\n  /**\n   * 几何体沿着`Y`轴的宽度，默认值是`1`。\n   */\n  height: number;\n\n  /**\n   * 几何体沿着`Z`轴的深度，默认值是`1`。\n   */\n  depth: number;\n\n  /**\n   * 宽度分段数，默认值是`1`。\n   */\n  widthSegments: number;\n\n  /**\n   * 高度分段数，默认值是`1`。\n   */\n  heightSegments: number;\n\n  /**\n   * 深度分段数，默认值是`1`。\n   */\n  depthSegments: number;\n\n  /**\n   * 顶点数据\n   */\n  attributes: Attributes;\n}\n\n/**\n * 立方体，通常用来创建立方体或者不规则四边形。\n *\n * 代码示例：\n * ```ts\n * const boxGeometry - new Box(renderer);\n *\n * const box = new Mesh(renderer, { geometry: boxGeometry, program });\n * scene.add(box);\n * ```\n */\nexport default class Box extends Geometry {\n  /**\n   * @param renderer 渲染器\n   * @param width 几何体沿着`X`轴的宽度，默认值是`1`。\n   * @param height 几何体沿着`Y`轴的宽度，默认值是`1`。\n   * @param depth 几何体沿着`Z`轴的深度，默认值是`1`。\n   * @param widthSegments 宽度分段数，默认值是`1`。\n   * @param heightSegments 高度分段数，默认值是`1`。\n   * @param depthSegments 深度分段数，默认值是`1`。\n   * @param attributes 顶点数据\n   */\n  constructor(\n    renderer: Renderer,\n    {\n      width = 1,\n      height = 1,\n      depth = 1,\n      widthSegments = 1,\n      heightSegments = 1,\n      depthSegments = 1,\n      attributes = {},\n    }: Partial<BoxOptions> = {},\n  ) {\n    const gridX = Math.floor(widthSegments);\n    const gridY = Math.floor(heightSegments);\n    const gridZ = Math.floor(depthSegments);\n\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const gridZ1 = gridZ + 1;\n\n    const num = gridX1 * gridY1 * 2 + gridX1 * gridZ1 * 2 + gridY1 * gridZ1 * 2;\n    const numIndices = (gridX * gridY * 2 + gridX * gridZ * 2 + gridY * gridZ * 2) * 6;\n\n    const position = new Float32Array(num * 3);\n    const normal = new Float32Array(num * 3);\n    const uv = new Float32Array(num * 2);\n    const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n    let i = 0;\n    let ii = 0;\n    const d = gridZ1 * gridY1;\n    const w = gridX1 * gridZ1;\n    const h = gridX1 * gridY1;\n    const dt = gridZ * gridY;\n    const wt = gridX * gridZ;\n    const ht = gridX * gridY;\n    // left plane\n    getPlaneBuffer(\n      position,\n      normal,\n      uv,\n      index,\n      depth,\n      height,\n      width,\n      depthSegments,\n      heightSegments,\n      2,\n      1,\n      0,\n      -1,\n      -1,\n      i,\n      ii,\n    );\n\n    // right plane\n    i += d;\n    ii += dt;\n    getPlaneBuffer(\n      position,\n      normal,\n      uv,\n      index,\n      depth,\n      height,\n      -width,\n      depthSegments,\n      heightSegments,\n      2,\n      1,\n      0,\n      1,\n      -1,\n      i,\n      ii,\n    );\n\n    // top plane\n    i += d;\n    ii += dt;\n    getPlaneBuffer(\n      position,\n      normal,\n      uv,\n      index,\n      width,\n      depth,\n      height,\n      depthSegments,\n      widthSegments,\n      0,\n      2,\n      1,\n      1,\n      1,\n      i,\n      ii,\n    );\n\n    // bottom plane\n    i += w;\n    ii += wt;\n    getPlaneBuffer(\n      position,\n      normal,\n      uv,\n      index,\n      width,\n      depth,\n      -height,\n      depthSegments,\n      widthSegments,\n      0,\n      2,\n      1,\n      1,\n      -1,\n      i,\n      ii,\n    );\n\n    // front plane\n    i += w;\n    ii += wt;\n    getPlaneBuffer(\n      position,\n      normal,\n      uv,\n      index,\n      width,\n      height,\n      -depth,\n      widthSegments,\n      heightSegments,\n      0,\n      1,\n      2,\n      -1,\n      -1,\n      i,\n      ii,\n    );\n\n    // back plane\n    i += h;\n    ii += ht;\n    getPlaneBuffer(\n      position,\n      normal,\n      uv,\n      index,\n      width,\n      height,\n      depth,\n      widthSegments,\n      heightSegments,\n      0,\n      1,\n      2,\n      1,\n      -1,\n      i,\n      ii,\n    );\n\n    super(renderer, {\n      ...attributes,\n      position: {\n        size: 3,\n        data: position,\n      },\n      normal: {\n        size: 3,\n        data: normal,\n      },\n      uv: {\n        size: 2,\n        data: uv,\n      },\n      index: {\n        data: index,\n      },\n    });\n  }\n}\n", "import Resource, { ResourceOptions } from './Resource';\nimport Renderer from './Renderer';\nimport { getShaderName } from '../utils';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\nconst cachedIds = {};\nfunction genShaderName(key = 'id') {\n  cachedIds[key] = cachedIds[key] || 1;\n  const idx = cachedIds[key];\n  cachedIds[key] += 1;\n  return ''.concat(key, '-').concat(idx);\n}\n\ntype ShaderType = 'vertex-shader' | 'fragment-shader' | 'unknown';\n\nconst getTypeName = (ctx, shaderType: any): ShaderType => {\n  switch (shaderType) {\n    case ctx.VERTEX_SHADER:\n      return 'vertex-shader';\n    case ctx.FRAGMENT_SHADER:\n      return 'fragment-shader';\n    default:\n      return 'unknown';\n  }\n};\n\nconst getShaderType = (ctx, type) => {\n  switch (type) {\n    case 'fragment':\n      return ctx.FRAGMENT_SHADER;\n    case 'vertex':\n      return ctx.VERTEX_SHADER;\n    default:\n      return;\n  }\n};\n\nfunction addLineNumbers(string: string) {\n  const lines = string.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    lines[i] = i + 1 + ': ' + lines[i];\n  }\n  return lines.join('\\n');\n}\n\nexport class Shader extends Resource<ResourceOptions> {\n  #shaderType: ShaderType;\n\n  #includes: {\n    [key: string]: string;\n  };\n\n  public sourceCode: string;\n\n  constructor(renderer: Renderer, sourceCode, type, includes = {}) {\n    const shaderType = getShaderType(renderer.gl, type);\n    super(renderer, {\n      name: getShaderName(sourceCode) || genShaderName(getTypeName(renderer, shaderType)),\n    });\n    console.assert(typeof sourceCode === 'string', ERR_SOURCE);\n    this.#includes = includes;\n    this.#shaderType = shaderType;\n    this.sourceCode = this.injectShaderModule(sourceCode, includes || {}).replace(\n      /\\n\\n+/gm,\n      '\\n\\n',\n    );\n    this.createShader(this.sourceCode);\n  }\n\n  injectShaderModule(shader, modules = {}) {\n    const regExp = /^[\\t ]*#glsl_include +<([\\w.]+)>/gm;\n    const replacement = (substring, r) => {\n      let module = modules[r];\n      if (module === undefined) throw new Error('Cannot resolve #include <'.concat(r, '>'));\n      module = module.replace(/#include </g, '#glsl_include <');\n      return this.injectShaderModule(module, modules);\n    };\n    return shader.replace(regExp, replacement);\n  }\n\n  createShader(source = this.source) {\n    let s = source.replace(/#include </g, '#glsl_include <');\n    s = this.injectShaderModule(s, this.#includes || {}).replace(/\\n\\n+/gm, '\\n\\n');\n    this.gl.shaderSource(this.handle, s);\n    this.gl.compileShader(this.handle);\n    if (!this.gl.getShaderParameter(this.handle, this.gl.COMPILE_STATUS)) {\n      const log = this.gl.getShaderInfoLog(this.handle) || '';\n      this.gl.deleteShader(this.handle);\n      throw new Error(`${this.toString()}\\n${log}\\n${addLineNumbers(s)}`);\n    }\n  }\n\n  get source() {\n    return this.sourceCode;\n  }\n\n  get shaderType() {\n    return this.#shaderType;\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  setSource(source) {\n    const name = getShaderName(source);\n    if (name) {\n      this.name = genShaderName(name);\n    }\n    this.createShader(source);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  removeStats() {}\n\n  deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  toString(): string {\n    return `${getTypeName(this.gl, this.shaderType)}:${this.id}`;\n  }\n}\n\n/**\n * 顶点着色器\n */\nexport class VertexShader extends Shader {\n  constructor(renderer: Renderer, sourceCode: string, includes) {\n    super(renderer, sourceCode, 'vertex', includes);\n  }\n\n  createHandle() {\n    return this.gl.createShader(this.gl.VERTEX_SHADER);\n  }\n}\n\n/**\n * 片段着色器\n */\nexport class FragmentShader extends Shader {\n  constructor(renderer: Renderer, sourceCode: string, includes) {\n    super(renderer, sourceCode, 'fragment', includes);\n  }\n\n  createHandle() {\n    return this.gl.createShader(this.gl.FRAGMENT_SHADER);\n  }\n}\n", "import { isNull, isUndef, omit, parseShader, uid } from '../utils';\nimport type { WithNull } from '../types';\n\nimport Resource, { ResourceOptions } from './Resource';\nimport Texture from './Texture';\nimport Vector from '../math/Vector';\nimport Matrix from '../math/Matrix';\nimport { FragmentShader, VertexShader } from './Shader';\nimport Color from '../math/Color';\nimport { BlendType } from './State';\n\nconst getDefines = (t) => {\n  const defines = [];\n  return defines.map((d) => '#define '.concat(d));\n};\n\nconst arrayCacheF32 = {};\n\nfunction flatten(a) {\n  const arrayLen = a.length;\n  const valueLen = a[0].length;\n  if (valueLen === undefined) return a;\n  const length = arrayLen * valueLen;\n  let value = arrayCacheF32[length];\n  if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n  for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n  return value;\n}\n\nfunction setUniform(gl: WebGLRenderingContext, type: number, location: WebGLUniformLocation, value: any) {\n  value = value.length ? flatten(value) : value;\n  const isArray = value.length;\n\n  switch (type) {\n    case WebGLRenderingContext.FLOAT: // 5126\n      return isArray ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n    case WebGLRenderingContext.FLOAT_VEC2: // 35664\n      return gl.uniform2fv(location, value); // FLOAT_VEC2\n    case WebGLRenderingContext.FLOAT_VEC3: // 35665\n      return gl.uniform3fv(location, value); // FLOAT_VEC3\n    case WebGLRenderingContext.FLOAT_VEC4:\n      return gl.uniform4fv(location, value); // FLOAT_VEC4\n    case WebGLRenderingContext.BOOL: // BOOL\n    case WebGLRenderingContext.INT: // INT\n    case WebGLRenderingContext.SAMPLER_2D: // SAMPLER_2D\n    case WebGLRenderingContext.SAMPLER_CUBE: // SAMPLER_CUBE\n      return isArray ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n    case WebGLRenderingContext.BOOL_VEC2: // BOOL_VEC2\n    case WebGLRenderingContext.INT_VEC2: // INT_VEC2\n      return gl.uniform2iv(location, value); // INT_VEC2\n    case WebGLRenderingContext.BOOL_VEC3: // BOOL_VEC3\n    case WebGLRenderingContext.INT_VEC3: // INT_VEC3\n      return gl.uniform3iv(location, value); // INT_VEC3\n    case WebGLRenderingContext.BOOL_VEC4: // BOOL_VEC4\n    case WebGLRenderingContext.INT_VEC4: // INT_VEC4\n      return gl.uniform4iv(location, value); // INT_VEC4\n    case WebGLRenderingContext.FLOAT_MAT2: // FLOAT_MAT2\n      return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n    case WebGLRenderingContext.FLOAT_MAT3: // FLOAT_MAT3\n      return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n    case WebGLRenderingContext.FLOAT_MAT4: // FLOAT_MAT4\n      return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n  }\n}\n\nexport type Uniforms = any;\n\nexport interface UniformData {\n  location: WithNull<WebGLUniformLocation>;\n  type: GLenum;\n  name: string;\n  value?: any;\n  isStruct: boolean;\n  isStructArray?: boolean;\n  structIndex?: number;\n  structProperty?: string;\n}\n\nexport interface ProgramRenderState {\n  /**\n   * 指定正面或背面多边形是否可以剔除\n   * 可能的值：`gl.FRONT`、`gl.FRONT_AND_BACK` 和 `gl.BACK`\n   */\n  cullFace: GLenum;\n\n  /**\n   * 指定图形顶点以顺时针是正面还是逆时针方向是正面：\n   * 可能的值：`gl.CW` 和 `gl.CCW`\n   */\n  frontFace: GLenum;\n\n  /**\n   * 是否启用深度测试，默认启用\n   */\n  depthTest: boolean;\n\n  /**\n   * 是否开启深度值写入\n   */\n  depthWrite: boolean;\n\n  /**\n   * 指定深度检测的参数，即什么情况算失败、什么情况算作通过，默认是 `gl.LESS`。\n   * 可能的值：\n   * - gl.NEVER （总不通过）\n   * - gl.LESS（如果新值小于缓冲区中的值则通过）\n   * - gl.EQUAL（如果新值等于缓冲区中的值则通过）\n   * - gl.LEQUAL（如果新值小于等于缓冲区中的值则通过）\n   * - gl.GREATER（如果新值大于缓冲区中的值则通过）\n   * - gl.NOTEQUAL（如果新值不等于缓冲区中的值则通过）\n   * - gl.GEQUAL（如果新值大于等于缓冲区中的值则通过）\n   * - gl.ALWAYS（总通过）\n   */\n  depthFunc: GLenum;\n\n  /**\n   * blend 类型\n   */\n  blending: BlendType;\n\n  /**\n   * 指定颜色混合算法\n   * 可能的值可以参考：https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/blendFunc 和 https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFuncSeparate\n   */\n  blendFunc: {\n    src: number;\n    dst: number;\n    srcAlpha?: number;\n    dstAlpha?: number;\n  };\n\n  /**\n   * 指定颜色混合方程式\n   * 可能的值可以参考：https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquation 和 https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquationSeparate\n   */\n  blendEquation: {\n    modeRGB: number;\n    modeAlpha?: number;\n  };\n}\n\nexport interface ProgramOptions extends ProgramRenderState, ResourceOptions {\n  /**\n   * 指定 `id`\n   */\n  id: string;\n\n  /**\n   * 顶点着色器\n   */\n  vertexShader: string | VertexShader;\n\n  /**\n   * 片段着色器\n   */\n  fragmentShader: string | FragmentShader;\n\n  /**\n   * uniform\n   */\n  uniforms?: Uniforms;\n\n  /**\n   * 配置是否是透明渲染\n   */\n  transparent?: boolean;\n\n  /**\n   * 指定着色的宏定义\n   */\n  defines?: string[];\n\n  /**\n   * 着色器模块，会在着色器中遇到 `#include <xxx>` 会自动替换此配置项对应的着色器片段。\n   */\n  includes?: {\n    [key: string]: string;\n  };\n}\n\n/**\n * 着色器程序对象封装，主要功能如下：\n * - 创建Program管线，编译顶点着色器和片段着色器源码；\n * - 管理`Attribute`属性\n * - 管理`Uniform`属性\n * - 渲染状态的切换\n *\n * 示例代码：\n * ```jsx live\n * function render(props) {\n *   const drawModelVertex = `\n *     attribute vec2 uv;\n *     attribute vec3 position;\n *     uniform mat4 modelViewMatrix;\n *     uniform mat4 projectionMatrix;\n *\n *     varying vec2 vUv;\n *\n *     void main() {\n *         vUv = uv;\n *\n *         gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n *\n *         // gl_PointSize only applicable for gl.POINTS draw mode\n *         gl_PointSize = 5.0;\n *     }\n *     `;\n *\n *   const drawModelFragment = `\n *     precision highp float;\n *\n *     uniform float uTime;\n *     varying vec2 vUv;\n *\n *     void main() {\n *         gl_FragColor.rgb = 0.5 + 0.3 * sin(vUv.yxx + uTime) + vec3(0.2, 0.0, 0.1);\n *         gl_FragColor.a = 1.0;\n *     }\n *     `;\n *\n *   const refDom = useRef(null);\n *\n *\n *\n *   const init = () => {\n *     const canvas = refDom.current;\n *\n *     canvas.width = canvas.clientWidth;\n *     canvas.height = canvas.clientHeight;\n *     const renderer = new Renderer(canvas, {\n *       alpha: true,\n *     });\n *\n *     const fov = 15;\n *     const nearZ = 0.1;\n *\n *     const farZ = 100;\n *     const camera = new PerspectiveCamera(fov, canvas.width / canvas.height, nearZ, farZ);\n *     camera.position.z = 15;\n *\n *     function resize(target) {\n *       const { width, height } = target.getBoundingClientRect();\n *       renderer.setSize(width, height);\n *       camera.aspect = width / height;\n *     }\n *\n *     const scene = new Scene();\n *\n *     const geometry = new Geometry(renderer, {\n *       position: {\n *         size: 3,\n *         data: new Float32Array([\n *           -0.5, 0.5, 0,\n *           -0.5, -0.5, 0,\n *           0.5, 0.5, 0,\n *           0.5, -0.5, 0\n *         ])\n *       },\n *       uv: {\n *         size: 2,\n *         data: new Float32Array([0, 1, 1, 1, 0, 0, 1, 0])\n *       },\n *       index: {\n *         data: new Uint16Array([0, 1, 2, 1, 3, 2])\n *       },\n *     });\n *\n *     const program = new Program(renderer, {\n *       vertexShader: drawModelVertex,\n *       fragmentShader: drawModelFragment,\n *       uniforms: {\n *         uTime: { value: 0 },\n *       },\n *     });\n *\n *     const points = new Mesh(renderer, { mode: renderer.gl.POINTS, geometry, program });\n *     points.setParent(scene);\n *     points.position.set(-1, 1, 0);\n *\n *     const lineStrip = new Mesh(renderer, { mode: renderer.gl.LINES, geometry, program });\n *     lineStrip.setParent(scene);\n *     lineStrip.position.set(1, 1, 0);\n *\n *     const lineLoop = new Mesh(renderer, { mode: renderer.gl.LINE_LOOP, geometry, program });\n *     lineLoop.setParent(scene);\n *     lineLoop.position.set(-1, -1, 0);\n *\n *     const triangles = new Mesh(renderer, { mode: renderer.gl.TRIANGLES, geometry, program });\n *     triangles.setParent(scene);\n *     triangles.position.set(1, -1, 0);\n *\n *     const raf = new Raf((t) => {\n *       program.setUniform('uTime', t);\n *       renderer.render({ scene, camera });\n *     });\n *\n *     return {\n *       canvas,\n *       resize,\n *     }\n *   }\n *\n *   useEffect(() => {\n *     const { canvas, resize } = init();\n *\n *     observe(canvas, resize);\n *\n *     return () => {\n *       unobserve(canvas, resize);\n *     };\n *   }, []);\n *\n *   return (\n *     <div className=\"live-wrap\">\n *       <canvas className=\"scene-canvas\" ref={refDom}></canvas>\n *     </div>\n *   );\n * }\n * ```\n */\nexport default class Program extends Resource<ProgramOptions> {\n  public attributeOrder: string;\n\n  public uniforms: Uniforms;\n\n  #uniformLocations: Map<any, any>;\n\n  #attributeLocations: Map<any, any>;\n\n  #vs: VertexShader;\n\n  #fs: FragmentShader;\n\n  #renderState: Partial<ProgramRenderState>;\n\n  constructor(renderer, options: Partial<ProgramOptions> = {} as ProgramOptions) {\n    super(renderer, options);\n    const {\n      id,\n      vertexShader,\n      fragmentShader,\n      uniforms = {},\n      transparent = false,\n      defines = [],\n      includes = {},\n      cullFace,\n      frontFace = renderer.gl.CCW,\n      depthTest = true,\n      depthWrite = true,\n      depthFunc = renderer.gl.LESS,\n      blending = 1,\n      blendFunc,\n      blendEquation,\n    } = options;\n    this.id = id || uid('program');\n    const defs: string[] = [\n      ...getDefines({\n        ...options,\n        ...uniforms,\n      }),\n      ...defines,\n    ].map((str) => (!str.startsWith('#define ') ? '#define '.concat(str) : str));\n\n    if (!vertexShader || !fragmentShader) {\n      throw new Error(`Program: ${this.id}：must provide vertexShader and fragmentShader`);\n    }\n\n    this.#vs = typeof vertexShader === 'string' ? new VertexShader(renderer, parseShader(vertexShader, defs), includes) : vertexShader;\n    this.#fs = typeof fragmentShader === 'string' ? new FragmentShader(renderer, parseShader(fragmentShader, defs), includes) : fragmentShader;\n\n    this.gl.attachShader(this.handle, this.#vs.handle);\n    this.gl.attachShader(this.handle, this.#fs.handle);\n    this.gl.linkProgram(this.handle);\n    this.gl.validateProgram(this.handle);\n    if (!this.gl.getProgramParameter(this.handle, this.gl.LINK_STATUS)) {\n      throw new Error(\n        'Program:'\n          .concat(this.id, ': Error linking ')\n          .concat(this.gl.getProgramInfoLog(this.handle) as string),\n      );\n    }\n\n    this.uniforms = uniforms;\n\n    this.#renderState = {\n      blending,\n      cullFace,\n      frontFace,\n      depthTest,\n      depthWrite,\n      depthFunc,\n      blendFunc,\n      blendEquation,\n    };\n\n    this.#uniformLocations = new Map();\n    this.#attributeLocations = new Map();\n\n    this.#assignUniforms(uniforms);\n\n    this.#assignAttributes();\n    if (transparent && !blendFunc?.src) {\n      if (this.renderer.premultipliedAlpha) {\n        this.#renderState.blendFunc = {\n          ...blendFunc,\n          src: this.gl.ONE,\n          dst: this.gl.ONE_MINUS_SRC_ALPHA,\n        };\n      } else {\n        this.#renderState.blendFunc = {\n          ...blendFunc,\n          src: this.gl.SRC_ALPHA,\n          dst: this.gl.ONE_MINUS_SRC_ALPHA,\n        };\n      }\n    }\n  }\n\n  get uniformLocations() {\n    return this.#uniformLocations;\n  }\n\n  get attributeLocations() {\n    return this.#attributeLocations;\n  }\n\n  /**\n   * 获取 `VertexShader` 对象\n   */\n  get vertexShader() {\n    return this.#vs;\n  }\n\n  /**\n   * 获取 `FragmentShader` 对象\n   */\n  get fragmentShader() {\n    return this.#fs;\n  }\n\n  /**\n   *\n   */\n  use() {\n    const programActive = this.rendererState.currentProgramId === this.id;\n    let textureUnit = -1;\n    if (!programActive) {\n      this.gl.useProgram(this.handle);\n      this.rendererState.currentProgramId = this.id;\n    }\n\n    this.#uniformLocations.forEach((location, activeUniform) => {\n      const name = activeUniform.name;\n\n      const uniform = this.uniforms[name];\n\n      if (!uniform) {\n        console.warn('Program:'.concat(this.id, ': Active uniform ').concat(name, ' has not been supplied'));\n        return;\n      }\n\n      if (uniform && (isUndef(uniform.value) || isNull(uniform.value))) {\n        console.warn('Program:'.concat(this.id, ': Uniform ').concat(name, ' is missing a value parameter'));\n        return;\n      }\n\n      let value = uniform?.value;\n\n      if (value instanceof Texture) {\n        textureUnit += 1;\n        uniform.value.update(textureUnit);\n        return setUniform(this.gl, activeUniform.type, location.location, textureUnit);\n      }\n\n      if (value instanceof Matrix || value instanceof Vector) {\n        value = uniform.value.toArray();\n      } else if (value instanceof Color) {\n        value = uniform.value.toArray();\n      }\n\n      if (value && value.length > 0 && value[0] instanceof Texture) {\n        const units: number[] = [];\n        for (let i = 0; i < uniform.value.length; i++) {\n          const v = value[i];\n          textureUnit += 1;\n          v.update(textureUnit);\n          units.push(textureUnit);\n        }\n        return setUniform(this.gl, activeUniform.type, location.location, units);\n      }\n\n      setUniform(this.gl, activeUniform.type, location.location, value);\n    });\n\n    this.applyState();\n  }\n\n  /**\n   * 设置 Program 的 render state\n   * @param states\n   * @param merge 是否使用合并模式，如果为 `false` 则直接替换\n   */\n  setStates(states: Partial<ProgramRenderState>, merge = true) {\n    if (!merge) {\n      this.#renderState = states;\n    } else {\n      this.#renderState = {\n        ...this.#renderState,\n        ...omit(states, ['blendFunc', 'blendEquation']),\n      } as ProgramRenderState;\n      if (states.blendFunc) {\n        this.#renderState.blendFunc = {\n          ...this.#renderState.blendFunc,\n          ...states.blendFunc,\n        };\n      }\n      if (states.blendEquation) {\n        this.#renderState.blendEquation = {\n          ...this.#renderState.blendEquation,\n          ...states.blendEquation,\n        };\n      }\n    }\n  }\n\n  applyState() {\n    this.rendererState.apply(this.#renderState);\n  }\n\n  /**\n   * 设置对应的 Uniform 值\n   * @param key\n   * @param value\n   */\n  setUniform(key, value) {\n    if (this.uniforms[key]) {\n      this.uniforms[key].value = value;\n    }\n  }\n\n  /**\n   * 使用此 Program\n   */\n  bind() {\n    this.gl.useProgram(this.handle);\n  }\n\n  /**\n   * 取消使用此 `Program`\n   */\n  unbind() {\n    this.gl.useProgram(null);\n  }\n\n  createHandle() {\n    return this.gl.createProgram();\n  }\n\n  deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  #assignUniforms(uniforms = {}) {\n    const numUniforms = this.gl.getProgramParameter(this.handle, this.gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; i++) {\n      const uniformInfo = this.gl.getActiveUniform(this.handle, i);\n      if (!uniformInfo) break;\n      const name = uniformInfo.name;\n      const split = name.match(/(\\w+)/g) as string[];\n      const uniformData: UniformData = {\n        location: this.gl.getUniformLocation(this.handle, name),\n        type: uniformInfo.type,\n        name: split[0],\n        isStruct: false,\n      };\n      if (split.length === 3) {\n        uniformData.isStructArray = true;\n        uniformData.structIndex = Number(split[1]);\n        uniformData.structProperty = split[2];\n      } else if (split.length === 2 && isNaN(Number(split[1]))){\n        uniformData.isStruct = true;\n        uniformData.structProperty = split[1];\n      }\n      const v = uniforms[name]?.value;\n      if (!isUndef(v) && !isNull(v)) {\n        uniformData.value = uniforms[name].value;\n      }\n      this.uniforms[name] = uniformData;\n      this.#uniformLocations.set(uniformInfo, uniformData);\n    }\n  }\n\n  #assignAttributes() {\n    const numAttribs = this.gl.getProgramParameter(this.handle, this.gl.ACTIVE_ATTRIBUTES);\n    const locations: string[] = [];\n    for (let i = 0; i < numAttribs; i++) {\n      const attribInfo = this.gl.getActiveAttrib(this.handle, i);\n      if (!attribInfo) break;\n      const location = this.gl.getAttribLocation(this.handle, attribInfo.name);\n      locations[location] = attribInfo.name;\n      this.#attributeLocations.set(attribInfo, location);\n    }\n    this.attributeOrder = locations.join('');\n  }\n\n  /**\n   * 销毁此`Program`\n   */\n  destroy() {\n    this.unbind();\n    this.deleteHandle();\n  }\n}\n", "import { isPowerOfTwo } from '../utils/math';\nimport Texture, { emptyPixel, TextureState, TextureOptions } from './Texture';\nimport Renderer from './Renderer';\nimport { isNumber } from '../utils';\n\nexport interface Texture3DOptions extends TextureOptions {\n  /**\n   * 默认为 `gl.TEXTURE_3D`\n   */\n  target: GLenum;\n\n  /**\n   * 深度采样纹理时使用的行为, 仅在 `Texture3D` 时可用。\n   * 可能的值：`gl.REPEAT`，`gl.MIRRORED_REPEAT`，`gl.CLAMP_TO_EDGE`\n   */\n  wrapR: number;\n\n  /**\n   * [GLenum](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Types) 制定纹素的版本。正确的 内部格式 组合被列举在 [这个列表](https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE)。\n   */\n  format: number;\n\n  /**\n   * 用于指定纹理图像的内部格式\n   * 可能的值：`gl.RGBA`，`gl.RGB`，`gl.ALPHA` 等等\n   */\n  internalFormat: number;\n\n  /**\n   * 指定纹理数据的数据类型。\n   * 可能的值：`gl.UNSIGNED_BYTE`，`gl.FLOAT`，`gl.UNSIGNED_SHORT`，`gl.UNSIGNED_INT` 等等\n   * 可以查看[texImage3D](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL2RenderingContext/texImage3D) 来\n   * 获取更多信息\n   */\n  type: number;\n\n  /**\n   * 指定纹理深度，默认为`0`\n   */\n  depth: number;\n\n  /**\n   * 纹理数据\n   */\n  image: any;\n}\n\ninterface Texture3DState extends TextureState {\n  wrapR: GLenum;\n}\n\n/**\n * 纹理\n * 一般在 `webgl` 中会将纹理用于贴图，或者作为 `renderTarget`\n * 代码示例：\n * ```ts\n * const texture = new ve.Texture3D(renderer, {\n *   generateMipmaps: true,\n *   flipY: true,\n * });\n *\n * const image = new Image();\n *\n * image.onload = () => {\n *   texture.setData(image, image.width, image.height);\n * };\n *\n * image.src = './assets/posx.jpg';\n * ```\n */\nexport default class Texture3D extends Texture<Texture3DOptions> {\n  /**\n   * 设置纹理是否需要更新，一般我们会在纹理数据或者配置变更时将此配置项设置为 `true`\n   * 这样会在下一次渲染时应用对应的纹理数据和配置。\n   */\n  public needsUpdate = false;\n\n  /**\n   * 设置纹理单位\n   */\n  public textureUnit = 0;\n\n  /**\n   * 纹理深度\n   */\n  public depth: number;\n\n  #state: Texture3DState = {} as Texture3DState;\n\n  /**\n   * @param renderer Renderer 对象\n   * @param options 配置项\n   */\n  constructor(renderer: Renderer, options: Partial<Texture3DOptions> = {}) {\n    const gl = renderer.gl as WebGL2RenderingContext;\n    const defaultOptions = {\n      target: gl.TEXTURE_3D,\n      type: gl.UNSIGNED_BYTE,\n      format: gl.RGBA,\n      internalFormat: options.format || gl.RGBA,\n      wrapS: gl.CLAMP_TO_EDGE,\n      wrapT: gl.CLAMP_TO_EDGE,\n      wrapR: gl.CLAMP_TO_EDGE,\n      generateMipmaps: true,\n      minFilter: gl.LINEAR,\n      magFilter: gl.LINEAR,\n      premultiplyAlpha: false,\n      unpackAlignment: 4,\n      flipY: false,\n      level: 0,\n      depth: 0,\n    };\n\n    const opt = Object.assign({}, defaultOptions, options);\n    super(renderer, opt, false);\n\n    this.needsUpdate = true;\n    this.depth = this.options.depth as number;\n    this.#state.version = -1;\n    this.update();\n  }\n\n  /**\n   * 获取 `webgl` 实例\n   */\n  get gl(): WebGL2RenderingContext {\n    return this.renderer.gl as WebGL2RenderingContext;\n  }\n\n  /**\n   * 设置纹理数据\n   * @param image 纹理数据\n   * @param width 纹理宽度，默认为原始宽度\n   * @param height 纹理高度，默认为原始高度\n   * @param depth\n   */\n  setData(image, width = this.width, height = this.height, depth = this.depth) {\n    this.image = image;\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.needsUpdate = true;\n  }\n\n  /**\n   * 设置纹理配置（默认进行合并）\n   * @param options 配置项\n   */\n  setOptions(options: Partial<Texture3DOptions>) {\n    this.options = Object.assign(this.options, options);\n    this.width = this.options.width as number;\n    this.height = this.options.height as number;\n    this.depth = this.options.depth as number;\n    this.needsUpdate = true;\n  }\n\n  /**\n   * 更新纹理数据或者纹理相关配置\n   * @param units 纹理单位，默认为 0\n   */\n  update(units = 0) {\n    const needUpdate = !(this.image === this.#state.image && !this.needsUpdate);\n    const checked =\n      needUpdate ||\n      this.rendererState.textureUnits[units] !== this.id ||\n      this.rendererState.activeTextureUnit !== units;\n    if (checked) {\n      this.rendererState.setActiveTexture(units);\n      this.bind(units);\n    }\n    if (!needUpdate) return;\n    this.needsUpdate = false;\n    if (this.options.wrapS !== this.#state.wrapS) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.options.wrapS as GLenum);\n      this.#state.wrapS = this.options.wrapS as GLenum;\n    }\n    if (this.options.wrapT !== this.#state.wrapT) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.options.wrapT as GLenum);\n      this.#state.wrapT = this.options.wrapT as GLenum;\n    }\n    if (this.options.wrapR !== this.#state.wrapR) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_R, this.options.wrapR as GLenum);\n      this.#state.wrapR = this.options.wrapR as GLenum;\n    }\n    if (this.options.minFilter !== this.#state.minFilter) {\n      this.gl.texParameteri(\n        this.target,\n        this.gl.TEXTURE_MIN_FILTER,\n        this.options.minFilter as GLenum,\n      );\n      this.#state.minFilter = this.options.minFilter as GLenum;\n    }\n    if (this.options.magFilter !== this.#state.magFilter) {\n      this.gl.texParameteri(\n        this.target,\n        this.gl.TEXTURE_MAG_FILTER,\n        this.options.magFilter as GLenum,\n      );\n      this.#state.magFilter = this.options.magFilter as GLenum;\n    }\n    if (this.options.flipY !== this.rendererState.flipY) {\n      this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.options.flipY as boolean);\n      this.rendererState.flipY = this.options.flipY as boolean;\n    }\n    if (this.options.premultiplyAlpha !== this.rendererState.premultiplyAlpha) {\n      this.gl.pixelStorei(\n        this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,\n        this.options.premultiplyAlpha as boolean,\n      );\n      this.rendererState.premultiplyAlpha = this.options.premultiplyAlpha as boolean;\n    }\n    if (this.options.unpackAlignment !== this.rendererState.unpackAlignment) {\n      this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.options.unpackAlignment as GLenum);\n      this.rendererState.unpackAlignment = this.options.unpackAlignment as number;\n    }\n\n    if (this.options.anisotropy && this.options.anisotropy !== this.rendererState.anisotropy) {\n      const extTextureFilterAnisotropic =\n        this.gl.getExtension('EXT_texture_filter_anisotropic') ||\n        this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic') ||\n        this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n      if (extTextureFilterAnisotropic) {\n        const max = this.gl.getParameter(\n          extTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT,\n        );\n        let v = this.options.anisotropy;\n        if (this.options.anisotropy > max) {\n          v = max;\n          console.warn(\n            `[Texture]: Texture.anisotropy option exceeded the maximum allowed value ${max} of the device`,\n          );\n        }\n        this.gl.texParameterf(\n          this.target,\n          extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,\n          v,\n        );\n      }\n      this.rendererState.anisotropy = this.options.anisotropy;\n    }\n\n    if (this.image) {\n      if (this.image.width) {\n        this.width = this.image.width;\n        this.height = this.image.height;\n      }\n\n      if (this.renderer.isWebGL2 && isNumber(this.options.offset)) {\n        this.gl.texImage3D(\n          this.target,\n          this.options.level as GLenum,\n          this.options.internalFormat as GLenum,\n          this.width,\n          this.height,\n          this.depth,\n          0,\n          this.options.format as GLenum,\n          this.options.type as GLenum,\n          this.image,\n          this.options.offset,\n        );\n      } else {\n        if (ArrayBuffer.isView(this.image)) {\n          this.gl.texImage3D(\n            this.target,\n            this.options.level as GLenum,\n            this.options.internalFormat as GLenum,\n            this.width,\n            this.height,\n            this.depth,\n            0,\n            this.options.format as GLenum,\n            this.options.type as GLenum,\n            this.image,\n          );\n        } else {\n          this.gl.texImage3D(\n            this.target,\n            this.options.level as GLenum,\n            this.options.internalFormat as GLenum,\n            this.width,\n            this.height,\n            this.depth,\n            0,\n            this.options.format as GLenum,\n            this.options.type as GLenum,\n            this.image,\n          );\n        }\n      }\n\n      if (this.options.generateMipmaps) {\n        if (\n          this.renderer.isWebGL2 ||\n          (isPowerOfTwo(this.image.width) && isPowerOfTwo(this.image.height))\n        ) {\n          this.gl.generateMipmap(this.target);\n        } else {\n          this.options.generateMipmaps = false;\n          this.options.wrapS = this.gl.CLAMP_TO_EDGE;\n          this.options.wrapT = this.options.wrapS;\n          this.options.minFilter = this.gl.LINEAR;\n        }\n      }\n    } else {\n      if (this.width > 0) {\n        this.gl.texImage3D(\n          this.target,\n          this.options.level as GLenum,\n          this.options.internalFormat as GLenum,\n          this.width,\n          this.height,\n          this.depth,\n          0,\n          this.options.format as GLenum,\n          this.options.type as GLenum,\n          null,\n        );\n      } else {\n        this.gl.texImage3D(\n          this.target,\n          0,\n          this.gl.RGBA,\n          1,\n          1,\n          this.depth,\n          0,\n          this.gl.RGBA,\n          this.gl.UNSIGNED_BYTE,\n          emptyPixel,\n        );\n      }\n    }\n    this.#state.image = this.image;\n    this.#state.version += 1;\n  }\n\n  /**\n   * 移除相关状态\n   */\n  removeStats() {\n    this.#state = {\n      version: -1,\n    } as Texture3DState;\n  }\n\n  /**\n   * 获取字符串数据\n   */\n  toString(): string {\n    return `Texture3D(${this.id},${this.width}x${this.height})`;\n  }\n}\n", "import Object3D from '../objects/Object3D';\nimport ProjectionMatrix from '../math/ProjectionMatrix';\nimport Matrix4 from '../math/Matrix4';\nimport Vector3 from '../math/Vector3';\nimport type { WithUndef } from '../types';\n\n/**\n * 相机类型，默认有两种：`perspective` 透视相机和`orthographic`平面相机。\n */\nexport type CameraType = 'perspective' | 'orthographic';\n\nexport type Bounds = {\n  /**\n   * 像机视锥体左侧面\n   */\n  left: number;\n  /**\n   * 像机视锥体右侧面\n   */\n  right: number;\n  /**\n   * 像机视锥体上侧面\n   */\n  top: number;\n  /**\n   * 像机视锥体下侧面\n   */\n  bottom: number;\n};\n\nexport interface CameraOptions {\n  /**\n   * 像机的近端面，默认值是0.1\n   */\n  near: number;\n\n  /**\n   * 像机的远端面，默认值是 100\n   */\n  far: number;\n\n  /**\n   * 摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示，默认为 `45`\n   */\n  fov?: number;\n\n  /**\n   * 相机视锥体的纵横比\n   */\n  aspect?: number;\n\n  /**\n   * 像机视锥体配置\n   */\n  bounds?: Bounds;\n\n  /**\n   * 相机缩放倍数\n   */\n  zoom?: number;\n}\n\nconst tempMat4 = new Matrix4();\nconst tempVec3a = new Vector3();\nconst tempVec3b = new Vector3();\n\nconst ERR_CAMERA_METHOD_UNDEFINED = 'Camera subclass must define virtual methods';\n\n/**\n * 相机基类\n */\nexport default class Camera extends Object3D {\n  /**\n   * 相机类型（默认有两种相机：perspective和orthographic）\n   */\n  public cameraType: CameraType;\n\n  /**\n   * 投影矩阵\n   */\n  public projectionMatrix: ProjectionMatrix;\n\n  /**\n   * 视图矩阵\n   */\n  public viewMatrix: Matrix4;\n\n  /**\n   * pv矩阵，它是 `projectionMatrix`和`viewMatrix` 的乘积\n   */\n  public projectionViewMatrix: ProjectionMatrix;\n\n  /**\n   * 世界位置坐标\n   */\n  public worldPosition: Vector3;\n\n  /**\n   * 像机的近端面，默认值是0.1\n   */\n  #near: number;\n\n  /**\n   * 像机的远端面，默认值是 100\n   */\n  #far: number;\n\n  /**\n   * 摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示\n   */\n  #fov: number;\n\n  /**\n   * 相机视锥体的纵横比\n   */\n  #aspect: number;\n\n  /**\n   * 相机缩放倍数\n   */\n  #zoom: number;\n\n  /**\n   * 像机视锥体配置\n   */\n  #bounds: WithUndef<Bounds>;\n\n  public frustum: Matrix4;\n\n  constructor({\n    near = 0.1,\n    far = 100,\n    fov = 45,\n    aspect = 1,\n    bounds,\n    zoom = 1,\n  }: CameraOptions = {} as CameraOptions) {\n    super();\n\n    /**\n     * 相机类型\n     */\n    this.cameraType = 'perspective';\n    this.projectionMatrix = new ProjectionMatrix();\n    this.viewMatrix = new Matrix4();\n    this.projectionViewMatrix = new ProjectionMatrix();\n    this.worldPosition = new Vector3();\n    this.frustum = new Matrix4();\n    this.#near = near;\n    this.#far = far;\n    this.#fov = fov;\n    this.#aspect = aspect;\n    this.#bounds = bounds;\n    this.#zoom = zoom;\n    const {\n      left,\n      right,\n      top,\n      bottom,\n    } = bounds || {};\n    this.cameraType = left || right ? 'orthographic' : 'perspective';\n    if (this.cameraType === 'orthographic') {\n      this.orthographic(left, right, top, bottom, near, far, zoom);\n    } else {\n      this.perspective(fov, aspect, near, far);\n    }\n  }\n\n  /**\n   * 获取像机的近端面\n   */\n  get near() {\n    return this.#near;\n  }\n\n  /**\n   * 设置像机的近端面，并更新摄像机投影矩阵\n   * @param n near\n   */\n  set near(n: number) {\n    this.#near = n;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * 获取像机的远端面\n   */\n  get far() {\n    return this.#far;\n  }\n\n  /**\n   * 设置像机的远端面，并更新摄像机投影矩阵\n   * @param f\n   */\n  set far(f: number) {\n    this.#far = f;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * 获取摄像机视锥体垂直视野角度\n   */\n  get fov() {\n    return this.#fov;\n  }\n\n  /**\n   * 设置摄像机视锥体垂直视野角度，并更新摄像机投影矩阵\n   * @param f 角度值\n   */\n  set fov(f: number) {\n    this.#fov = f;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * 获取相机视锥体的纵横比\n   */\n  get aspect() {\n    return this.#aspect;\n  }\n\n  /**\n   * 设置相机视锥体的纵横比，并更新摄像机投影矩阵\n   * @param aspect\n   */\n  set aspect(aspect: number) {\n    this.#aspect = aspect;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * 获取相机的缩放倍数\n   */\n  get zoom() {\n    return this.#zoom;\n  }\n\n  /**\n   * 设置相机的缩放倍数，并更新摄像机投影矩阵\n   * @param zoom\n   */\n  set zoom(zoom: number) {\n    this.#zoom = zoom;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * 获取像机视锥体的范围\n   */\n  get bounds() {\n    return this.#bounds;\n  }\n\n  /**\n   * 设置相机像机视锥体的范围，并更新摄像机投影矩阵\n   * @param bounds\n   */\n  set bounds(bounds: WithUndef<Bounds>) {\n    this.#bounds = bounds;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * 创建或者更新 `projectionMatrix` 透视相机矩阵\n   * @param fov\n   * @param aspect\n   * @param near\n   * @param far\n   */\n  perspective(fov = this.fov, aspect = this.aspect, near = this.near, far = this.far) {\n    this.#fov = fov;\n    this.#aspect = aspect;\n    this.#near = near;\n    this.#far = far;\n    this.projectionMatrix.fromPerspective(fov, aspect, near, far);\n    this.cameraType = 'perspective';\n    // this.projectionMatrix.frustum(this.frustum, this.bounds.left, this.bounds.right, this.bounds.top, this.bounds.bottom, this.near, this.far);\n  }\n\n  /**\n   * 创建或者更新 `projectionMatrix` 平面相机矩阵\n   * @param left\n   * @param right\n   * @param top\n   * @param bottom\n   * @param near\n   * @param far\n   * @param zoom\n   */\n  orthographic(left, right, top, bottom, near = this.near, far = this.far, zoom = 1) {\n    this.#bounds = {\n      left,\n      right,\n      top,\n      bottom,\n    };\n    this.near = near;\n    this.far = far;\n    this.projectionMatrix.orthographic(\n      left / zoom,\n      right / zoom,\n      top / zoom,\n      bottom / zoom,\n      near,\n      far,\n    );\n    this.cameraType = 'orthographic';\n    this.projectionMatrix.frustum(this.frustum, this.#bounds.left, this.#bounds.right, this.#bounds.top, this.#bounds.bottom, this.#near, this.#far);\n  }\n\n  /**\n   * 设置相机的朝向\n   * @param t 朝向位置，是一个三维向量\n   */\n  lookAt(t) {\n    super.lookAt(t, true);\n    return this;\n  }\n\n  /**\n   * 用于更新一个对象的世界矩阵。\n   * 每个可视对象都有一个叫做 `worldMatrix` 的矩阵，表示这个对象在世界坐标系中的位置和方向。\n   * 当您修改对象的位置、旋转或缩放时，对象的 `worldMatrix` 矩阵会发生变化。如果您希望将这些变化反映到场景中，就需要调用 `updateMatrixWorld` 函数。\n   */\n  updateMatrixWorld() {\n    super.updateMatrixWorld();\n    this.viewMatrix.invert(this.worldMatrix);\n    this.worldMatrix.getTranslation(this.worldPosition);\n    this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n    return this;\n  }\n\n  /**\n   * 判断 mesh 是否在相机视椎体内\n   * @param node\n   * @param worldMatrix\n   */\n  frustumIntersectsMesh(node, worldMatrix = node.worldMatrix) {\n    if (!node.geometry.attributes.position) return true;\n\n    if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n\n    if (!node.geometry.bounds) return true;\n\n    const center = tempVec3a;\n    center.copy(node.geometry.bounds.center);\n    center.applyMatrix4(worldMatrix);\n\n    const radius = node.geometry.bounds.radius * worldMatrix.getMaxScaleOnAxis();\n\n    return this.frustumIntersectsSphere(center, radius);\n  }\n\n  /**\n   * @private\n   * @param center\n   * @param radius\n   */\n  frustumIntersectsSphere(center, radius) {\n    const normal = tempVec3b;\n\n    for (let i = 0; i < 6; i++) {\n      const plane = this.frustum[i];\n      const distance = normal.copy(plane).dot(center) + plane.constant;\n      if (distance < -radius) return false;\n    }\n    return true;\n  }\n\n  /**\n   * 转换到世界坐标\n   * @param v\n   */\n  project(v) {\n    v.applyMatrix4(this.viewMatrix);\n    v.applyMatrix4(this.projectionMatrix);\n    return this;\n  }\n\n  unproject(v) {\n    v.applyMatrix4(tempMat4.invert(this.projectionMatrix));\n    v.applyMatrix4(this.worldMatrix);\n    return this;\n  }\n\n  /**\n   * 更新摄像机投影矩阵，必须由子类实现\n   */\n  updateProjectionMatrix() {\n    throw new Error(ERR_CAMERA_METHOD_UNDEFINED);\n  }\n}\n", "import Camera from './Camera';\n\n/**\n * 透视相机\n *\n * 代码示例：\n * ```ts\n * const camera = new PerspectiveCamera(45, width / height, 1, 1000)\n * scene.add(camera);\n * ```\n */\nexport default class PerspectiveCamera extends Camera {\n  constructor(fov, aspect, near, far) {\n    super({\n      fov,\n      aspect,\n      near,\n      far,\n    });\n  }\n\n  /**\n   * 更新投影矩阵\n   */\n  updateProjectionMatrix() {\n    this.projectionMatrix.fromPerspective(this.fov, this.aspect, this.near, this.far);\n  }\n}\n", "import Camera from './Camera';\nimport type { Bounds } from './Camera';\n\n/**\n * 正交相机（在这种投影模式下，无论物体距离相机距离远或者近，在最终渲染的图片中物体的大小都保持不变）\n *\n * 代码示例：\n * ```ts\n * const camera = new OrthographicCamera(width / - 2, width / 2, height / 2, height / - 2, 1, 1000);\n * scene.add(camera);\n * ```\n */\nexport default class OrthographicCamera extends Camera {\n  constructor(left, right, top, bottom, near, far, zoom = 1) {\n    super({\n      bounds: {\n        left,\n        right,\n        top,\n        bottom,\n      },\n      near,\n      far,\n      zoom,\n    });\n  }\n\n  /**\n   * 更新投影矩阵\n   */\n  updateProjectionMatrix() {\n    const {\n      left,\n      right,\n      top,\n      bottom,\n    } = this.bounds as Bounds;\n    const { zoom } = this;\n    this.projectionMatrix.orthographic(\n      left / zoom,\n      right / zoom,\n      top / zoom,\n      bottom / zoom,\n      this.near,\n      this.far,\n    );\n  }\n}\n"],
  "mappings": "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U,IAAI,IAAI,YAAY,UAAU;AAEpF,QAAIrD,KAAI;AACR,QAAI,KAAK;AACT,UAAMgD,KAAI,SAAS;AACnB,UAAMnB,KAAI,SAAS;AACnB,UAAMtB,KAAI,SAAS;AACnB,UAAM,KAAK,QAAQ;AACnB,UAAM,KAAK,QAAQ;AACnB,UAAM,KAAK,QAAQ;AAEnB;MACE;MACA;MACA;MACA8C;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACArD;MACA;IAAA;AAIG,IAAAA,MAAAgD;AACC,UAAA;AACN;MACE;MACA;MACA;MACAK;MACA;MACA;MACA,CAAC;MACD;MACA;MACA;MACA;MACA;MACA;MACA;MACArD;MACA;IAAA;AAIG,IAAAA,MAAAgD;AACC,UAAA;AACN;MACE;MACA;MACA;MACAK;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACArD;MACA;IAAA;AAIG,IAAAA,MAAA6B;AACC,UAAA;AACN;MACE;MACA;MACA;MACAwB;MACA;MACA;MACA,CAAC;MACD;MACA;MACA;MACA;MACA;MACA;MACA;MACArD;MACA;IAAA;AAIG,IAAAA,MAAA6B;AACC,UAAA;AACN;MACE;MACA;MACA;MACAwB;MACA;MACA;MACA,CAAC;MACD;MACA;MACA;MACA;MACA;MACA;MACA;MACArD;MACA;IAAA;AAIG,IAAAA,MAAAO;AACC,UAAA;AACN;MACE;MACA;MACA;MACA8C;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACArD;MACA;IAAA;AAGF,UAAM,UAAU;MACd,GAAG;MACH,UAAU;QACR,MAAM;QACN,MAAM;MAAA;MAER,QAAQ;QACN,MAAM;QACN,MAAM;MAAA;MAER,IAAI;QACF,MAAM;QACN,MAAM;MAAA;MAER,OAAO;QACL,MAAMqD;MAAA;IACR,CACD;EAAA;AAEL;ACrPA,IAAM,aAAa;AAEnB,IAAM,YAAY,CAAA;AAClB,SAAS,cAAc,MAAM,MAAM;AACvB,YAAA,GAAA,IAAO,UAAU,GAAQ,KAAA;AACnC,QAAM,MAAM,UAAU,GAAA;AACtB,YAAU,GAAQ,KAAA;AAClB,SAAO,GAAG,OAAO,KAAK,GAAG,EAAE,OAAO,GAAG;AACvC;AAIA,IAAM,cAAc,CAAC,KAAK,eAAgC;AACxD,UAAQ,YAAY;IAClB,KAAK,IAAI;AACA,aAAA;IACT,KAAK,IAAI;AACA,aAAA;IACT;AACS,aAAA;EAAA;AAEb;AAEA,IAAM,gBAAgB,CAAC,KAAK,SAAS;AACnC,UAAQ,MAAM;IACZ,KAAK;AACH,aAAO,IAAI;IACb,KAAK;AACH,aAAO,IAAI;IACb;AACE;EAAA;AAEN;AAEA,SAAS,eAAe,QAAgB;AAChC,QAAA,QAAQ,OAAO,MAAM,IAAI;AAC/B,WAASrD,KAAI,GAAGA,KAAI,MAAM,QAAQA,MAAK;AACrC,UAAMA,EAAK,IAAAA,KAAI,IAAI,OAAO,MAAMA,EAAA;EAAA;AAE3B,SAAA,MAAM,KAAK,IAAI;AACxB;;AAEO,IAAM,SAAN,cAAqB,SAA0B;EASpD,YAAY,UAAoB,YAAY,MAAM,WAAW,CAAA,GAAI;AAC/D,UAAM,aAAa,cAAc,SAAS,IAAI,IAAI;AAClD,UAAM,UAAU;MACd,MAAM,cAAc,UAAU,KAAK,cAAc,YAAY,UAAU,UAAU,CAAC;IAAA,CACnF;AAZH;AAEA;AAIO;AAOL,YAAQ,OAAO,OAAO,eAAe,UAAU,UAAU;AACzD,uBAAK,WAAY;AACjB,uBAAK,aAAc;AACnB,SAAK,aAAa,KAAK,mBAAmB,YAAY,YAAY,CAAA,CAAE,EAAE;MACpE;MACA;IAAA;AAEG,SAAA,aAAa,KAAK,UAAU;EAAA;EAGnC,mBAAmB,QAAQ,UAAU,CAAA,GAAI;AACvC,UAAM,SAAS;AACT,UAAA,cAAc,CAAC,WAAWK,OAAM;AACpC,UAAI,SAAS,QAAQA,EAAA;AACrB,UAAI,WAAW;AAAW,cAAM,IAAI,MAAM,4BAA4B,OAAOA,IAAG,GAAG,CAAC;AAC3E,eAAA,OAAO,QAAQ,eAAe,iBAAiB;AACjD,aAAA,KAAK,mBAAmB,QAAQ,OAAO;IAAA;AAEzC,WAAA,OAAO,QAAQ,QAAQ,WAAW;EAAA;EAG3C,aAAa,SAAS,KAAK,QAAQ;AACjC,QAAIH,KAAI,OAAO,QAAQ,eAAe,iBAAiB;AACnD,IAAAA,KAAA,KAAK,mBAAmBA,IAAG,mBAAK,cAAa,CAAA,CAAE,EAAE,QAAQ,WAAW,MAAM;AAC9E,SAAK,GAAG,aAAa,KAAK,QAAQA,EAAC;AAC9B,SAAA,GAAG,cAAc,KAAK,MAAM;AAC7B,QAAA,CAAC,KAAK,GAAG,mBAAmB,KAAK,QAAQ,KAAK,GAAG,cAAc,GAAG;AACpE,YAAM,MAAM,KAAK,GAAG,iBAAiB,KAAK,MAAM,KAAK;AAChD,WAAA,GAAG,aAAa,KAAK,MAAM;AAChC,YAAM,IAAI,MAAM,GAAG,KAAK,SAAS,CAAA;EAAM,GAAA;EAAQ,eAAeA,EAAC,CAAG,EAAA;IAAA;EACpE;EAGF,IAAI,SAAS;AACX,WAAO,KAAK;EAAA;EAGd,IAAI,aAAa;AACf,WAAO,mBAAK;EAAA;EAGd,YAAY;AACV,WAAO,KAAK,GAAG,gBAAgB,KAAK,MAAM;EAAA;EAG5C,UAAU,QAAQ;AACV,UAAA,OAAO,cAAc,MAAM;AACjC,QAAI,MAAM;AACH,WAAA,OAAO,cAAc,IAAI;IAAA;AAEhC,SAAK,aAAa,MAAM;EAAA;EAI1B,cAAc;EAAA;EAEd,eAAe;AACR,SAAA,GAAG,aAAa,KAAK,MAAM;EAAA;EAGlC,WAAmB;AACjB,WAAO,GAAG,YAAY,KAAK,IAAI,KAAK,UAAU,CAAA,IAAK,KAAK,EAAA;EAAA;AAE5D;AA5EE;AAEA;AA+EK,IAAM,eAAN,cAA2B,OAAO;EACvC,YAAY,UAAoB,YAAoB,UAAU;AACtD,UAAA,UAAU,YAAY,UAAU,QAAQ;EAAA;EAGhD,eAAe;AACb,WAAO,KAAK,GAAG,aAAa,KAAK,GAAG,aAAa;EAAA;AAErD;AAKO,IAAM,iBAAN,cAA6B,OAAO;EACzC,YAAY,UAAoB,YAAoB,UAAU;AACtD,UAAA,UAAU,YAAY,YAAY,QAAQ;EAAA;EAGlD,eAAe;AACb,WAAO,KAAK,GAAG,aAAa,KAAK,GAAG,eAAe;EAAA;AAEvD;AC1IA,IAAM,aAAa,CAACI,OAAM;AACxB,QAAM,UAAU,CAAA;AAChB,SAAO,QAAQ,IAAI,CAAC0C,OAAM,WAAW,OAAOA,EAAC,CAAC;AAChD;AAEA,IAAM,gBAAgB,CAAA;AAEtB,SAAS,QAAQnD,IAAG;AAClB,QAAM,WAAWA,GAAE;AACb,QAAA,WAAWA,GAAE,CAAG,EAAA;AACtB,MAAI,aAAa;AAAkB,WAAAA;AACnC,QAAMmB,UAAS,WAAW;AAC1B,MAAI,QAAQ,cAAcA,OAAA;AAC1B,MAAI,CAAC;AAAO,kBAAcA,OAAU,IAAA,QAAQ,IAAI,aAAaA,OAAM;AAC1D,WAAAhB,KAAI,GAAGA,KAAI,UAAUA;AAAK,UAAM,IAAIH,GAAEG,EAAI,GAAAA,KAAI,QAAQ;AACxD,SAAA;AACT;AAEA,SAAS,WAAW,IAA2B,MAAc,UAAgC,OAAY;AACvG,UAAQ,MAAM,SAAS,QAAQ,KAAK,IAAI;AACxC,QAAM,UAAU,MAAM;AAEtB,UAAQ,MAAM;IACZ,KAAK,sBAAsB;AAClB,aAAA,UAAU,GAAG,WAAW,UAAU,KAAK,IAAI,GAAG,UAAU,UAAU,KAAK;IAChF,KAAK,sBAAsB;AAClB,aAAA,GAAG,WAAW,UAAU,KAAK;IACtC,KAAK,sBAAsB;AAClB,aAAA,GAAG,WAAW,UAAU,KAAK;IACtC,KAAK,sBAAsB;AAClB,aAAA,GAAG,WAAW,UAAU,KAAK;IACtC,KAAK,sBAAsB;IAC3B,KAAK,sBAAsB;IAC3B,KAAK,sBAAsB;IAC3B,KAAK,sBAAsB;AAClB,aAAA,UAAU,GAAG,WAAW,UAAU,KAAK,IAAI,GAAG,UAAU,UAAU,KAAK;IAChF,KAAK,sBAAsB;IAC3B,KAAK,sBAAsB;AAClB,aAAA,GAAG,WAAW,UAAU,KAAK;IACtC,KAAK,sBAAsB;IAC3B,KAAK,sBAAsB;AAClB,aAAA,GAAG,WAAW,UAAU,KAAK;IACtC,KAAK,sBAAsB;IAC3B,KAAK,sBAAsB;AAClB,aAAA,GAAG,WAAW,UAAU,KAAK;IACtC,KAAK,sBAAsB;AACzB,aAAO,GAAG,iBAAiB,UAAU,OAAO,KAAK;IACnD,KAAK,sBAAsB;AACzB,aAAO,GAAG,iBAAiB,UAAU,OAAO,KAAK;IACnD,KAAK,sBAAsB;AACzB,aAAO,GAAG,iBAAiB,UAAU,OAAO,KAAK;EAAA;AAEvD;;AAiQA,IAAqB,UAArB,cAAqC,SAAyB;EAe5D,YAAY,UAAU,UAAmC,CAAA,GAAsB;AAC7E,UAAM,UAAU,OAAO;AAhB3B;AACS;AAEA;AAEP;AAEA;AAEA;AAEA;AAEA;AAIQ,UAAA;MACJ;MACA;MACA;MACA,WAAW,CAAA;MACX,cAAc;MACd,UAAU,CAAA;MACV,WAAW,CAAA;MACX;MACA,YAAY,SAAS,GAAG;MACxB,YAAY;MACZ,aAAa;MACb,YAAY,SAAS,GAAG;MACxB,WAAW;MACX;MACA;IAAA,IACE;AACC,SAAA,KAAK,MAAM,IAAI,SAAS;AAC7B,UAAM,OAAiB;MACrB,GAAG,WAAW;QACZ,GAAG;QACH,GAAG;MAAA,CACJ;MACD,GAAG;IAAA,EACH,IAAI,CAAC,QAAS,CAAC,IAAI,WAAW,UAAU,IAAI,WAAW,OAAO,GAAG,IAAI,GAAI;AAEvE,QAAA,CAAC,gBAAgB,CAAC,gBAAgB;AACpC,YAAM,IAAI,MAAM,YAAY,KAAK,EAAiD,+CAAA;IAAA;AAGpF,uBAAK,KAAM,OAAO,iBAAiB,WAAW,IAAI,aAAa,UAAU,YAAY,cAAc,IAAI,GAAG,QAAQ,IAAI;AACtH,uBAAK,KAAM,OAAO,mBAAmB,WAAW,IAAI,eAAe,UAAU,YAAY,gBAAgB,IAAI,GAAG,QAAQ,IAAI;AAE5H,SAAK,GAAG,aAAa,KAAK,QAAQ,mBAAK,KAAI,MAAM;AACjD,SAAK,GAAG,aAAa,KAAK,QAAQ,mBAAK,KAAI,MAAM;AAC5C,SAAA,GAAG,YAAY,KAAK,MAAM;AAC1B,SAAA,GAAG,gBAAgB,KAAK,MAAM;AAC/B,QAAA,CAAC,KAAK,GAAG,oBAAoB,KAAK,QAAQ,KAAK,GAAG,WAAW,GAAG;AAClE,YAAM,IAAI;QACR,WACG,OAAO,KAAK,IAAI,kBAAkB,EAClC,OAAO,KAAK,GAAG,kBAAkB,KAAK,MAAM,CAAW;MAAA;IAC5D;AAGF,SAAK,WAAW;AAEhB,uBAAK,cAAe;MAClB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA;AAGG,uBAAA,mBAAA,oBAAwB,IAAI;AAC5B,uBAAA,qBAAA,oBAA0B,IAAI;AAEnC,0BAAK,uCAAL,WAAqB;AAErB,0BAAK,yCAAL;AACI,QAAA,eAAe,EAAC,uCAAW,MAAK;AAC9B,UAAA,KAAK,SAAS,oBAAoB;AACpC,2BAAK,cAAa,YAAY;UAC5B,GAAG;UACH,KAAK,KAAK,GAAG;UACb,KAAK,KAAK,GAAG;QAAA;MACf,OACK;AACL,2BAAK,cAAa,YAAY;UAC5B,GAAG;UACH,KAAK,KAAK,GAAG;UACb,KAAK,KAAK,GAAG;QAAA;MACf;IACF;EACF;EAGF,IAAI,mBAAmB;AACrB,WAAO,mBAAK;EAAA;EAGd,IAAI,qBAAqB;AACvB,WAAO,mBAAK;EAAA;EAMd,IAAI,eAAe;AACjB,WAAO,mBAAK;EAAA;EAMd,IAAI,iBAAiB;AACnB,WAAO,mBAAK;EAAA;EAMd,MAAM;AACJ,UAAM,gBAAgB,KAAK,cAAc,qBAAqB,KAAK;AACnE,QAAI,cAAc;AAClB,QAAI,CAAC,eAAe;AACb,WAAA,GAAG,WAAW,KAAK,MAAM;AACzB,WAAA,cAAc,mBAAmB,KAAK;IAAA;AAG7C,uBAAK,mBAAkB,QAAQ,CAAC,UAAU,kBAAkB;AAC1D,YAAM,OAAO,cAAc;AAErB,YAAA,UAAU,KAAK,SAAS,IAAA;AAE9B,UAAI,CAAC,SAAS;AACJ,gBAAA,KAAK,WAAW,OAAO,KAAK,IAAI,mBAAmB,EAAE,OAAO,MAAM,wBAAwB,CAAC;AACnG;MAAA;AAGE,UAAA,YAAY,QAAQ,QAAQ,KAAK,KAAK,OAAO,QAAQ,KAAK,IAAI;AACxD,gBAAA,KAAK,WAAW,OAAO,KAAK,IAAI,YAAY,EAAE,OAAO,MAAM,+BAA+B,CAAC;AACnG;MAAA;AAGF,UAAI,QAAQ,mCAAS;AAErB,UAAI,iBAAiB,SAAS;AACb,uBAAA;AACP,gBAAA,MAAM,OAAO,WAAW;AAChC,eAAO,WAAW,KAAK,IAAI,cAAc,MAAM,SAAS,UAAU,WAAW;MAAA;AAG3E,UAAA,iBAAiB,UAAU,iBAAiB,QAAQ;AAC9C,gBAAA,QAAQ,MAAM,QAAQ;MAAA,WACrB,iBAAiB,OAAO;AACzB,gBAAA,QAAQ,MAAM,QAAQ;MAAA;AAGhC,UAAI,SAAS,MAAM,SAAS,KAAK,MAAM,CAAA,aAAc,SAAS;AAC5D,cAAM,QAAkB,CAAA;AACxB,iBAASA,KAAI,GAAGA,KAAI,QAAQ,MAAM,QAAQA,MAAK;AAC7C,gBAAMG,KAAI,MAAMH,EAAA;AACD,yBAAA;AACf,UAAAG,GAAE,OAAO,WAAW;AACpB,gBAAM,KAAK,WAAW;QAAA;AAExB,eAAO,WAAW,KAAK,IAAI,cAAc,MAAM,SAAS,UAAU,KAAK;MAAA;AAGzE,iBAAW,KAAK,IAAI,cAAc,MAAM,SAAS,UAAU,KAAK;IAAA,CACjE;AAED,SAAK,WAAW;EAAA;EAQlB,UAAU,QAAqC,QAAQ,MAAM;AAC3D,QAAI,CAAC,OAAO;AACV,yBAAK,cAAe;IAAA,OACf;AACL,yBAAK,cAAe;QAClB,GAAG,mBAAK;QACR,GAAG,KAAK,QAAQ,CAAC,aAAa,eAAe,CAAC;MAAA;AAEhD,UAAI,OAAO,WAAW;AACpB,2BAAK,cAAa,YAAY;UAC5B,GAAG,mBAAK,cAAa;UACrB,GAAG,OAAO;QAAA;MACZ;AAEF,UAAI,OAAO,eAAe;AACxB,2BAAK,cAAa,gBAAgB;UAChC,GAAG,mBAAK,cAAa;UACrB,GAAG,OAAO;QAAA;MACZ;IACF;EACF;EAGF,aAAa;AACN,SAAA,cAAc,MAAM,mBAAK,aAAY;EAAA;EAQ5C,WAAW,KAAK,OAAO;AACjB,QAAA,KAAK,SAAS,GAAM,GAAA;AACjB,WAAA,SAAS,GAAA,EAAK,QAAQ;IAAA;EAC7B;EAMF,OAAO;AACA,SAAA,GAAG,WAAW,KAAK,MAAM;EAAA;EAMhC,SAAS;AACF,SAAA,GAAG,WAAW,IAAI;EAAA;EAGzB,eAAe;AACN,WAAA,KAAK,GAAG,cAAc;EAAA;EAG/B,eAAe;AACR,SAAA,GAAG,cAAc,KAAK,MAAM;EAAA;EAiDnC,UAAU;AACR,SAAK,OAAO;AACZ,SAAK,aAAa;EAAA;AAEtB;AA/RE;AAEA;AAEA;AAEA;AAEA;AAbF;AAkPE,oBAAA,SAAgB,WAAW,CAAA,GAAI;;AACvB,QAAA,cAAc,KAAK,GAAG,oBAAoB,KAAK,QAAQ,KAAK,GAAG,eAAe;AACpF,WAASH,KAAI,GAAGA,KAAI,aAAaA,MAAK;AACpC,UAAM,cAAc,KAAK,GAAG,iBAAiB,KAAK,QAAQA,EAAC;AAC3D,QAAI,CAAC;AAAa;AAClB,UAAM,OAAO,YAAY;AACnB,UAAA,QAAQ,KAAK,MAAM,QAAQ;AACjC,UAAM,cAA2B;MAC/B,UAAU,KAAK,GAAG,mBAAmB,KAAK,QAAQ,IAAI;MACtD,MAAM,YAAY;MAClB,MAAM,MAAM,CAAA;MACZ,UAAU;IAAA;AAER,QAAA,MAAM,WAAW,GAAG;AACtB,kBAAY,gBAAgB;AAChB,kBAAA,cAAc,OAAO,MAAM,CAAE,CAAA;AACzC,kBAAY,iBAAiB,MAAM,CAAA;IAAA,WAC1B,MAAM,WAAW,KAAK,MAAM,OAAO,MAAM,CAAE,CAAA,CAAC,GAAE;AACvD,kBAAY,WAAW;AACvB,kBAAY,iBAAiB,MAAM,CAAA;IAAA;AAE/B,UAAAG,MAAI,cAAS,IAAO,MAAhB,mBAAgB;AAC1B,QAAI,CAAC,QAAQA,EAAC,KAAK,CAAC,OAAOA,EAAC,GAAG;AACjB,kBAAA,QAAQ,SAAS,IAAM,EAAA;IAAA;AAErC,SAAK,SAAS,IAAQ,IAAA;AACjB,uBAAA,mBAAkB,IAAI,aAAa,WAAW;EAAA;AACrD;AAGF,sBAAoB,WAAA;AACZ,QAAA,aAAa,KAAK,GAAG,oBAAoB,KAAK,QAAQ,KAAK,GAAG,iBAAiB;AACrF,QAAM,YAAsB,CAAA;AAC5B,WAASH,KAAI,GAAGA,KAAI,YAAYA,MAAK;AACnC,UAAM,aAAa,KAAK,GAAG,gBAAgB,KAAK,QAAQA,EAAC;AACzD,QAAI,CAAC;AAAY;AACjB,UAAM,WAAW,KAAK,GAAG,kBAAkB,KAAK,QAAQ,WAAW,IAAI;AACvE,cAAU,QAAA,IAAY,WAAW;AAC5B,uBAAA,qBAAoB,IAAI,YAAY,QAAQ;EAAA;AAE9C,OAAA,iBAAiB,UAAU,KAAK,EAAE;AAAA;;ACphB3C,IAAqB,YAArB,cAAuC,QAA0B;EAuB/D,YAAY,UAAoB,UAAqC,CAAA,GAAI;AACvE,UAAM,KAAK,SAAS;AACpB,UAAMyD,kBAAiB;MACrB,QAAQ,GAAG;MACX,MAAM,GAAG;MACT,QAAQ,GAAG;MACX,gBAAgB,QAAQ,UAAU,GAAG;MACrC,OAAO,GAAG;MACV,OAAO,GAAG;MACV,OAAO,GAAG;MACV,iBAAiB;MACjB,WAAW,GAAG;MACd,WAAW,GAAG;MACd,kBAAkB;MAClB,iBAAiB;MACjB,OAAO;MACP,OAAO;MACP,OAAO;IAAA;AAGT,UAAM,MAAM,OAAO,OAAO,CAAA,GAAIA,iBAAgB,OAAO;AAC/C,UAAA,UAAU,KAAK,KAAK;AAvCrB,uCAAc;AAKd,uCAAc;AAKd;AAEP,uBAAAD,SAAyB,CAAA;AA6BvB,SAAK,cAAc;AACd,SAAA,QAAQ,KAAK,QAAQ;AAC1B,uBAAKA,SAAO,UAAU;AACtB,SAAK,OAAO;EAAA;EAMd,IAAI,KAA6B;AAC/B,WAAO,KAAK,SAAS;EAAA;EAUvB,QAAQ,OAAO,QAAQ,KAAK,OAAO,SAAS,KAAK,QAAQ,QAAQ,KAAK,OAAO;AAC3E,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,cAAc;EAAA;EAOrB,WAAW,SAAoC;AAC7C,SAAK,UAAU,OAAO,OAAO,KAAK,SAAS,OAAO;AAC7C,SAAA,QAAQ,KAAK,QAAQ;AACrB,SAAA,SAAS,KAAK,QAAQ;AACtB,SAAA,QAAQ,KAAK,QAAQ;AAC1B,SAAK,cAAc;EAAA;EAOrB,OAAO,QAAQ,GAAG;AACV,UAAA,aAAa,EAAE,KAAK,UAAU,mBAAKA,SAAO,SAAS,CAAC,KAAK;AACzD,UAAA,UACJ,cACA,KAAK,cAAc,aAAa,KAAA,MAAW,KAAK,MAChD,KAAK,cAAc,sBAAsB;AAC3C,QAAI,SAAS;AACN,WAAA,cAAc,iBAAiB,KAAK;AACzC,WAAK,KAAK,KAAK;IAAA;AAEjB,QAAI,CAAC;AAAY;AACjB,SAAK,cAAc;AACnB,QAAI,KAAK,QAAQ,UAAU,mBAAKA,SAAO,OAAO;AACvC,WAAA,GAAG,cAAc,KAAK,QAAQ,KAAK,GAAG,gBAAgB,KAAK,QAAQ,KAAe;AAClF,yBAAAA,SAAO,QAAQ,KAAK,QAAQ;IAAA;AAEnC,QAAI,KAAK,QAAQ,UAAU,mBAAKA,SAAO,OAAO;AACvC,WAAA,GAAG,cAAc,KAAK,QAAQ,KAAK,GAAG,gBAAgB,KAAK,QAAQ,KAAe;AAClF,yBAAAA,SAAO,QAAQ,KAAK,QAAQ;IAAA;AAEnC,QAAI,KAAK,QAAQ,UAAU,mBAAKA,SAAO,OAAO;AACvC,WAAA,GAAG,cAAc,KAAK,QAAQ,KAAK,GAAG,gBAAgB,KAAK,QAAQ,KAAe;AAClF,yBAAAA,SAAO,QAAQ,KAAK,QAAQ;IAAA;AAEnC,QAAI,KAAK,QAAQ,cAAc,mBAAKA,SAAO,WAAW;AACpD,WAAK,GAAG;QACN,KAAK;QACL,KAAK,GAAG;QACR,KAAK,QAAQ;MAAA;AAEV,yBAAAA,SAAO,YAAY,KAAK,QAAQ;IAAA;AAEvC,QAAI,KAAK,QAAQ,cAAc,mBAAKA,SAAO,WAAW;AACpD,WAAK,GAAG;QACN,KAAK;QACL,KAAK,GAAG;QACR,KAAK,QAAQ;MAAA;AAEV,yBAAAA,SAAO,YAAY,KAAK,QAAQ;IAAA;AAEvC,QAAI,KAAK,QAAQ,UAAU,KAAK,cAAc,OAAO;AACnD,WAAK,GAAG,YAAY,KAAK,GAAG,qBAAqB,KAAK,QAAQ,KAAgB;AACzE,WAAA,cAAc,QAAQ,KAAK,QAAQ;IAAA;AAE1C,QAAI,KAAK,QAAQ,qBAAqB,KAAK,cAAc,kBAAkB;AACzE,WAAK,GAAG;QACN,KAAK,GAAG;QACR,KAAK,QAAQ;MAAA;AAEV,WAAA,cAAc,mBAAmB,KAAK,QAAQ;IAAA;AAErD,QAAI,KAAK,QAAQ,oBAAoB,KAAK,cAAc,iBAAiB;AACvE,WAAK,GAAG,YAAY,KAAK,GAAG,kBAAkB,KAAK,QAAQ,eAAyB;AAC/E,WAAA,cAAc,kBAAkB,KAAK,QAAQ;IAAA;AAGhD,QAAA,KAAK,QAAQ,cAAc,KAAK,QAAQ,eAAe,KAAK,cAAc,YAAY;AACxF,YAAM,8BACJ,KAAK,GAAG,aAAa,gCAAgC,KACrD,KAAK,GAAG,aAAa,oCAAoC,KACzD,KAAK,GAAG,aAAa,uCAAuC;AAC9D,UAAI,6BAA6B;AACzB,cAAA,MAAM,KAAK,GAAG;UAClB,4BAA4B;QAAA;AAE1B,YAAArD,KAAI,KAAK,QAAQ;AACjB,YAAA,KAAK,QAAQ,aAAa,KAAK;AAC7B,UAAAA,KAAA;AACI,kBAAA;YACN,2EAA2E,GAAA;UAAA;QAC7E;AAEF,aAAK,GAAG;UACN,KAAK;UACL,4BAA4B;UAC5BA;QAAA;MACF;AAEG,WAAA,cAAc,aAAa,KAAK,QAAQ;IAAA;AAG/C,QAAI,KAAK,OAAO;AACV,UAAA,KAAK,MAAM,OAAO;AACf,aAAA,QAAQ,KAAK,MAAM;AACnB,aAAA,SAAS,KAAK,MAAM;MAAA;AAG3B,UAAI,KAAK,SAAS,YAAY,SAAS,KAAK,QAAQ,MAAM,GAAG;AAC3D,aAAK,GAAG;UACN,KAAK;UACL,KAAK,QAAQ;UACb,KAAK,QAAQ;UACb,KAAK;UACL,KAAK;UACL,KAAK;UACL;UACA,KAAK,QAAQ;UACb,KAAK,QAAQ;UACb,KAAK;UACL,KAAK,QAAQ;QAAA;MACf,OACK;AACL,YAAI,YAAY,OAAO,KAAK,KAAK,GAAG;AAClC,eAAK,GAAG;YACN,KAAK;YACL,KAAK,QAAQ;YACb,KAAK,QAAQ;YACb,KAAK;YACL,KAAK;YACL,KAAK;YACL;YACA,KAAK,QAAQ;YACb,KAAK,QAAQ;YACb,KAAK;UAAA;QACP,OACK;AACL,eAAK,GAAG;YACN,KAAK;YACL,KAAK,QAAQ;YACb,KAAK,QAAQ;YACb,KAAK;YACL,KAAK;YACL,KAAK;YACL;YACA,KAAK,QAAQ;YACb,KAAK,QAAQ;YACb,KAAK;UAAA;QACP;MACF;AAGE,UAAA,KAAK,QAAQ,iBAAiB;AAChC,YACE,KAAK,SAAS,YACb,aAAa,KAAK,MAAM,KAAK,KAAK,aAAa,KAAK,MAAM,MAAM,GACjE;AACK,eAAA,GAAG,eAAe,KAAK,MAAM;QAAA,OAC7B;AACL,eAAK,QAAQ,kBAAkB;AAC1B,eAAA,QAAQ,QAAQ,KAAK,GAAG;AACxB,eAAA,QAAQ,QAAQ,KAAK,QAAQ;AAC7B,eAAA,QAAQ,YAAY,KAAK,GAAG;QAAA;MACnC;IACF,OACK;AACD,UAAA,KAAK,QAAQ,GAAG;AAClB,aAAK,GAAG;UACN,KAAK;UACL,KAAK,QAAQ;UACb,KAAK,QAAQ;UACb,KAAK;UACL,KAAK;UACL,KAAK;UACL;UACA,KAAK,QAAQ;UACb,KAAK,QAAQ;UACb;QAAA;MACF,OACK;AACL,aAAK,GAAG;UACN,KAAK;UACL;UACA,KAAK,GAAG;UACR;UACA;UACA,KAAK;UACL;UACA,KAAK,GAAG;UACR,KAAK,GAAG;UACR;QAAA;MACF;IACF;AAEG,uBAAAqD,SAAO,QAAQ,KAAK;AACzB,uBAAKA,SAAO,WAAW;EAAA;EAMzB,cAAc;AACZ,uBAAKA,SAAS;MACZ,SAAS;IAAA;EACX;EAMF,WAAmB;AACjB,WAAO,aAAa,KAAK,EAAM,IAAA,KAAK,KAAA,IAAS,KAAK,MAAA;EAAA;AAEtD;AAzQEA,UAAA;ACzBF,IAAM,WAAW,IAAI,QAAQ;AAC7B,IAAM,YAAY,IAAI,QAAQ;AAC9B,IAAM,YAAY,IAAI,QAAQ;AAE9B,IAAM,8BAA8B;;AAKpC,IAAqB,SAArB,cAAoC,SAAS;EA0D3C,YAAY;IACV,OAAO;IACP,MAAM;IACN,MAAM;IACN,SAAS;IACT;IACA,OAAO;EAAA,IACU,CAAA,GAAqB;AAChC,UAAA;AA9DD;AAKA;AAKA;AAKA;AAKA;AAKP;AAKA;AAKA;AAKA;AAKA;AAKA,uBAAAE;AAEO;AAeL,SAAK,aAAa;AACb,SAAA,mBAAmB,IAAI,iBAAiB;AACxC,SAAA,aAAa,IAAI,QAAQ;AACzB,SAAA,uBAAuB,IAAI,iBAAiB;AAC5C,SAAA,gBAAgB,IAAI,QAAQ;AAC5B,SAAA,UAAU,IAAI,QAAQ;AAC3B,uBAAK,OAAQ;AACb,uBAAK,MAAO;AACZ,uBAAK,MAAO;AACZ,uBAAK,SAAU;AACf,uBAAKA,UAAU;AACf,uBAAK,OAAQ;AACP,UAAA;MACJ;MACA;MACA;MACA;IAAA,IACE,UAAU,CAAA;AACT,SAAA,aAAa,QAAQ,QAAQ,iBAAiB;AAC/C,QAAA,KAAK,eAAe,gBAAgB;AACtC,WAAK,aAAa,MAAM,OAAO,KAAK,QAAQ,MAAM,KAAK,IAAI;IAAA,OACtD;AACL,WAAK,YAAY,KAAK,QAAQ,MAAM,GAAG;IAAA;EACzC;EAMF,IAAI,OAAO;AACT,WAAO,mBAAK;EAAA;EAOd,IAAI,KAAKP,IAAW;AAClB,uBAAK,OAAQA;AACb,SAAK,uBAAuB;EAAA;EAM9B,IAAI,MAAM;AACR,WAAO,mBAAK;EAAA;EAOd,IAAI,IAAID,IAAW;AACjB,uBAAK,MAAOA;AACZ,SAAK,uBAAuB;EAAA;EAM9B,IAAI,MAAM;AACR,WAAO,mBAAK;EAAA;EAOd,IAAI,IAAIA,IAAW;AACjB,uBAAK,MAAOA;AACZ,SAAK,uBAAuB;EAAA;EAM9B,IAAI,SAAS;AACX,WAAO,mBAAK;EAAA;EAOd,IAAI,OAAO,QAAgB;AACzB,uBAAK,SAAU;AACf,SAAK,uBAAuB;EAAA;EAM9B,IAAI,OAAO;AACT,WAAO,mBAAK;EAAA;EAOd,IAAI,KAAK,MAAc;AACrB,uBAAK,OAAQ;AACb,SAAK,uBAAuB;EAAA;EAM9B,IAAI,SAAS;AACX,WAAO,mBAAKQ;EAAA;EAOd,IAAI,OAAO,QAA2B;AACpC,uBAAKA,UAAU;AACf,SAAK,uBAAuB;EAAA;EAU9B,YAAY,MAAM,KAAK,KAAK,SAAS,KAAK,QAAQ,OAAO,KAAK,MAAM,MAAM,KAAK,KAAK;AAClF,uBAAK,MAAO;AACZ,uBAAK,SAAU;AACf,uBAAK,OAAQ;AACb,uBAAK,MAAO;AACZ,SAAK,iBAAiB,gBAAgB,KAAK,QAAQ,MAAM,GAAG;AAC5D,SAAK,aAAa;EAAA;EAcpB,aAAa,MAAM,OAAO,KAAK,QAAQ,OAAO,KAAK,MAAM,MAAM,KAAK,KAAK,OAAO,GAAG;AACjF,uBAAKA,UAAU;MACb;MACA;MACA;MACA;IAAA;AAEF,SAAK,OAAO;AACZ,SAAK,MAAM;AACX,SAAK,iBAAiB;MACpB,OAAO;MACP,QAAQ;MACR,MAAM;MACN,SAAS;MACT;MACA;IAAA;AAEF,SAAK,aAAa;AAClB,SAAK,iBAAiB,QAAQ,KAAK,SAAS,mBAAKA,UAAQ,MAAM,mBAAKA,UAAQ,OAAO,mBAAKA,UAAQ,KAAK,mBAAKA,UAAQ,QAAQ,mBAAK,QAAO,mBAAK,KAAI;EAAA;EAOjJ,OAAOpD,IAAG;AACF,UAAA,OAAOA,IAAG,IAAI;AACb,WAAA;EAAA;EAQT,oBAAoB;AAClB,UAAM,kBAAkB;AACnB,SAAA,WAAW,OAAO,KAAK,WAAW;AAClC,SAAA,YAAY,eAAe,KAAK,aAAa;AAClD,SAAK,qBAAqB,SAAS,KAAK,kBAAkB,KAAK,UAAU;AAClE,WAAA;EAAA;EAQT,sBAAsB,MAAM,cAAc,KAAK,aAAa;AACtD,QAAA,CAAC,KAAK,SAAS,WAAW;AAAiB,aAAA;AAE/C,QAAI,CAAC,KAAK,SAAS,UAAU,KAAK,SAAS,OAAO,WAAW;AAAU,WAAK,SAAS,sBAAsB;AAEvG,QAAA,CAAC,KAAK,SAAS;AAAe,aAAA;AAElC,UAAM,SAAS;AACf,WAAO,KAAK,KAAK,SAAS,OAAO,MAAM;AACvC,WAAO,aAAa,WAAW;AAE/B,UAAM,SAAS,KAAK,SAAS,OAAO,SAAS,YAAY,kBAAkB;AAEpE,WAAA,KAAK,wBAAwB,QAAQ,MAAM;EAAA;EAQpD,wBAAwB,QAAQ,QAAQ;AACtC,UAAM,SAAS;AAEf,aAASN,KAAI,GAAGA,KAAI,GAAGA,MAAK;AACpB,YAAA,QAAQ,KAAK,QAAQA,EAAA;AACrB,YAAAe,YAAW,OAAO,KAAK,KAAK,EAAE,IAAI,MAAM,IAAI,MAAM;AACxD,UAAIA,YAAW,CAAC;AAAe,eAAA;IAAA;AAE1B,WAAA;EAAA;EAOT,QAAQZ,IAAG;AACP,IAAAA,GAAA,aAAa,KAAK,UAAU;AAC5B,IAAAA,GAAA,aAAa,KAAK,gBAAgB;AAC7B,WAAA;EAAA;EAGT,UAAUA,IAAG;AACX,IAAAA,GAAE,aAAa,SAAS,OAAO,KAAK,gBAAgB,CAAC;AACnD,IAAAA,GAAA,aAAa,KAAK,WAAW;AACxB,WAAA;EAAA;EAMT,yBAAyB;AACjB,UAAA,IAAI,MAAM,2BAA2B;EAAA;AAE/C;AArSE;AAKA;AAKA;AAKA;AAKA;AAKAuD,WAAA;AClHF,IAAqB,oBAArB,cAA+C,OAAO;EACpD,YAAY,KAAK,QAAQ,MAAM,KAAK;AAC5B,UAAA;MACJ;MACA;MACA;MACA;IAAA,CACD;EAAA;EAMH,yBAAyB;AAClB,SAAA,iBAAiB,gBAAgB,KAAK,KAAK,KAAK,QAAQ,KAAK,MAAM,KAAK,GAAG;EAAA;AAEpF;ACfA,IAAqB,qBAArB,cAAgD,OAAO;EACrD,YAAY,MAAM,OAAO,KAAK,QAAQ,MAAM,KAAK,OAAO,GAAG;AACnD,UAAA;MACJ,QAAQ;QACN;QACA;QACA;QACA;MAAA;MAEF;MACA;MACA;IAAA,CACD;EAAA;EAMH,yBAAyB;AACjB,UAAA;MACJ;MACA;MACA;MACA;IAAA,IACE,KAAK;AACH,UAAA,EAAE,KAAA,IAAS;AACjB,SAAK,iBAAiB;MACpB,OAAO;MACP,QAAQ;MACR,MAAM;MACN,SAAS;MACT,KAAK;MACL,KAAK;IAAA;EACP;AAEJ;",
  "names": ["r", "t", "n", "e", "u", "a", "o", "i", "s", "h", "r", "t", "n", "e", "u", "i", "a", "j", "l", "a", "b", "c", "i", "e", "s", "v", "time", "r", "t", "h", "x", "y", "add", "subtract", "multiply", "divide", "scale", "distance", "length", "squaredDistance", "angle", "dot", "equals", "cross", "negate", "inverse", "lerp", "normalize", "transformMat3", "transformMat4", "tempArray", "w", "m", "set", "invert", "copy", "scaleAndAdd", "transformQuat", "identity", "transpose", "adjoint", "determinant", "translate", "rotate", "fromTranslation", "fromRotation", "fromScaling", "fromQuat", "_changeCallbacks", "o", "d", "u", "f", "n", "g", "index", "_id", "BlendType", "_state", "defaultOptions", "_bounds"]
}
