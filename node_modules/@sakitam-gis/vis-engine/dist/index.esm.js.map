{"version":3,"file":"index.esm.js","sources":["../src/utils/shader.ts","../src/utils/math.ts","../src/utils/gl.ts","../src/utils/index.ts","../src/animation/Clock.ts","../src/animation/Raf.ts","../src/core/Event.ts","../src/math/Vector.ts","../src/math/Vector2.ts","../src/math/Quaternion.ts","../src/math/Vector3.ts","../src/math/Vector4.ts","../src/math/Matrix.ts","../src/math/Matrix3.ts","../src/math/Matrix4.ts","../src/math/Euler.ts","../node_modules/.pnpm/colord@2.9.3/node_modules/colord/plugins/names.mjs","../src/math/Color.ts","../src/math/ProjectionMatrix.ts","../src/objects/Object3D.ts","../src/core/Base.ts","../src/core/BufferAttribute.ts","../src/core/Geometry.ts","../src/objects/Mesh.ts","../src/objects/Scene.ts","../src/core/State.ts","../src/core/Renderer.ts","../src/core/Resource.ts","../src/core/RenderBuffer.ts","../src/core/Texture.ts","../src/core/DataTexture.ts","../src/core/RenderTarget.ts","../src/geometries/Plane.ts","../src/geometries/Box.ts","../src/core/Shader.ts","../src/core/Program.ts","../src/core/Texture3D.ts","../src/cameras/Camera.ts","../src/cameras/PerspectiveCamera.ts","../src/cameras/OrthographicCamera.ts"],"sourcesContent":["import { DataType } from '../core/BufferAttribute';\n\nexport function parseShader(shader, defines: string[] = [], includes = []) {\n  return shader.replace(/#defines/, defines.join('\\n')).replace(/#includes/, includes.join('\\n'));\n}\n\nexport function defineShader(shader, defines = {}) {\n  return Object.keys(defines).reduce((str, key) => (defines[key] ? `#define ${key} ${defines[key]}\\n${str}` : str), shader);\n}\n\n/** Extracts GLSLIFY style naming of shaders: `#define SHADER_NAME ...` */\nexport function getShaderName(shader: string, defaultName: string = 'unnamed'): string {\n  const SHADER_NAME_REGEXP = /#define\\s*SHADER_NAME\\s*([A-Za-z0-9_-]+)\\s*/;\n  const match = shader.match(SHADER_NAME_REGEXP);\n  return match ? match[1] : defaultName;\n}\n\n/**\n * 根据顶点索引重新构建 `Wireframe` 索引\n * @param position 顶点数据\n * @param indices 索引数据\n * @param numIndices 索引数量\n * @param data 原始索引数据\n */\nexport function getWireframeIndex(position: DataType, indices: number[], numIndices: number, data?: Uint16Array | Uint32Array) {\n  const edges = new Set();\n  if (data) {\n    for (let j = 0, l = numIndices; j < l; j += 3) {\n      const a = data[j];\n      const b = data[j + 1];\n      const c = data[j + 2];\n\n      const array = [a, b, b, c, c, a];\n\n      for (let i = 0; i < array.length; i += 2) {\n        if (isUniqueEdge(array[i] * 3, array[i + 1] * 3, position, edges)) {\n          indices.push(array[i], array[i + 1]);\n        }\n      }\n    }\n  } else {\n    for (let j = 0, l = numIndices; j < l; j += 3) {\n      const a = j;\n      const b = j + 1;\n      const c = j + 2;\n\n      const array = [a, b, b, c, c, a];\n\n      for (let i = 0; i < array.length; i += 2) {\n        if (isUniqueEdge(array[i] * 3, array[i + 1] * 3, position, edges)) {\n          indices.push(array[i], array[i + 1]);\n        }\n      }\n    }\n  }\n\n  return indices;\n}\n\n/**\n * 判断是否是独立的边\n * @param start\n * @param end\n * @param position\n * @param edges\n */\nexport function isUniqueEdge(start, end, position, edges) {\n  const hash1 = `${position[start]},${position[start + 1]},${position[start + 2]}-${position[end]},${position[end + 1]},${position[end + 2]}`;\n  const hash2 = `${position[end]},${position[end + 1]},${position[end + 2]}-${position[start]},${position[start + 1]},${position[start + 2]}`; // coincident edge\n  if (edges.has(hash1) === true || edges.has(hash2) === true) {\n    return false;\n  } else {\n    edges.add(hash1);\n    edges.add(hash2);\n    return true;\n  }\n}\n","import { glMatrix } from 'gl-matrix';\n\nexport const DEG_TO_RAD = Math.PI / 180;\nexport const RAD_TO_DEG = 180 / Math.PI;\n\n/**\n * 度转弧度\n * @param deg 度\n */\nexport function degToRad(deg: number) {\n  return deg * DEG_TO_RAD;\n}\n\n/**\n * 弧度转度\n * @param a 弧度\n */\nexport function radToDeg(a: number) {\n  return a * RAD_TO_DEG;\n}\n\n/**\n * 将值限定在最大最小值中间\n * @param val 当前值\n * @param min 最小值\n * @param max 最大值\n */\nexport function clamp(val: number, min: number, max: number) {\n  return Math.min(Math.max(val, min), max);\n}\n\n/**\n * 判断数值是否是 2 的 n 次方\n * @param value\n */\nexport function isPowerOfTwo(value) {\n  return (Math.log(value) / Math.LN2) % 1 === 0;\n}\n\nlet FloatArray: Float32ArrayConstructor | Float64ArrayConstructor = Float32Array;\n\n/**\n * 设置是否使用双精度浮点数\n * @param b\n * @param notifyGlMatrix 如果不想影响 `gl-matrix` 的构造器，需要设定为 `false`，这在我们公用 `gl-matrix` 并且其他库使用构造器的 `instanceof`\n * 做相关判断时可以避免受到影响。\n */\nexport function highPrecision(b: boolean, notifyGlMatrix = true) {\n  if (b) {\n    FloatArray = Float64Array;\n  } else {\n    FloatArray = Float32Array;\n  }\n\n  if (notifyGlMatrix) {\n    glMatrix.setMatrixArrayType(FloatArray as unknown as any);\n  }\n}\n\n/**\n * 获取 FloatArray 构造器\n */\nexport function getFloatArrayConstructor() {\n  return FloatArray;\n}\n","/**\n * 判断是否是 webgl\n * @param gl\n */\nexport function isWebGL(gl: any): boolean {\n  if (typeof WebGLRenderingContext !== 'undefined' && gl instanceof WebGLRenderingContext) {\n    return true;\n  }\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n  // wrap maptalks group layer\n  if (\n    gl?.gl &&\n    (gl.gl instanceof WebGLRenderingContext || gl.gl instanceof WebGL2RenderingContext)\n  ) {\n    return true;\n  }\n  // Look for debug contexts, headless gl etc\n  return Boolean(gl && Number.isFinite(gl._version));\n}\n\n/**\n * 判断是否是 webgl2\n * @param gl\n */\nexport function isWebGL2(gl: any): boolean {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n  // wrap maptalks group layer\n  if (gl?.gl && gl.gl instanceof WebGL2RenderingContext) {\n    return true;\n  }\n  // Look for debug contexts, headless gl etc\n  return Boolean(gl && gl._version === 2);\n}\n\nexport interface GlOptions {\n  /**\n   * 指定画布是否包含alpha缓冲区\n   */\n  alpha: boolean;\n  /**\n   * 指定是否开启抗锯齿。\n   */\n  antialias: boolean;\n  /**\n   * 指定是否开启深度检测。\n   */\n  depth: boolean;\n  /**\n   *  表示绘图缓冲区的深度缓冲区至少为16位。\n   */\n  desynchronized: boolean;\n  /**\n   * 指定是否开启模板缓冲区。\n   */\n  stencil: boolean;\n  /**\n   * 指定如果系统性能较低，是否创建上下文。\n   */\n  failIfMajorPerformanceCaveat: boolean;\n  /**\n   * 指定是否开启预乘alpha。\n   */\n  premultipliedAlpha: boolean;\n  /**\n   * 是否开启绘制缓冲区。\n   */\n  preserveDrawingBuffer: boolean;\n  /**\n   * 指定GPU的性能配置。\n   */\n  powerPreference: WebGLPowerPreference;\n}\n\n/**\n * 获取 webgl 实例\n * @param canvas\n * @param glOptions\n * @param requestWebGl2\n * @returns {null}\n */\nexport function getContext(\n  canvas: HTMLCanvasElement,\n  glOptions: Partial<GlOptions> = {},\n  requestWebGl2 = false,\n) {\n  const names = ['webgl2', 'webgl', 'experimental-webgl'];\n  if (!requestWebGl2) {\n    names.shift();\n  }\n  let context: WebGLRenderingContext | null = null;\n\n  function onContextCreationError(error: any) {\n    console.error(error.statusMessage);\n  }\n\n  canvas?.addEventListener?.('webglcontextcreationerror', onContextCreationError, false);\n  for (let ii = 0; ii < names.length; ++ii) {\n    try {\n      context = canvas.getContext(names[ii], glOptions) as WebGLRenderingContext;\n    } catch (e) {} // eslint-disable-line\n    if (context) {\n      break;\n    }\n  }\n\n  canvas?.removeEventListener?.('webglcontextcreationerror', onContextCreationError, false);\n\n  return context;\n}\n","export * from './shader';\nexport * from './math';\nexport * from './gl';\n\n/**\n * 获取当前秒数，自动回退\n * @return number\n */\nexport const now = () => ('undefined' == typeof performance ? Date : performance).now();\n\n/**\n * 返回数据类型\n * @param value\n * @return string\n */\nexport function typeOf(value: any): string {\n  return Object.prototype.toString.call(value).slice(8, -1).toLowerCase();\n}\n\n/**\n * 判断是否是字符串\n * @param s\n * @return boolean\n */\nexport function isString(s: any): s is string {\n  return typeOf(s) === 'string';\n}\n\n/**\n * 判断是否是 undefined\n * @param s\n * @return boolean\n */\nexport function isUndef(s: any): s is undefined {\n  return typeOf(s) === 'undefined';\n}\n\n/**\n * 简单判断是否是 16 进制字符串（需要完善）\n * @param string\n */\nexport function isHex(string) {\n  return isString(string) && string.includes('%');\n}\n\n/**\n * 判断是否是数字\n * @param s\n * @return boolean\n */\nexport function isNumber(s: any): s is number {\n  return typeOf(s) === 'number';\n}\n\n/**\n * 判断是否是正则\n * @param obj\n */\nexport function isRegexp(obj: any): obj is RegExp {\n  return typeOf(obj) === 'regexp';\n}\n\n/**\n * 判断是否是 null\n * @param value\n */\nexport function isNull(value) {\n  return value == null;\n}\n\n/**\n * 判断是否是对象\n * @param value\n */\nexport function isObject(value) {\n  const type = typeof value;\n  return value !== null && (type === 'object' || type === 'function');\n}\n\nexport function hasValue(v, state) {\n  if (isObject(v)) {\n    return !isNull(v.value) && (isNull(state) || v.value === state);\n  } else {\n    return !isNull(v) && (isNull(state) || v === state);\n  }\n}\n\nconst uidCounters: Record<string, number> = {};\n\n/**\n * 获取 uid\n * @param id= - Identifier base name\n * @return uid\n **/\nexport function uid(id = 'id'): string {\n  uidCounters[id] = uidCounters[id] || 1;\n  const count = uidCounters[id]++;\n  return `${id}-${count}`;\n}\n\n/**\n * 排除对象的 key\n * @param obj\n * @param keys\n */\nexport function omit<T, K extends keyof T>(obj: T, keys: K[] = []): Omit<T, K> {\n  return Object.keys(obj as any)\n    .filter((key: any) => keys.indexOf(key) < 0)\n    .reduce(\n      (newObj: Omit<T, K>, key) =>\n        Object.assign(newObj, {\n          [key]: obj[key],\n        }),\n      {} as Omit<T, K>,\n    );\n}\n\n/**\n * pick object\n * @param obj\n * @param keys\n */\nexport function pick<T, K extends keyof T>(obj: T, keys: K[] = []): Omit<T, K> {\n  return Object.keys(obj as any)\n    .filter((key: any) => keys.indexOf(key) > -1)\n    .reduce(\n      (newObj: Omit<T, K>, key) =>\n        Object.assign(newObj, {\n          [key]: obj[key],\n        }),\n      {} as Omit<T, K>,\n    );\n}\n\nconst callbacks: any[] = [];\nconst fpsInterval = 1000 / 60;\nlet time = performance.now();\n\nfunction requestAnimationFrameLoop() {\n  const current = now();\n  const delta = current - time;\n  if (delta >= fpsInterval) {\n    // Adjust next execution time in case this loop took longer to execute\n    time = current - (delta % fpsInterval);\n    // Clone array in case callbacks pushes more functions to it\n    const funcs = callbacks.slice();\n    callbacks.length = 0;\n    for (let i = 0; i < funcs.length; i++) {\n      funcs[i] && funcs[i](current, delta);\n    }\n  } else {\n    setImmediate(requestAnimationFrameLoop);\n  }\n}\n\nfunction raf(func) {\n  callbacks.push(func);\n  if (callbacks.length === 1) {\n    setImmediate(requestAnimationFrameLoop);\n  }\n  return callbacks.length - 1;\n}\n\nfunction caf(id: any) {\n  callbacks[id] = undefined;\n}\n\nexport function requestAnimationFrame(cb) {\n  if (typeof window !== 'undefined' && window.requestAnimationFrame) {\n    return window.requestAnimationFrame(cb);\n  }\n\n  return raf(cb);\n}\n\nexport function cancelAnimationFrame(cb) {\n  if (typeof window !== 'undefined' && window.cancelAnimationFrame) {\n    return window.cancelAnimationFrame(cb);\n  }\n\n  return caf(cb);\n}\n","import { now } from '../utils';\n\n/**\n * 时钟对象，默认内部会使用 [performance.now](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now) 否则会\n * 回退到 `Date.now()`.\n * ```ts\n * const clock = new Clock();\n * ```\n */\nexport default class Clock {\n  /**\n   * 上次标记的时间\n   * @private\n   */\n  #lastTime = 0;\n\n  /**\n   * 间隔时间\n   * @private\n   */\n  #elapsedTime = 0;\n\n  /**\n   * 时钟是否启动\n   * @private\n   */\n  #start = false;\n\n  public running: boolean;\n\n  /**\n   * Constructor\n   * @param running 时钟状态\n   */\n  constructor (running = true) {\n    this.running = running;\n  }\n\n  /**\n   * 启动时钟\n   */\n  start () {\n    if (!this.#start) {\n      this.reset();\n      this.#start = true;\n    }\n  }\n\n  /**\n   * 停止时钟\n   */\n  stop () {\n    this.getElapsedTime();\n    this.#start = false;\n    this.running = false;\n  }\n\n  /**\n   * 重置时钟状态\n   */\n  reset () {\n    this.#lastTime = now();\n    this.#elapsedTime = 0;\n  }\n\n  /**\n   * 获取自时钟启动以来经过的秒数\n   */\n  getElapsedTime () {\n    this.getDelta();\n    return this.#elapsedTime;\n  }\n\n  /**\n   * 计算时钟总启动时间，并将当前时间设置赋值到 `lastTime`\n   */\n  getDelta () {\n    let deltaTime = 0;\n    if (this.running && !this.#start) {\n      this.start();\n      return 0;\n    }\n    if (this.#start) {\n      const time = now();\n      deltaTime = (time - this.#lastTime) / 1000;\n      this.#lastTime = time;\n      this.#elapsedTime = this.#elapsedTime + deltaTime;\n    }\n    return deltaTime;\n  }\n}\n","import Clock from './Clock';\nimport { requestAnimationFrame, cancelAnimationFrame } from '../utils';\n\n/**\n * Raf 配置项\n */\nexport interface RafOptions {\n  /**\n   * @defaultValue `true`, 是否在创建 raf 实例后自动启动\n   */\n  autoStart: boolean;\n}\n\nconst defaultOptions: Partial<RafOptions> = {\n  autoStart: true,\n};\n\n/**\n * 优化的 raf 管理\n * ```ts\n * const raf = new Raf();\n * ```\n */\nexport default class Raf {\n  public options: Partial<RafOptions>;\n  #raf: number;\n  #animating: boolean;\n  #isVisible: boolean;\n\n  #clock: Clock;\n\n  #callback: () => void;\n\n  constructor(cb, options: Partial<RafOptions> = {}) {\n    this.options = {\n      ...options,\n      ...defaultOptions,\n    };\n    this.#clock = new Clock();\n\n    this.reset();\n\n    this.onVisibilityChange = this.onVisibilityChange.bind(this);\n\n    this.#callback = () => {\n      const time = this.#clock.getElapsedTime();\n      cb && cb(time);\n    };\n    if (this.options.autoStart) {\n      this.start();\n    }\n  }\n\n  /**\n   * 获取当前页面是否可见\n   */\n  public get visible() {\n    return this.#isVisible;\n  }\n\n  /**\n   * 获取当前`raf` 状态\n   */\n  public get animating() {\n    return this.#animating;\n  }\n\n  /**\n   * 重置当前 `raf` 状态\n   */\n  public reset() {\n    this.#animating = false;\n    this.#isVisible = true;\n    if (this.#raf !== undefined) {\n      cancelAnimationFrame(this.#raf);\n    }\n  }\n\n  /**\n   * 获取总时长\n   */\n  public get elapsedTime() {\n    return this.#clock.getElapsedTime();\n  }\n\n  /**\n   * 启动 `raf`\n   */\n  public start() {\n    // 如果已经启动，不需要再次启动\n    if (this.#animating) return;\n\n    this.#animating = true;\n    this.#clock.start();\n    this.tick();\n\n    if (typeof window !== 'undefined' && window.document) {\n      window.document.addEventListener('visibilitychange', this.onVisibilityChange, false);\n    }\n  }\n\n  /**\n   * 停止 `raf`\n   */\n  public stop() {\n    this.#clock.stop();\n    this.reset();\n    if (typeof window !== 'undefined' && window.document) {\n      window.document.removeEventListener('visibilitychange', this.onVisibilityChange, false);\n    }\n  }\n\n  public tick() {\n    if (!this.#animating || !this.#isVisible) return;\n    // @tip 注意如果需要进行锁帧，需要在此处进行逻辑处理\n    this.#raf = requestAnimationFrame(() => {\n      this.tick();\n    });\n    this.#callback();\n  }\n\n  /**\n   * 处理页面可见和不可见逻辑\n   * @private\n   */\n  private onVisibilityChange() {\n    if (typeof window !== 'undefined' && window.document) {\n      this.#isVisible = !window.document.hidden;\n    }\n\n    if (this.#isVisible) {\n      this.reset();\n      this.start();\n    }\n  }\n}\n","import { isString, isRegexp } from '../utils';\n\ntype Keys<T> = Extract<keyof T, string>;\n\nexport type IOptions = {\n  /**\n   * 指定事件名称的合法值的正则表达式\n   */\n  validEventTypes?: RegExp[];\n};\n\nclass Event {\n  public readonly type: string;\n\n  constructor(type: string, params = {}) {\n    this.type = type;\n    (Object.getOwnPropertyNames(params) || []).forEach((key) => {\n      this[key] = params[key];\n    });\n  }\n}\n\n/**\n * 事件中心（实现的发布订阅者模式）\n *\n * 简单使用：\n * ```\n * const e = new EventEmitter();\n *\n * const handler = (data) => {\n *   console.log(data);\n * };\n *\n * e.on('eventName', handler);\n *\n * e.emit('eventName', { data: 'data' });\n *\n * // 取消订阅\n * e.off('eventName', handler);\n *\n * // 清除所有的订阅者\n * e.clear();\n * ```\n */\nexport default class EventEmitter<EventsMap extends Record<string, any> = Event> {\n  private fns: Map<Keys<EventsMap>, any>;\n  private readonly validateEventTypes: RegExp[];\n\n  constructor({ validEventTypes = [/.*/] }: IOptions = {}) {\n    this.fns = new Map();\n    this.validateEventTypes = validEventTypes;\n  }\n\n  /**\n   * 判断事件类型是否合法\n   * @param type\n   * @private\n   */\n  private validateEventType(type) {\n    let vs = this.validateEventTypes;\n    if (!Array.isArray(this.validateEventTypes)) {\n      vs = [this.validateEventTypes];\n    }\n    let isValid = true;\n    vs.forEach((r) => {\n      if (isRegexp(r) && !r.test(type)) {\n        isValid = false;\n      }\n    });\n\n    if (!isValid) {\n      throw new Error(`Invalid Event Type: '${type}'.\\nEvent type should be any of: ${vs}.`);\n    }\n  }\n\n  /**\n   * 添加订阅者\n   * @param type 事件类型\n   * @param handler 回调函数\n   * @param context 上下文\n   */\n  on(type, handler, context?: any) {\n    this.validateEventType(type);\n    if (isString(type)) {\n      const names = type.split(' ');\n      if (names.length > 1) {\n        names.forEach((t) => {\n          this.on(t, handler, context);\n        });\n        return this;\n      }\n    }\n    if (!this.has(type)) {\n      this.fns.set(type, []);\n    }\n    this.fns.get(type).push(handler);\n    return this;\n  }\n\n  /**\n   * 添加一次性订阅者\n   * @param type\n   * @param handler\n   * @param context\n   */\n  once(type, handler, context?: any) {\n    this.validateEventType(type);\n    if (isString(type)) {\n      const names = type.split(' ');\n      if (names.length > 1) {\n        names.forEach((t) => {\n          this.once(t, handler, context);\n        });\n        return this;\n      }\n    }\n    const onceHandler = (...args) => {\n      this.off(type, onceHandler);\n      handler.call(context || this, ...args);\n    };\n    return this.on(type, onceHandler, context);\n  }\n\n  /**\n   * 取消监听\n   * @param type\n   * @param handler\n   * @param context\n   */\n  off(type, handler?: any, context?: any) {\n    this.validateEventType(type);\n    if (isString(type)) {\n      const names = type.split(' ');\n      if (names.length > 1) {\n        names.forEach((t) => {\n          this.off(t, handler, context);\n        });\n        return this;\n      }\n    }\n    const handlers = this.has(type);\n    if (handlers) {\n      if (handler) {\n        const fns = handlers.filter((h) => h !== handler);\n        this.fns.set(type, fns);\n      } else {\n        this.fns.delete(type);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * 触发事件\n   * @param type\n   * @param args\n   */\n  emit(type, args?: any) {\n    const eventObject = type instanceof Event ? type : new Event(type, args);\n    this.validateEventType(eventObject.type);\n    const fns = this.has(eventObject.type);\n    if (fns) {\n      return fns.map((fn) => fn.call(this, eventObject));\n    }\n  }\n\n  has(type) {\n    return this.fns.get(type);\n  }\n\n  /**\n   * 清空所有的订阅者\n   */\n  clear() {\n    this.fns.clear();\n    return this;\n  }\n}\n","import { getFloatArrayConstructor } from '../utils';\n\nexport default class Vector {\n  /**\n   * 向量数据\n   * @private\n   */\n  elements = new (getFloatArrayConstructor())(2);\n\n  /**\n   * 从数组构建向量数据\n   * @param array 原始数组\n   * @param offset 数组偏移量\n   */\n  fromArray(array, offset = 0) {\n    let i = 0;\n    for (; i < this.elements.length; i++) {\n      this.elements[i] = array[offset + i];\n    }\n    return this;\n  }\n\n  /**\n   * 从向量转换到数组\n   * @param out 输出数据\n   * @param offset 偏移量\n   */\n  toArray(out: number[] | Float32Array | Float64Array = [], offset = 0) {\n    let i = 0;\n    for (; i < this.elements.length; i++) {\n      out[offset + i] = this.elements[i];\n    }\n    return out;\n  }\n}\n","import {\n  add,\n  subtract,\n  multiply,\n  divide,\n  dot,\n  lerp,\n  scale,\n  equals,\n  angle,\n  length,\n  distance,\n  inverse,\n  negate,\n  cross,\n  normalize,\n  transformMat3,\n  transformMat4,\n  squaredDistance,\n} from 'gl-matrix/vec2';\n\nimport Vector from './Vector';\nimport Matrix3 from './Matrix3';\nimport Matrix4 from './Matrix4';\nimport { getFloatArrayConstructor } from '../utils';\n\n/**\n * 二维向量\n *\n * 代码示例:\n * ```ts\n * const a = new Vector2(0, 1);\n *\n * const b = new Vector2();\n *\n * const d = a.distanceTo(b);\n * ```\n */\nexport default class Vector2 extends Vector {\n  elements = new (getFloatArrayConstructor())(2);\n\n  /**\n   * @param x 向量的x值，默认为0\n   * @param y 向量的y值，默认为0\n   */\n  constructor(x = 0, y = 0) {\n    super();\n    const v = this.elements;\n    v[0] = x;\n    v[1] = y;\n  }\n\n  /**\n   * 获取向量 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[0];\n  }\n\n  /**\n   * 设置向量 x 值\n   * @param x\n   */\n  set x(x) {\n    this.elements[0] = x;\n  }\n\n  /**\n   * 获取向量 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[1];\n  }\n\n  /**\n   * 设置向量 y 值\n   * @param y\n   */\n  set y(y) {\n    this.elements[1] = y;\n  }\n\n  /**\n   * 从对象赋值 Vector2 的 x、y 值\n   * @param object\n   */\n  fromObject(object) {\n    const { x, y } = object;\n    if (x !== undefined) this.x = x;\n    if (y !== undefined) this.y = y;\n    return this;\n  }\n\n  /**\n   * 转换到对象\n   */\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n    };\n  }\n\n  /**\n   * 设置向量的 x 和 y 值\n   * @param x\n   * @param y\n   */\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  /**\n   * 将向量的每个值设置为标量 s\n   * @param s\n   */\n  setScalar(s) {\n    return this.set(s, s);\n  }\n\n  /**\n   * 将传入的向量vec和这个向量相加\n   * @param vec 传入的 Vector2\n   */\n  add(vec: Vector2) {\n    add(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 将传入的标量 v 和这个向量相加，默认构建一个二维向量 [v, v]\n   * @param v 标量值\n   */\n  addScalar(v: number) {\n    add(this.elements, this.elements, [v, v]);\n    return this;\n  }\n\n  /**\n   * 从此向量减去 vec 二维向量\n   * @param vec 传入的 Vector2\n   */\n  subtract(vec: Vector2) {\n    subtract(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量减去标量 v，默认构建一个二维向量 [v, v]\n   * @param v 标量值\n   */\n  subtractScalar(v: number) {\n    subtract(this.elements, this.elements, [v, v]);\n    return this;\n  }\n\n  /**\n   * 将此向量与 vec 向量相乘\n   * @param vec\n   */\n  multiply(vec: Vector2) {\n    multiply(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量与标量 v 相乘，默认构建一个二维向量 [v, v]\n   * @param v 标量值\n   */\n  multiplyScalar(v: number) {\n    multiply(this.elements, this.elements, [v, v]);\n    return this;\n  }\n\n  /**\n   * 将此向量与 vec 向量相除\n   * @param vec\n   */\n  divide(vec: Vector2) {\n    divide(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量与标量 v 相除，默认构建一个二维向量 [v, v]\n   * @param v 标量值\n   */\n  divideScalar(v: number) {\n    divide(this.elements, this.elements, [v, v]);\n    return this;\n  }\n\n  /**\n   * 缩放此向量\n   * @param s\n   */\n  scale(s: number) {\n    scale(this.elements, this.elements, s);\n    return this;\n  }\n\n  /**\n   * 计算该向量到所传入的 v 间的距离\n   * @param vec\n   */\n  distanceTo(vec: Vector2) {\n    return distance(this.elements, vec.elements);\n  }\n\n  /**\n   * 计算从 `[0, 0]` 到此向量的直线距离\n   */\n  length() {\n    return length(this.elements);\n  }\n\n  /**\n   * 计算该向量到传入的v的平方距离\n   * @param v\n   */\n  distanceToSquared(v: Vector2) {\n    return squaredDistance(v.elements, this.elements);\n  }\n\n  /**\n   * 计算此向量相对于正 x 轴的弧度角\n   */\n  angle() {\n    return angle(this.elements, [1, 0]);\n  }\n\n  /**\n   * 以弧度返回该向量与向量 v 之间的角度\n   */\n  angleTo(v: Vector2) {\n    return angle(this.elements, v.elements);\n  }\n\n  /**\n   * 计算此向量与 vec 向量的点积\n   * @param vec\n   */\n  dot(vec: Vector2) {\n    return dot(this.elements, vec.elements);\n  }\n\n  /**\n   * 判断传入的向量 vec 与此向量是否相等\n   * @param vec\n   */\n  equals(vec: Vector2) {\n    return equals(this.elements, vec.elements);\n  }\n\n  /**\n   * 将该向量设置为它本身与传入的vec的叉积\n   * @param vec\n   */\n  cross(vec: Vector2) {\n    cross(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 针对此向量取反\n   */\n  negate() {\n    negate(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 针对此向量取倒数\n   */\n  inverse() {\n    inverse(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量到 vec 向量进行插值\n   * @param vec 目标向量\n   * @param t 插值因数，范围一般在[0-1]，通常在这两个值之间\n   */\n  lerp(vec: Vector2, t: number) {\n    lerp(this.elements, this.elements, vec.elements, t);\n    return this;\n  }\n\n  /**\n   * 将此向量转换为单位向量 (将其设置为与此向量具有相同方向但长度为 1 的向量)\n   */\n  normalize() {\n    normalize(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 将此向量（隐含的 1 作为第三个分量）乘以 Matrix3\n   * @param matrix\n   */\n  applyMatrix3(matrix: Matrix3) {\n    transformMat3(this.elements, this.elements, matrix.elements);\n    return this;\n  }\n\n  /**\n   * 将此向量乘以 Matrix4\n   * @param matrix\n   */\n  applyMatrix4(matrix: Matrix4) {\n    transformMat4(this.elements, this.elements, matrix.elements);\n    return this;\n  }\n\n  /**\n   * 将传递的 vec2 的 x 和 y 属性的值复制到此 Vector2\n   * @param vec2\n   */\n  copy(vec2: Vector2) {\n    this.x = vec2.x;\n    this.y = vec2.y;\n    return this;\n  }\n\n  /**\n   * 克隆此向量\n   */\n  clone() {\n    return new Vector2(this.x, this.y);\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n","import {\n  set,\n  dot,\n  copy,\n  slerp,\n  length,\n  normalize,\n  invert,\n  conjugate,\n  multiply,\n  getAngle,\n  fromEuler,\n  fromMat3,\n  setAxisAngle,\n  getAxisAngle,\n} from 'gl-matrix/quat';\n\nimport { equals } from 'gl-matrix/vec4';\nimport { radToDeg, getFloatArrayConstructor } from '../utils/math';\nimport Euler from './Euler';\nimport Vector from './Vector';\nimport Vector3 from './Vector3';\nimport Matrix3 from './Matrix3';\nimport type { ICallback } from '../types';\n\nconst tempArray: number[] = [];\n\n/**\n * 四元数，主要用于在三维世界描述旋转\n * ```ts\n * const a = new Quaternion(0, 0, 0, 0);\n * ```\n */\nexport default class Quaternion extends Vector {\n  elements = new (getFloatArrayConstructor())(4);\n\n  #changeCallbacks: ICallback[] = [];\n\n  /**\n   * @param x x 坐标，默认为 0\n   * @param y y 坐标，默认为 0\n   * @param z z 坐标，默认为 0\n   * @param w w 坐标，默认为 0\n   */\n  constructor(x = 0, y = 0, z = 0, w = 0) {\n    super();\n    const v = this.elements;\n    v[0] = x;\n    v[1] = y;\n    v[2] = z;\n    v[3] = w;\n  }\n\n  /**\n   * 获取 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[0];\n  }\n\n  /**\n   * 设置 x 值\n   * @param x\n   */\n  set x(x: number) {\n    this.elements[0] = x;\n    this.triggerChange();\n  }\n\n  /**\n   * 获取 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[1];\n  }\n\n  /**\n   * 设置 y 值\n   * @param y\n   */\n  set y(y) {\n    this.elements[1] = y;\n    this.triggerChange();\n  }\n\n  /**\n   * 获取 z 值\n   * @return number;\n   */\n  get z() {\n    return this.elements[2];\n  }\n\n  /**\n   * 设置 z 值\n   * @param z\n   */\n  set z(z: number) {\n    this.elements[2] = z;\n    this.triggerChange();\n  }\n\n  /**\n   * 获取 w 值\n   * @return number;\n   */\n  get w() {\n    return this.elements[3];\n  }\n\n  /**\n   * 设置 w 值\n   * @param w\n   */\n  set w(w) {\n    this.elements[3] = w;\n    this.triggerChange();\n  }\n\n  /**\n   * 从对象赋值 Quaternion 的 x、y、z、w 值\n   * @param object\n   */\n  fromObject({ x, y, z, w }) {\n    if (x !== undefined) this.x = x;\n    if (y !== undefined) this.y = y;\n    if (z !== undefined) this.z = z;\n    if (w !== undefined) this.w = w;\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 转换到对象\n   */\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z,\n      w: this.w,\n    };\n  }\n\n  /**\n   * 给定的角度和旋转轴设置此四元数的值\n   * @param axis\n   * @param rad\n   */\n  fromAxisAngle(axis: Vector3, rad: number) {\n    setAxisAngle(this.elements, axis.elements, rad);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 从此四元数获取旋转轴和旋转角度\n   * @param axis\n   */\n  getAxisAngle(axis = new Vector3()) {\n    const rad = getAxisAngle(tempArray, this.elements);\n    axis.set(tempArray[0], tempArray[1], tempArray[2]);\n    return rad;\n  }\n\n  /**\n   * 从给定的欧拉角 e 创建四元数\n   * @param e\n   */\n  fromEuler(e: Euler) {\n    fromEuler(this.elements, radToDeg(e.x), radToDeg(e.y), radToDeg(e.z));\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 从给定的 3x3 旋转矩阵创建四元数\n   * @param m\n   */\n  fromMat3(m: Matrix3) {\n    fromMat3(this.elements, m);\n    return this;\n  }\n\n  set(x, y, z, w) {\n    set(this.elements, x, y, z, w);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 计算四元数的直线长度\n   */\n  length() {\n    return length(this.elements);\n  }\n\n  /**\n   * 计算四元数的乘积\n   * @param a\n   * @param b\n   */\n  multiply(a: Quaternion, b?: Quaternion) {\n    if (b) {\n      multiply(this.elements, a.elements, b.elements);\n    } else {\n      multiply(this.elements, this.elements, a.elements);\n    }\n\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 处理四元数之间的球面线性插值\n   * @param q\n   * @param t\n   */\n  slerp(q: Quaternion, t: number) {\n    slerp(this.elements, this.elements, q.elements, t);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 翻转该四元数\n   */\n  invert() {\n    invert(this.elements, this.elements);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 计算此四元数的旋转共轭（围绕旋转轴在相反方向上的旋转）\n   */\n  conjugate() {\n    conjugate(this.elements, this.elements);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * （归一化）四元数。 即计算与该四元数具有相同旋转、但长度为1的四元数\n   */\n  normalize() {\n    normalize(this.elements, this.elements);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 计算四元数 q 与当前四元数的点积\n   * @param q\n   */\n  dot(q: Quaternion) {\n    return dot(this.elements, q.elements);\n  }\n\n  /**\n   * 以弧度返回该四元数与四元数 q 之间的夹角。\n   * @param q\n   */\n  angleTo(q: Quaternion) {\n    return getAngle(this.elements, q.elements);\n  }\n\n  /**\n   * 创建一个与该四元数具有相同x、y、z和w 属性的四元数\n   */\n  clone() {\n    return new Quaternion().copy(this);\n  }\n\n  /**\n   * 复制四元数 q 的 x、y、z 和 w 属性到该四元数中。\n   * @param q\n   */\n  copy(q: Quaternion) {\n    copy(this.elements, q.elements);\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 比较两个四元数是否相同\n   * @param q\n   */\n  equals(q: Quaternion) {\n    return equals(this.elements, q.elements);\n  }\n\n  /**\n   * 监听四元数变更\n   * @param fn 回调函数\n   */\n  onChange(fn: ICallback) {\n    if (!this.#changeCallbacks.includes(fn)) {\n      this.#changeCallbacks.push(fn);\n    }\n  }\n\n  /**\n   * 触发所有的回调函数\n   */\n  triggerChange() {\n    this.#changeCallbacks.forEach((cb) => cb());\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n","import {\n  set,\n  add,\n  length,\n  subtract,\n  multiply,\n  divide,\n  dot,\n  lerp,\n  scale,\n  scaleAndAdd,\n  equals,\n  angle,\n  negate,\n  cross,\n  inverse,\n  distance,\n  squaredDistance,\n  normalize,\n  transformMat3,\n  transformMat4,\n  transformQuat,\n} from 'gl-matrix/vec3';\n\nimport Vector from './Vector';\n\nimport Quaternion from './Quaternion';\nimport Matrix3 from './Matrix3';\nimport Matrix4 from './Matrix4';\nimport { getFloatArrayConstructor } from '../utils';\n\n/**\n * 三维向量，三维向量表示的是一个有顺序的、三个为一组的数字组合，可以用来描述：\n * - 一个位于三维空间中的点。\n * - 一个在三维空间中的方向与长度的定义\n * ```ts\n * const a = new Vector3(0, 1, 0);\n *\n * const b = new Vector3(0, 0, 0);\n *\n * const d = a.distanceTo(b);\n * ```\n */\nexport default class Vector3 extends Vector {\n  elements = new (getFloatArrayConstructor())(3);\n\n  /**\n   * @param x 向量的x值，默认为0\n   * @param y 向量的y值，默认为0\n   * @param z 向量的z值，默认为0\n   */\n  constructor(x = 0, y = 0, z = 0) {\n    super();\n    const v = this.elements;\n    v[0] = x;\n    v[1] = y;\n    v[2] = z;\n  }\n\n  /**\n   * 获取向量 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[0];\n  }\n\n  /**\n   * 设置向量 x 值\n   * @param x\n   */\n  set x(x: number) {\n    this.elements[0] = x;\n  }\n\n  /**\n   * 获取向量 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[1];\n  }\n\n  /**\n   * 设置向量 y 值\n   * @param y\n   */\n  set y(y: number) {\n    this.elements[1] = y;\n  }\n\n  /**\n   * 获取向量 z 值\n   * @return number;\n   */\n  get z() {\n    return this.elements[2];\n  }\n\n\n  /**\n   * 设置向量 z 值\n   * @param z\n   */\n  set z(z: number) {\n    this.elements[2] = z;\n  }\n\n  /**\n   * 从对象赋值 Vector3 的 x、y、z 值\n   * @param object\n   */\n  fromObject(object) {\n    const { x, y, z } = object;\n    if (x !== undefined) this.x = x;\n    if (y !== undefined) this.y = y;\n    if (z !== undefined) this.z = z;\n    return this;\n  }\n\n  /**\n   * 转换到对象\n   */\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z,\n    };\n  }\n\n  /**\n   * 设置向量的 x、y、z\n   * @param x\n   * @param y\n   * @param z\n   */\n  set(x, y, z) {\n    set(this.elements, x, y, z);\n    return this;\n  }\n\n  /**\n   * 将向量的每个值设置为标量 s\n   * @param s\n   */\n  setScalar(s) {\n    return this.set(s, s, s);\n  }\n\n  /**\n   * 计算从 `[0, 0, 0]` 到此向量的直线距离\n   */\n  length() {\n    return length(this.elements);\n  }\n\n  /**\n   * 将传入的向量vec和这个向量相加，会改变当前向量\n   * @param vec 传入的 Vector3\n   */\n  add(vec: Vector3) {\n    add(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 将传入的标量量 v 和这个向量相加，会改变当前向量\n   * @param v 传入的 标量值\n   */\n  addScalar(v: number) {\n    add(this.elements, this.elements, [v, v, v]);\n    return this;\n  }\n\n  /**\n   * 从此向量减去 vec 三维向量\n   * @param vec 传入的 Vector3\n   */\n  subtract(vec: Vector3) {\n    subtract(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量减去标量 v，默认构建一个三维向量 [v, v, v]\n   * @param v 标量值\n   */\n  subtractScalar(v: number) {\n    subtract(this.elements, this.elements, [v, v, v]);\n    return this;\n  }\n\n  /**\n   * 将向量 a 与向量 b 相减后的向量赋值给此向量\n   * @param a\n   * @param b\n   */\n  subVectors(a: Vector3, b: Vector3) {\n    subtract(this.elements, a.elements, b.elements);\n    return this;\n  }\n\n  /**\n   * 将此向量与 vec 向量相乘\n   * @param vec\n   */\n  multiply(vec: Vector3) {\n    multiply(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量与标量 v 相乘，默认构建一个三维向量 [v, v, v]\n   * @param v 标量值\n   */\n  multiplyScalar(v: number) {\n    multiply(this.elements, this.elements, [v, v, v]);\n    return this;\n  }\n\n  /**\n   * 将此向量与 vec 向量相除\n   * @param vec\n   */\n  divide(vec) {\n    divide(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量与标量 v 相除，默认构建一个三维向量 [v, v, v]\n   * @param v 标量值\n   */\n  divideScalar(v) {\n    divide(this.elements, this.elements, [v, v, v]);\n    return this;\n  }\n\n  /**\n   * 缩放此向量\n   * @param s\n   */\n  scale(s: number) {\n    scale(this.elements, this.elements, s);\n    return this;\n  }\n\n  /**\n   * 按标量缩放 v 向量后与此向量相加\n   * @param v\n   * @param s\n   */\n  scaleAndAdd(v: Vector3, s: number) {\n    scaleAndAdd(this.elements, this.elements, v.elements, s);\n    return this;\n  }\n\n  /**\n   * 计算该向量到所传入的 vec 间的距离\n   * @param vec\n   */\n  distanceTo(vec: Vector3) {\n    return distance(this.elements, vec.elements);\n  }\n\n  /**\n   * 计算两个 vec3 之间的平方距离\n   * @param vec\n   */\n  distanceToSquared(vec: Vector3) {\n    return squaredDistance(this.elements, vec.elements);\n  }\n\n  /**\n   * 计算此向量相对于正 x 轴的弧度角\n   * @param vector\n   */\n  angle(vector: Vector3) {\n    return angle(this.elements, [1, 0, 0]);\n  }\n\n  /**\n   * 以弧度返回该向量与向量 v 之间的角度\n   */\n  angleTo(vector: Vector3) {\n    return angle(this.elements, vector.elements);\n  }\n\n  /**\n   * 计算此向量与 vec 向量的点积\n   * @param vec\n   */\n  dot(vec: Vector3) {\n    return dot(this.elements, vec.elements);\n  }\n\n  /**\n   * 判断传入的向量 vec 与此向量是否相等\n   * @param vec\n   */\n  equals(vec: Vector3) {\n    return equals(this.elements, vec.elements);\n  }\n\n  /**\n   * 将该向量设置为它本身与传入的vec的叉积\n   * @param vec\n   */\n  cross(vec: Vector3) {\n    cross(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 针对此向量取反\n   */\n  negate() {\n    negate(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 针对此向量取倒数\n   */\n  inverse() {\n    inverse(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量到 vec 向量进行插值\n   * @param vec 目标向量\n   * @param t 插值因数，范围一般在[0-1]，通常在这两个值之间\n   */\n  lerp(vec: Vector3, t: number) {\n    lerp(this.elements, this.elements, vec.elements, t);\n    return this;\n  }\n\n  /**\n   * 将此向量转换为单位向量 (将其设置为与此向量具有相同方向但长度为 1 的向量)\n   */\n  normalize() {\n    normalize(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 通过将Euler（欧拉）对象转换为Quaternion（四元数）并应用， 将欧拉变换应用到此向量上\n   * @param euler\n   */\n  applyEuler(euler) {\n    const e = new Quaternion().fromEuler(euler);\n    return this.applyQuaternion(e);\n  }\n\n  /**\n   * 将此向量乘以 Matrix3\n   * @param matrix\n   */\n  applyMatrix3(matrix: Matrix3) {\n    transformMat3(this.elements, this.elements, matrix.elements);\n    return this;\n  }\n\n  /**\n   * 将此向量乘以 Matrix4\n   * @param matrix\n   */\n  applyMatrix4(matrix: Matrix4) {\n    transformMat4(this.elements, this.elements, matrix.elements);\n    return this;\n  }\n\n  /**\n   * 将 Quaternion 变换应用到该向量\n   * @param quaternion\n   */\n  applyQuaternion(quaternion: Quaternion) {\n    transformQuat(this.elements, this.elements, quaternion.elements);\n    return this;\n  }\n\n  /**\n   * 将传递的 Vector3 的 x 和 y, z 属性的值复制到此 Vector3\n   * @param vec3\n   */\n  copy(vec3: Vector3) {\n    this.x = vec3.x;\n    this.y = vec3.y;\n    this.z = vec3.z;\n    return this;\n  }\n\n  /**\n   * 克隆此向量\n   */\n  clone() {\n    return new Vector3(this.x, this.y, this.z);\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n","import {\n  set,\n  add,\n  subtract,\n  multiply,\n  divide,\n  dot,\n  lerp,\n  scale,\n  equals,\n  distance,\n  length,\n  cross,\n  negate,\n  inverse,\n  normalize,\n  scaleAndAdd,\n  transformMat4,\n  transformQuat,\n  squaredDistance,\n} from 'gl-matrix/vec4';\n\nimport Vector from './Vector';\nimport Quaternion from './Quaternion';\nimport Matrix4 from './Matrix4';\nimport { getFloatArrayConstructor } from '../utils';\n\n/**\n * 四维向量，四维向量表示的是一个有顺序的、四个为一组的数字组合，可以用来描述：\n * - 一个位于四维空间中的点。\n * - 一个在四维空间中的方向与长度的定义。\n * ```ts\n * const a = new Vector4(0, 1, 0);\n *\n * const b = new Vector4(0, 0, 0);\n *\n * const d = a.distanceTo(b);\n * ```\n */\nexport default class Vector4 extends Vector {\n  elements = new (getFloatArrayConstructor())(4);\n\n  /**\n   * @param x 向量的x值，默认为0\n   * @param y 向量的y值，默认为0\n   * @param z 向量的z值，默认为0\n   * @param w 向量的w值，默认为0\n   */\n  constructor(x = 0, y = 0, z = 0, w = 0) {\n    super();\n    const v = this.elements;\n    v[0] = x;\n    v[1] = y;\n    v[2] = z;\n    v[3] = w;\n  }\n\n  /**\n   * 获取向量 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[0];\n  }\n\n  /**\n   * 设置向量 x 值\n   * @param x\n   */\n  set x(x: number) {\n    this.elements[0] = x;\n  }\n\n  /**\n   * 获取向量 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[1];\n  }\n\n  /**\n   * 设置向量 y 值\n   * @param y\n   */\n  set y(y: number) {\n    this.elements[1] = y;\n  }\n\n  /**\n   * 获取向量 z 值\n   * @return number;\n   */\n  get z() {\n    return this.elements[2];\n  }\n\n  /**\n   * 设置向量 z 值\n   * @param z\n   */\n  set z(z: number) {\n    this.elements[2] = z;\n  }\n\n  /**\n   * 获取向量 w 值\n   * @return number;\n   */\n  get w() {\n    return this.elements[3];\n  }\n\n  /**\n   * 设置向量 w 值\n   * @param w\n   */\n  set w(w: number) {\n    this.elements[3] = w;\n  }\n\n  /**\n   * 从对象赋值 Vector3 的 x、y、z、w 值\n   * @param object\n   */\n  fromObject(object) {\n    const { x, y, z, w } = object;\n    if (x !== undefined) this.x = x;\n    if (y !== undefined) this.y = y;\n    if (z !== undefined) this.z = z;\n    if (w !== undefined) this.w = w;\n    return this;\n  }\n\n  /**\n   * 转换到对象\n   */\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z,\n      w: this.w,\n    };\n  }\n\n  /**\n   * 设置向量的 x、y、z、w\n   * @param x\n   * @param y\n   * @param z\n   * @param w\n   */\n  set(x, y, z, w) {\n    set(this.elements, x, y, z, w);\n    return this;\n  }\n\n  /**\n   * 将向量的每个值设置为标量 s\n   * @param s\n   */\n  setScalar(s) {\n    return this.set(s, s, s, s);\n  }\n\n  /**\n   * 将传入的向量vec和这个向量相加，会改变当前向量\n   * @param vec 传入的 Vector4\n   */\n  add(vec: Vector4) {\n    add(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 将传入的标量量 v 和这个向量相加，会改变当前向量\n   * @param v 传入的 标量值\n   */\n  addScalar(v) {\n    add(this.elements, this.elements, [v, v, v, v]);\n    return this;\n  }\n\n  /**\n   * 从此向量减去 vec 四维向量\n   * @param vec 传入的 Vector4\n   */\n  subtract(vec: Vector4) {\n    subtract(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量减去标量 v，默认构建一个四维向量 [v, v, v, v]\n   * @param v 标量值\n   */\n  subtractScalar(v) {\n    subtract(this.elements, this.elements, [v, v, v, v]);\n    return this;\n  }\n\n  /**\n   * 将向量 a 与向量 b 相减后的向量赋值给此向量\n   * @param a\n   * @param b\n   */\n  subVectors(a: Vector4, b: Vector4) {\n    subtract(this.elements, a.elements, b.elements);\n    return this;\n  }\n\n  /**\n   * 将此向量与 vec 向量相乘\n   * @param vec\n   */\n  multiply(vec: Vector4) {\n    multiply(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量与标量 v 相乘，默认构建一个四维向量 [v, v, v, v]\n   * @param v 标量值\n   */\n  multiplyScalar(v: number) {\n    multiply(this.elements, this.elements, [v, v, v, v]);\n    return this;\n  }\n\n  /**\n   * 将此向量与 vec 向量相除\n   * @param vec\n   */\n  divide(vec: Vector4) {\n    divide(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量各分量与标量 v 相除，默认构建一个四维向量 [v, v, v, v]\n   * @param v 标量值\n   */\n  divideScalar(v) {\n    divide(this.elements, this.elements, [v, v, v, v]);\n    return this;\n  }\n\n  /**\n   * 缩放此向量\n   * @param s\n   */\n  scale(s: number) {\n    scale(this.elements, this.elements, s);\n    return this;\n  }\n\n  /**\n   * 按标量缩放 v 向量后与此向量相加\n   * @param v\n   * @param s\n   */\n  scaleAndAdd(v: Vector4, s: number) {\n    scaleAndAdd(this.elements, this.elements, v.elements, s);\n    return this;\n  }\n\n  /**\n   * 计算该向量到所传入的 v 间的距离\n   * @param vec\n   */\n  distanceTo(vec: Vector4) {\n    return distance(this.elements, vec.elements);\n  }\n\n  /**\n   * 计算两个 Vector4 之间的平方距离\n   * @param vec\n   */\n  distanceToSquared(vec: Vector4) {\n    return squaredDistance(this.elements, vec.elements);\n  }\n\n  /**\n   * 计算从 `[0, 0, 0, 0]` 到此向量的直线距离\n   */\n  length() {\n    return length(this.elements);\n  }\n\n  /**\n   * 计算此向量与 vec 向量的点积\n   * @param vec\n   */\n  dot(vec: Vector4) {\n    return dot(this.elements, vec.elements);\n  }\n\n  /**\n   * 判断传入的向量 vec 与此向量是否相等\n   * @param vec\n   */\n  equals(vec: Vector4) {\n    return equals(this.elements, vec.elements);\n  }\n\n  /**\n   * 将该向量设置为它本身与传入的vec的叉积\n   * @param vec\n   */\n  cross(vec: Vector4) {\n    cross(this.elements, this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 针对此向量取反\n   */\n  negate() {\n    negate(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 针对此向量取倒数\n   */\n  inverse() {\n    inverse(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 从此向量到 vec 向量进行插值\n   * @param vec 目标向量\n   * @param t 插值因数，范围一般在[0-1]，通常在这两个值之间\n   */\n  lerp(vec: Vector4, t: number) {\n    lerp(this.elements, this.elements, vec.elements, t);\n    return this;\n  }\n\n  /**\n   * 将此向量转换为单位向量 (将其设置为与此向量具有相同方向但长度为 1 的向量)\n   */\n  normalize() {\n    normalize(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 将此向量乘以 Matrix4\n   * @param matrix\n   */\n  applyMatrix4(matrix: Matrix4) {\n    transformMat4(this.elements, this.elements, matrix.elements);\n    return this;\n  }\n\n  /**\n   * 将 Quaternion 变换应用到该向量\n   * @param quaternion\n   */\n  applyQuaternion(quaternion: Quaternion) {\n    transformQuat(this.elements, this.elements, quaternion.elements);\n    return this;\n  }\n\n  /**\n   * 将传递的 Vector4 的 x 、y、 z、w 属性的值复制到此 Vector4\n   * @param vec4\n   */\n  copy(vec4: Vector4) {\n    this.x = vec4.x;\n    this.y = vec4.y;\n    this.z = vec4.z;\n    this.w = vec4.w;\n    return this;\n  }\n\n  /**\n   * 克隆此向量\n   */\n  clone() {\n    return new Vector4(this.x, this.y, this.z, this.w);\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n","import { getFloatArrayConstructor } from '../utils';\n\nexport default class Matrix {\n  /**\n   * 矩阵数据\n   * @private\n   */\n  elements = new (getFloatArrayConstructor())(16);\n\n  /**\n   * 从数组构建矩阵\n   * @param array 原始数组\n   * @param offset 数组偏移量\n   */\n  fromArray(array, offset = 0) {\n    let i = 0;\n    for (; i < this.elements.length; i++) {\n      this.elements[i] = array[offset + i];\n    }\n    return this;\n  }\n\n  /**\n   * 从矩阵转换到数组\n   * @param out 输出数据\n   * @param offset 偏移量\n   */\n  toArray(out: number[] | Float32Array | Float64Array = [], offset = 0) {\n    let i = 0;\n    for (; i < this.elements.length; i++) {\n      out[offset + i] = this.elements[i];\n    }\n    return out;\n  }\n}\n","import {\n  set,\n  add,\n  scale,\n  subtract,\n  fromScaling,\n  fromTranslation,\n  translate,\n  determinant,\n  equals,\n  identity,\n  invert,\n  transpose,\n  multiply,\n  frob,\n  rotate,\n  adjoint,\n  copy,\n  fromQuat,\n  fromMat4,\n  fromRotation,\n  normalFromMat4,\n} from 'gl-matrix/mat3';\n\nimport Matrix from './Matrix';\nimport Matrix4 from './Matrix4';\nimport Vector2 from './Vector2';\nimport Quaternion from './Quaternion';\nimport { getFloatArrayConstructor } from '../utils';\n\n/**\n * 一个表示 3*3 的矩阵\n * 1--0--0\n * |  |  |\n * 0--1--0\n * |  |  |\n * 0--0--1\n * ```ts\n * const m = new Matrix3();\n * ```\n */\nexport default class Matrix3 extends Matrix {\n  elements = new (getFloatArrayConstructor())(9);\n\n  /**\n   * @param m00 第一行第一列，默认是 1\n   * @param m01 第一行第二列，默认是 0\n   * @param m02 第一行第三列，默认是 0\n   * @param m10 第二行第一列，默认是 0\n   * @param m11 第二行第二列，默认是 1\n   * @param m12 第二行第三列，默认是 0\n   * @param m20 第三行第一列，默认是 0\n   * @param m21 第三行第二列，默认是 0\n   * @param m22 第三行第三列，默认是 1\n   */\n  constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n    super();\n    const e: Float32Array | Float64Array = this.elements;\n\n    e[0] = m00;\n    e[1] = m01;\n    e[2] = m02;\n\n    e[3] = m10;\n    e[4] = m11;\n    e[5] = m12;\n\n    e[6] = m20;\n    e[7] = m21;\n    e[8] = m22;\n  }\n\n  /**\n   * 获取向量 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[2];\n  }\n\n  /**\n   * 获取向量 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[5];\n  }\n\n  /**\n   * 获取向量 z 值\n   * @return number;\n   */\n  get z() {\n    return this.elements[8];\n  }\n\n  /**\n   * 获取单位矩阵\n   */\n  static get identity() {\n    return new Matrix3().fromArray(identity([]));\n  }\n\n  /**\n   * 将此矩阵的每一项设置为给定的值\n   * @param {Number} m00\n   * @param {Number} m01\n   * @param {Number} m02\n   * @param {Number} m10\n   * @param {Number} m11\n   * @param {Number} m12\n   * @param {Number} m20\n   * @param {Number} m21\n   * @param {Number} m22\n   * @return {Matrix3} this\n   */\n  set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    set(this.elements, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n    return this;\n  }\n\n  /**\n   * 将此矩阵转换为转置矩阵\n   * @return {Matrix3} this\n   */\n  transpose() {\n    transpose(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 将此矩阵转换为逆矩阵\n   * @param  {Matrix3} [m = this]\n   * @return {Matrix3} this\n   */\n  invert(m = this) {\n    invert(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 计算此矩阵的伴随矩阵\n   * @param  {Matrix3} [m=this]\n   * @return {Matrix3} this\n   */\n  adjoint(m = this) {\n    adjoint(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 计算行列式\n   * @return {Number}\n   */\n  determinant() {\n    return determinant(this.elements);\n  }\n\n  /**\n   * 计算两个Matrix3矩阵的乘积\n   * @param  {Matrix3} a\n   * @param  {Matrix3} [b] 如果不传，计算 this 和 a 的乘积\n   * @return {Matrix3} this\n   */\n  multiply(a: Matrix3, b?: Matrix3) {\n    if (b) {\n      multiply(this.elements, a.elements, b.elements);\n    } else {\n      multiply(this.elements, this.elements, a.elements);\n    }\n\n    return this;\n  }\n\n  /**\n   * 左乘\n   * @param  {Matrix3} a\n   * @param  {Matrix3} b 如果不传，计算 this 和 a 的左乘\n   * @return {Matrix3}  this\n   */\n  premultiply(a: Matrix3, b?: Matrix3) {\n    if (b) {\n      multiply(this.elements, b.elements, a.elements);\n    } else {\n      multiply(this.elements, a.elements, this.elements);\n    }\n    return this;\n  }\n\n  /**\n   * 通过给定的向量 Vector2 平移此矩阵\n   * @param  {Vector2} v 向量\n   * @return {Matrix3} this\n   */\n  translate(v: Vector2) {\n    translate(this.elements, this.elements, v.elements);\n    return this;\n  }\n\n  /**\n   * 旋转此矩阵\n   * @param  {Number} rad 弧度\n   * @return {Matrix3} this\n   */\n  rotate(rad: number) {\n    rotate(this.elements, this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 通过给定的 Vector2 向量缩放此矩阵\n   * @param  {Vector2} v 向量\n   * @return {Matrix3} this\n   */\n  scale(v: Vector2) {\n    scale(this.elements, this.elements, v.elements);\n    return this;\n  }\n\n  /**\n   * 计算单位矩阵平移后的矩阵\n   * @param  {Vector2} v 平移的向量\n   * @return {Matrix3} this\n   */\n  fromTranslation(v: Vector2) {\n    fromTranslation(this.elements, v.elements);\n    return this;\n  }\n\n  /**\n   * 计算单位矩阵旋转后的矩阵\n   * @param  {Number} rad 旋转弧度\n   * @return {Matrix3} this\n   */\n  fromRotation(rad: number) {\n    fromRotation(this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 计算单位矩阵缩放后的矩阵\n   * @param  {Vector2} v Scaling vector\n   * @return {Matrix3} this\n   */\n  fromScaling(v) {\n    fromScaling(this.elements, v.elements);\n    return this;\n  }\n\n  /**\n   * 根据给定的四元数计算矩阵\n   * @param  {Quaternion} q Quaternion to create matrix from\n   * @return {Matrix3} this\n   */\n  fromQuat(q: Quaternion) {\n    fromQuat(this.elements, q.elements);\n    return this;\n  }\n\n  /**\n   * 从 4x4 矩阵计算 3x3 正态矩阵（转置逆矩阵）\n   * @param  {Matrix4} m 给定的 Matrix4 矩阵\n   * @return {Matrix3} this\n   */\n  normalFromMat4(m) {\n    normalFromMat4(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 将 Matrix4 左上角的 3x3 值复制到给定的 Matrix3 中。\n   * @param  {Matrix4} m 源矩阵\n   * @return {Matrix3} this\n   */\n  fromMat4(m) {\n    fromMat4(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 计算此矩阵的 Frobenius 范数\n   * @return {Number} Frobenius 范数\n   */\n  frob() {\n    return frob(this.elements);\n  }\n\n  /**\n   * 将两个 Matrix3 矩阵相加\n   * @param {Matrix3} a\n   * @param {Matrix3} [b] 如果不传，计算 this 和 a 的和\n   * @return {Matrix3} this\n   */\n  add(a: Matrix3, b?: Matrix3) {\n    if (b) {\n      add(this.elements, a.elements, b.elements);\n    } else {\n      add(this.elements, this.elements, a.elements);\n    }\n\n    return this;\n  }\n\n  /**\n   * 将两个 Matrix3 矩阵相减\n   * @param {Matrix3} a\n   * @param {Matrix3} [b] 如果不传，计算 this 和 a 的差\n   * @return {Matrix3} this\n   */\n  subtract(a: Matrix3, b?: Matrix3) {\n    if (b) {\n      subtract(this.elements, a.elements, b.elements);\n    } else {\n      subtract(this.elements, this.elements, a.elements);\n    }\n    return this;\n  }\n\n  /**\n   * 判断两个矩阵是否近似相等\n   * @param {Matrix3} a\n   * @param {Matrix3} [b] 如果不传，比较 this 和 a 是否近似相等\n   * @return {Boolean}\n   */\n  equals(a: Matrix3, b?: Matrix3) {\n    if (b) {\n      return equals(a.elements, b.elements);\n    } else {\n      return equals(this.elements, a.elements);\n    }\n  }\n\n  /**\n   * 从给定的旋转角度，位置（二维向量），缩放计算矩阵\n   * @param rotation\n   * @param  {Number} x\n   * @param  {Number} y\n   * @param  {Number} scaleX\n   * @param  {Number} scaleY\n   * @return {Matrix3}\n   */\n  fromRotationTranslationScale(rotation, x, y, scaleX, scaleY) {\n    const cos = Math.cos(rotation);\n    const sin = Math.sin(rotation);\n\n    this.set(scaleX * cos, -scaleY * sin, 0, scaleX * sin, scaleY * cos, 0, x, y, 1);\n    return this;\n  }\n\n  /**\n   * 从 4x4 矩阵计算 3x3 正态矩阵（转置逆矩阵）\n   * 这个值传递给着色器，用于计算物体的光照。 它是物体的modelViewMatrix矩阵中，左上角3x3子矩阵的逆的转置矩阵\n   * @param m\n   */\n  getNormalMatrix(m: Matrix4) {\n    normalFromMat4(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 将传入的 Matrix3 复制到此矩阵\n   * @param  {Matrix3} m 源矩阵\n   * @return {Matrix3} this\n   */\n  copy(m: Matrix3) {\n    copy(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 从此矩阵创建一个新的 3*3 矩阵\n   * @return {Matrix3} a new Matrix3\n   */\n  clone() {\n    return new Matrix3().copy(this);\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n","import {\n  set,\n  copy,\n  scale,\n  fromRotation,\n  fromXRotation,\n  fromYRotation,\n  fromZRotation,\n  fromScaling,\n  fromTranslation,\n  rotate,\n  rotateX,\n  rotateY,\n  rotateZ,\n  translate,\n  determinant,\n  equals,\n  getRotation,\n  getScaling,\n  getTranslation,\n  identity,\n  invert,\n  adjoint,\n  transpose,\n  add,\n  subtract,\n  multiply,\n  multiplyScalar,\n  perspective,\n  ortho,\n  fromQuat,\n  fromRotationTranslation,\n  fromRotationTranslationScale,\n} from 'gl-matrix/mat4';\n\nimport Matrix from './Matrix';\nimport Vector3 from './Vector3';\nimport Quaternion from './Quaternion';\nimport { degToRad, getFloatArrayConstructor } from '../utils';\n\nconst tempArray: number[] = [];\n\n/**\n * 一个表示 4*4 的矩阵\n * 1--0--0--0\n * |  |  |  |\n * 0--1--0--0\n * |  |  |  |\n * 0--0--1--0\n * |  |  |  |\n * 0--0--0--1\n * ```ts\n * const m = new Matrix4();\n * ```\n */\nexport default class Matrix4 extends Matrix {\n  elements = new (getFloatArrayConstructor())(16);\n\n  /**\n   * @param m00 第一行第一列，默认是 1\n   * @param m01 第一行第二列，默认是 0\n   * @param m02 第一行第三列，默认是 0\n   * @param m03 第一行第四列，默认是 0\n   * @param m10 第二行第一列，默认是 0\n   * @param m11 第二行第二列，默认是 1\n   * @param m12 第二行第三列，默认是 0\n   * @param m13 第二行第四列，默认是 0\n   * @param m20 第三行第一列，默认是 0\n   * @param m21 第三行第二列，默认是 0\n   * @param m22 第三行第三列，默认是 1\n   * @param m23 第三行第四列，默认是 0\n   * @param m30 第四行第一列，默认是 0\n   * @param m31 第四行第二列，默认是 0\n   * @param m32 第四行第三列，默认是 0\n   * @param m33 第四行第四列，默认是 1\n   */\n  constructor(\n    m00 = 1,\n    m01 = 0,\n    m02 = 0,\n    m03 = 0,\n    m10 = 0,\n    m11 = 1,\n    m12 = 0,\n    m13 = 0,\n    m20 = 0,\n    m21 = 0,\n    m22 = 1,\n    m23 = 0,\n    m30 = 0,\n    m31 = 0,\n    m32 = 0,\n    m33 = 1,\n  ) {\n    super();\n    const e: Float32Array | Float64Array = this.elements;\n\n    e[0] = m00;\n    e[1] = m01;\n    e[2] = m02;\n    e[3] = m03;\n\n    e[4] = m10;\n    e[5] = m11;\n    e[6] = m12;\n    e[7] = m13;\n\n    e[8] = m20;\n    e[9] = m21;\n    e[10] = m22;\n    e[11] = m23;\n\n    e[12] = m30;\n    e[13] = m31;\n    e[14] = m32;\n    e[15] = m33;\n  }\n\n  /**\n   * 获取向量 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[12];\n  }\n\n  /**\n   * 获取向量 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[13];\n  }\n\n  /**\n   * 获取向量 z 值\n   * @return number;\n   */\n  get z() {\n    return this.elements[14];\n  }\n\n  /**\n   * 获取向量 w 值\n   * @return number;\n   */\n  get w() {\n    return this.elements[15];\n  }\n\n  /**\n   * 获取单位矩阵\n   */\n  static get identity() {\n    return new Matrix4().fromArray(identity([]));\n  }\n\n  /**\n   * 将此矩阵的每一项设置为给定的值\n   * @param m00\n   * @param m01\n   * @param m02\n   * @param m03\n   * @param m10\n   * @param m11\n   * @param m12\n   * @param m13\n   * @param m20\n   * @param m21\n   * @param m22\n   * @param m23\n   * @param m30\n   * @param m31\n   * @param m32\n   * @param m33\n   */\n  set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    set(this.elements, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n    return this;\n  }\n\n  /**\n   * 将此矩阵转换为转置矩阵\n   * @return {Matrix4} this\n   */\n  transpose() {\n    transpose(this.elements, this.elements);\n    return this;\n  }\n\n  /**\n   * 将此矩阵转换为逆矩阵\n   * @param m 默认为当前实例\n   * @return Matrix4\n   */\n  invert(m = this) {\n    invert(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 计算此矩阵的伴随矩阵\n   * @param m 默认为当前实例\n   */\n  adjoint(m = this) {\n    adjoint(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 计算行列式\n   * @return {Number}\n   */\n  determinant() {\n    return determinant(this.elements);\n  }\n\n  /**\n   * 将两个 Matrix4 矩阵相加\n   * @param {Matrix4} a\n   * @param {Matrix4} [b] 如果不传，计算 this 和 a 的和\n   * @return {Matrix4} this\n   */\n  add(a: Matrix4, b?: Matrix4) {\n    if (b) {\n      add(this.elements, a.elements, b.elements);\n    } else {\n      add(this.elements, this.elements, a.elements);\n    }\n\n    return this;\n  }\n\n  /**\n   * 将两个 Matrix4 矩阵相减\n   * @param {Matrix4} a\n   * @param {Matrix4} [b] 如果不传，计算 this 和 a 的差\n   * @return {Matrix4} this\n   */\n  subtract(a: Matrix4, b?: Matrix4) {\n    if (b) {\n      subtract(this.elements, a.elements, b.elements);\n    } else {\n      subtract(this.elements, this.elements, a.elements);\n    }\n    return this;\n  }\n\n  /**\n   * 计算两个 Matrix4 矩阵的乘积\n   * @param  {Matrix4} a\n   * @param  {Matrix4} [b] 如果不传，计算 this 和 a 的乘积\n   * @return {Matrix4} this\n   */\n  multiply(a: Matrix4, b?: Matrix4) {\n    if (b) {\n      multiply(this.elements, a.elements, b.elements);\n    } else {\n      multiply(this.elements, this.elements, a.elements);\n    }\n    return this;\n  }\n\n  /**\n   * 计算 Matrix4 与标量的乘积\n   * @param a 如果不传，计算 this 和 b 的乘积\n   * @param b\n   */\n  multiplyScalar(a: Matrix4 = this, b?: number) {\n    multiplyScalar(this.elements, a.elements, b);\n    return this;\n  }\n\n  /**\n   * 左乘\n   * @param  {Matrix4} a\n   * @param  {Matrix4} b 如果不传，计算 this 和 a 的左乘\n   * @return {Matrix4}  this\n   */\n  premultiply(a: Matrix4, b?: Matrix4) {\n    if (b) {\n      multiply(this.elements, b.elements, a.elements);\n    } else {\n      multiply(this.elements, a.elements, this.elements);\n    }\n    return this;\n  }\n\n  /**\n   * 通过给定的向量 Vector3 平移此矩阵\n   * @param  {Vector3} v 向量\n   * @return {Matrix4} this\n   */\n  translate(v: Vector3) {\n    translate(this.elements, this.elements, v.elements);\n    return this;\n  }\n\n  /**\n   * 旋转此矩阵\n   * @param  {Number} rad 弧度\n   * @return {Matrix4} this\n   */\n  rotate(rad: number) {\n    rotate(this.elements, this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 通过给定的 Vector3 向量缩放此矩阵\n   * @param vec3\n   */\n  scale(vec3: Vector3) {\n    scale(this.elements, this.elements, vec3.elements);\n    return this;\n  }\n\n  /**\n   * 通过标量 s 缩放此矩阵，默认在内部构建一个三维向量 [s, s, s]\n   * @param s\n   */\n  scaleScalar(s: number) {\n    scale(this.elements, this.elements, [s, s, s]);\n    return this;\n  }\n\n  /**\n   * 从平移向量创建矩阵\n   * @param vec\n   */\n  fromTranslation(vec: Vector3) {\n    fromTranslation(this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从给定轴和旋转角度创建矩阵\n   * @param rad 弧度\n   * @param axis 轴\n   */\n  fromRotation(rad: number, axis) {\n    fromRotation(this.elements, rad, axis);\n    return this;\n  }\n\n  /**\n   * 从绕 X 轴的给定角度创建矩阵\n   * @param rad\n   */\n  fromRotationX(rad: number) {\n    fromXRotation(this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 从绕 Y 轴的给定角度创建矩阵\n   * @param rad\n   */\n  fromRotationY(rad: number) {\n    fromYRotation(this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 从绕 Z 轴的给定角度创建矩阵\n   * @param rad\n   */\n  fromRotationZ(rad) {\n    fromZRotation(this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 从缩放向量计算矩阵\n   * @param vec\n   */\n  fromScale(vec: Vector3) {\n    fromScaling(this.elements, vec.elements);\n    return this;\n  }\n\n  /**\n   * 从平移向量和四元数计算矩阵\n   * @param quat\n   * @param v\n   */\n  fromRotationTranslation(quat: Quaternion, v: Vector3) {\n    fromRotationTranslation(this.elements, quat.elements, v.elements);\n    return this;\n  }\n\n  /**\n   * 创建一个透视投影矩阵\n   * @param fov\n   * @param aspect\n   * @param near\n   * @param far\n   */\n  fromPerspective(fov, aspect, near, far) {\n    perspective(this.elements, degToRad(fov), aspect, near, far);\n    return this;\n  }\n\n  /**\n   * 创建一个正交投影矩阵\n   * @param left\n   * @param right\n   * @param bottom\n   * @param top\n   * @param near\n   * @param far\n   */\n  fromOrthogonal(left, right, bottom, top, near, far) {\n    ortho(this.elements, left, right, bottom, top, near, far);\n    return this;\n  }\n\n  /**\n   * 从给定的四元数计算矩阵\n   * @param q\n   */\n  fromQuat(q: Quaternion) {\n    fromQuat(this.elements, q.elements);\n    return this;\n  }\n\n  /**\n   * 判断两个矩阵是否近似相等\n   * @param mat4\n   */\n  equals(mat4) {\n    return equals(this.elements, mat4.value);\n  }\n\n  /**\n   * 获取旋转向量\n   * @param q\n   */\n  getRotation(q = new Quaternion()) {\n    getRotation(tempArray, this.elements);\n    q.set(tempArray[0], tempArray[1], tempArray[2], tempArray[3]);\n    return q;\n  }\n\n  /**\n   * 获取缩放向量\n   * @param v\n   */\n  getScale(v = new Vector3()) {\n    getScaling(tempArray, this.elements);\n    v.set(tempArray[0], tempArray[1], tempArray[2]);\n    return v;\n  }\n\n  /**\n   * 获取平移向量\n   * @param v\n   */\n  getTranslation(v = new Vector3()) {\n    getTranslation(tempArray, this.elements);\n    v.set(tempArray[0], tempArray[1], tempArray[2]);\n    return v;\n  }\n\n  /**\n   * 围绕 X 轴按给定弧度旋转矩阵\n   * @param rad\n   */\n  rotateX(rad) {\n    rotateX(this.elements, this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 围绕 Y 轴按给定弧度旋转矩阵\n   * @param rad\n   */\n  rotateY(rad) {\n    rotateY(this.elements, this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 围绕 Z 轴按给定弧度旋转矩阵\n   * @param rad\n   */\n  rotateZ(rad) {\n    rotateZ(this.elements, this.elements, rad);\n    return this;\n  }\n\n  /**\n   * 从四元数旋转、平移和缩放创建矩阵\n   * @param v\n   * @param q\n   * @param s\n   */\n  compose(v: Vector3, q: Quaternion, s: Vector3) {\n    fromRotationTranslationScale(this.elements, q.elements, v.elements, s.elements);\n    return this;\n  }\n\n  /**\n   * 从矩阵转换到四元数、平移和缩放向量\n   */\n  decompose() {\n    return {\n      rotation: this.getRotation(),\n      scale: this.getScale(),\n      translation: this.getTranslation(),\n    };\n  }\n\n  /**\n   * 将传入的 Matrix4 复制到此矩阵\n   * @param  {Matrix4} m 源矩阵\n   * @return {Matrix4} this\n   */\n  copy(m: Matrix4) {\n    copy(this.elements, m.elements);\n    return this;\n  }\n\n  /**\n   * 从此矩阵创建一个新的 4*4 矩阵\n   * @return {Matrix4} a new Matrix4\n   */\n  clone() {\n    return new Matrix4().copy(this);\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n","import { clamp, getFloatArrayConstructor } from '../utils/math';\n\nimport Vector from './Vector';\nimport Vector3 from './Vector3';\nimport Matrix4 from './Matrix4';\nimport Quaternion from './Quaternion';\n\nimport type { ICallback } from '../types';\n\nexport type ANGLE_ORDER = 'zyx' | 'xyz' | 'yxz' | 'yzx' | 'zxy' | 'xzy';\n\n/**\n * 欧拉角描述一个旋转变换，通过指定轴顺序和其各个轴向上的指定旋转角度来旋转一个物体\n *\n * ```ts\n * const a = new Euler(0, 1, 1.57, 'xyz' )\n * ```\n */\nexport default class Euler extends Vector {\n  elements = new (getFloatArrayConstructor())(3);\n\n  #changeCallbacks: ICallback[] = [];\n\n  #order: ANGLE_ORDER = 'xyz';\n\n  /**\n   * @param x 用弧度表示x轴旋转量，默认值是 0\n   * @param y 用弧度表示y轴旋转量，默认值是 0\n   * @param z 用弧度表示z轴旋转量，默认值是 0\n   * @param order 表示旋转顺序的字符串，默认为'xyz'\n   */\n  constructor(x = 0, y = 0, z = 0, order: ANGLE_ORDER = 'xyz') {\n    super();\n    const v = this.elements;\n    v[0] = x;\n    v[1] = y;\n    v[2] = z;\n    this.#order = order;\n  }\n\n  /**\n   * 获取 x 值\n   * @return number;\n   */\n  get x() {\n    return this.elements[0];\n  }\n\n  /**\n   * 设置 x 值\n   * @param x\n   */\n  set x(x: number) {\n    this.elements[0] = x;\n    this.triggerChange();\n  }\n\n  /**\n   * 获取 y 值\n   * @return number;\n   */\n  get y() {\n    return this.elements[1];\n  }\n\n  /**\n   * 设置 y 值\n   * @param y\n   */\n  set y(y) {\n    this.elements[1] = y;\n    this.triggerChange();\n  }\n\n  /**\n   * 获取 z 值\n   * @return number;\n   */\n  get z() {\n    return this.elements[2];\n  }\n\n  /**\n   * 设置 z 值\n   * @param z\n   */\n  set z(z: number) {\n    this.elements[2] = z;\n    this.triggerChange();\n  }\n\n  /**\n   * 获取旋转顺序\n   */\n  get order() {\n    return this.#order;\n  }\n\n  /**\n   * 设置旋转顺序\n   * @param order\n   */\n  set order(order) {\n    this.#order = order;\n    this.triggerChange();\n  }\n\n  get roll() {\n    return this.x;\n  }\n\n  set roll(roll) {\n    this.x = roll;\n  }\n\n  get pitch() {\n    return this.y;\n  }\n\n  set pitch(pitch) {\n    this.y = pitch;\n  }\n\n  get yaw() {\n    return this.z;\n  }\n\n  set yaw(yaw) {\n    this.z = yaw;\n  }\n\n  /**\n   * 从对象创建欧拉角\n   * @param x\n   * @param y\n   * @param z\n   * @param order\n   */\n  fromObject({ x, y, z, order }) {\n    if (x !== undefined) {\n      this.x = x;\n    }\n    if (y !== undefined) {\n      this.y = y;\n    }\n    if (z !== undefined) {\n      this.z = z;\n    }\n    if (order !== undefined) {\n      this.order = order;\n    }\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 转换到对象\n   */\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z,\n      order: this.order,\n    };\n  }\n\n  /**\n   * 从 Matrix4 创建欧拉角\n   * @param m\n   * @param order\n   * @param update\n   */\n  fromRotationMatrix(m: Matrix4, order = this.#order, update = true) {\n    const te = m.toArray();\n    const m11 = te[0];\n    const m12 = te[4];\n    const m13 = te[8];\n    const m21 = te[1];\n    const m22 = te[5];\n    const m23 = te[9];\n    const m31 = te[2];\n    const m32 = te[6];\n    const m33 = te[10];\n\n    switch (order) {\n      case 'xyz':\n        this.y = Math.asin(clamp(m13, -1, 1));\n\n        if (Math.abs(m13) < 0.9999999) {\n          this.x = Math.atan2(-m23, m33);\n          this.z = Math.atan2(-m12, m11);\n        } else {\n          this.x = Math.atan2(m32, m22);\n          this.z = 0;\n        }\n        break;\n      case 'yxz':\n        this.x = Math.asin(-clamp(m23, -1, 1));\n\n        if (Math.abs(m23) < 0.9999999) {\n          this.y = Math.atan2(m13, m33);\n          this.z = Math.atan2(m21, m22);\n        } else {\n          this.y = Math.atan2(-m31, m11);\n          this.z = 0;\n        }\n\n        break;\n      case 'zxy':\n        this.x = Math.asin(clamp(m32, -1, 1));\n\n        if (Math.abs(m32) < 0.9999999) {\n          this.y = Math.atan2(-m31, m33);\n          this.z = Math.atan2(-m12, m22);\n        } else {\n          this.y = 0;\n          this.z = Math.atan2(m21, m11);\n        }\n        break;\n      case 'zyx':\n        this.y = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < 0.9999999) {\n          this.x = Math.atan2(m32, m33);\n          this.z = Math.atan2(m21, m11);\n        } else {\n          this.x = 0;\n          this.z = Math.atan2(-m12, m22);\n        }\n        break;\n      case 'yzx':\n        this.z = Math.asin(clamp(m21, -1, 1));\n\n        if (Math.abs(m21) < 0.9999999) {\n          this.x = Math.atan2(-m23, m22);\n          this.y = Math.atan2(-m31, m11);\n        } else {\n          this.x = 0;\n          this.y = Math.atan2(m13, m33);\n        }\n        break;\n      case 'xzy':\n        this.z = Math.asin(-clamp(m12, -1, 1));\n\n        if (Math.abs(m12) < 0.9999999) {\n          this.x = Math.atan2(m32, m22);\n          this.y = Math.atan2(m13, m11);\n        } else {\n          this.x = Math.atan2(-m23, m33);\n          this.y = 0;\n        }\n        break;\n      default:\n        throw new Error('Unknown Euler angle order');\n    }\n    this.#order = order;\n    if (update) {\n      this.triggerChange();\n    }\n\n    return this;\n  }\n\n  /**\n   * 从四元数创建欧拉角\n   * @param q\n   */\n  fromQuaternion(q: Quaternion) {\n    const [x, y, z, w] = q.elements;\n    const a = y * y;\n    const s = -2 * (a + z * z) + 1;\n    const o = 2 * (x * y + w * z);\n    let l = -2 * (x * z - w * y);\n    const c = 2 * (y * z + w * x);\n    const h = -2 * (x * x + a) + 1;\n    l = l > 1 ? 1 : l;\n    l = l < -1 ? -1 : l;\n    const d = Math.atan2(c, h);\n    const u = Math.asin(l);\n    const f = Math.atan2(o, s);\n    return new Euler(d, u, f, 'zyx');\n  }\n\n  /**\n   * 从 Vector3 创建欧拉角\n   * @param vec3\n   * @param order\n   */\n  fromVector3(vec3, order = this.#order) {\n    return this.set(vec3.x, vec3.y, vec3.z, order);\n  }\n\n  /**\n   * 转换到四元数\n   */\n  toQuaternion() {\n    const t = Math.cos(0.5 * this.yaw);\n    const e = Math.sin(0.5 * this.yaw);\n    const n = Math.cos(0.5 * this.roll);\n    const r = Math.sin(0.5 * this.roll);\n    const i = Math.cos(0.5 * this.pitch);\n    const a = Math.sin(0.5 * this.pitch);\n    return new Quaternion(\n      t * r * i - e * n * a,\n      t * n * a + e * r * i,\n      e * n * i - t * r * a,\n      t * n * i + e * r * a,\n    );\n  }\n\n  /**\n   * 转换到 Vector3\n   */\n  toVector3() {\n    return new Vector3(this.x, this.y, this.z);\n  }\n\n  /**\n   * 设置欧拉角的 x、y、z、order\n   * @param x\n   * @param y\n   * @param z\n   * @param order\n   */\n  set(x, y, z, order = this.#order) {\n    this.elements[0] = x;\n    this.elements[1] = y;\n    this.elements[2] = z;\n    this.#order = order;\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 克隆此欧拉角对象\n   */\n  clone() {\n    return new Euler().copy(this);\n  }\n\n  /**\n   * 将传入的 euler 的各数值复制到此欧拉角\n   * @param euler\n   */\n  copy(euler: Euler) {\n    let i = 0;\n    for (; i < this.elements.length; i++) {\n      this.elements[i] = euler.elements[i];\n    }\n\n    this.#order = euler.order;\n\n    this.triggerChange();\n    return this;\n  }\n\n  /**\n   * 判断两个欧拉角是否相同\n   * @param e\n   */\n  equals(e: Euler) {\n    return this.x === e.x && this.y === e.y && this.z === e.z && this.order === e.order;\n  }\n\n  /**\n   * 监听欧拉角变更\n   * @param cb 回调函数\n   */\n  onChange(cb: ICallback) {\n    if (!this.#changeCallbacks.includes(cb)) {\n      this.#changeCallbacks.push(cb);\n    }\n  }\n\n  /**\n   * 触发所有的回调函数\n   */\n  triggerChange() {\n    this.#changeCallbacks.forEach((f) => f());\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n","export default function(e,f){var a={white:\"#ffffff\",bisque:\"#ffe4c4\",blue:\"#0000ff\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",azure:\"#f0ffff\",whitesmoke:\"#f5f5f5\",papayawhip:\"#ffefd5\",plum:\"#dda0dd\",blanchedalmond:\"#ffebcd\",black:\"#000000\",gold:\"#ffd700\",goldenrod:\"#daa520\",gainsboro:\"#dcdcdc\",cornsilk:\"#fff8dc\",cornflowerblue:\"#6495ed\",burlywood:\"#deb887\",aquamarine:\"#7fffd4\",beige:\"#f5f5dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkkhaki:\"#bdb76b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",darkgrey:\"#a9a9a9\",peachpuff:\"#ffdab9\",darkmagenta:\"#8b008b\",darkred:\"#8b0000\",darkorchid:\"#9932cc\",darkorange:\"#ff8c00\",darkslateblue:\"#483d8b\",gray:\"#808080\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",wheat:\"#f5deb3\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",ghostwhite:\"#f8f8ff\",darkviolet:\"#9400d3\",magenta:\"#ff00ff\",green:\"#008000\",dodgerblue:\"#1e90ff\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",blueviolet:\"#8a2be2\",forestgreen:\"#228b22\",lawngreen:\"#7cfc00\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",fuchsia:\"#ff00ff\",brown:\"#a52a2a\",maroon:\"#800000\",mediumblue:\"#0000cd\",lightcoral:\"#f08080\",darkturquoise:\"#00ced1\",lightcyan:\"#e0ffff\",ivory:\"#fffff0\",lightyellow:\"#ffffe0\",lightsalmon:\"#ffa07a\",lightseagreen:\"#20b2aa\",linen:\"#faf0e6\",mediumaquamarine:\"#66cdaa\",lemonchiffon:\"#fffacd\",lime:\"#00ff00\",khaki:\"#f0e68c\",mediumseagreen:\"#3cb371\",limegreen:\"#32cd32\",mediumspringgreen:\"#00fa9a\",lightskyblue:\"#87cefa\",lightblue:\"#add8e6\",midnightblue:\"#191970\",lightpink:\"#ffb6c1\",mistyrose:\"#ffe4e1\",moccasin:\"#ffe4b5\",mintcream:\"#f5fffa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",navajowhite:\"#ffdead\",navy:\"#000080\",mediumvioletred:\"#c71585\",powderblue:\"#b0e0e6\",palegoldenrod:\"#eee8aa\",oldlace:\"#fdf5e6\",paleturquoise:\"#afeeee\",mediumturquoise:\"#48d1cc\",mediumorchid:\"#ba55d3\",rebeccapurple:\"#663399\",lightsteelblue:\"#b0c4de\",mediumslateblue:\"#7b68ee\",thistle:\"#d8bfd8\",tan:\"#d2b48c\",orchid:\"#da70d6\",mediumpurple:\"#9370db\",purple:\"#800080\",pink:\"#ffc0cb\",skyblue:\"#87ceeb\",springgreen:\"#00ff7f\",palegreen:\"#98fb98\",red:\"#ff0000\",yellow:\"#ffff00\",slateblue:\"#6a5acd\",lavenderblush:\"#fff0f5\",peru:\"#cd853f\",palevioletred:\"#db7093\",violet:\"#ee82ee\",teal:\"#008080\",slategray:\"#708090\",slategrey:\"#708090\",aliceblue:\"#f0f8ff\",darkseagreen:\"#8fbc8f\",darkolivegreen:\"#556b2f\",greenyellow:\"#adff2f\",seagreen:\"#2e8b57\",seashell:\"#fff5ee\",tomato:\"#ff6347\",silver:\"#c0c0c0\",sienna:\"#a0522d\",lavender:\"#e6e6fa\",lightgreen:\"#90ee90\",orange:\"#ffa500\",orangered:\"#ff4500\",steelblue:\"#4682b4\",royalblue:\"#4169e1\",turquoise:\"#40e0d0\",yellowgreen:\"#9acd32\",salmon:\"#fa8072\",saddlebrown:\"#8b4513\",sandybrown:\"#f4a460\",rosybrown:\"#bc8f8f\",darksalmon:\"#e9967a\",lightgoldenrodyellow:\"#fafad2\",snow:\"#fffafa\",lightgrey:\"#d3d3d3\",lightgray:\"#d3d3d3\",dimgray:\"#696969\",dimgrey:\"#696969\",olivedrab:\"#6b8e23\",olive:\"#808000\"},r={};for(var d in a)r[a[d]]=d;var l={};e.prototype.toName=function(f){if(!(this.rgba.a||this.rgba.r||this.rgba.g||this.rgba.b))return\"transparent\";var d,i,n=r[this.toHex()];if(n)return n;if(null==f?void 0:f.closest){var o=this.toRgb(),t=1/0,b=\"black\";if(!l.length)for(var c in a)l[c]=new e(a[c]).toRgb();for(var g in a){var u=(d=o,i=l[g],Math.pow(d.r-i.r,2)+Math.pow(d.g-i.g,2)+Math.pow(d.b-i.b,2));u<t&&(t=u,b=g)}return b}};f.string.push([function(f){var r=f.toLowerCase(),d=\"transparent\"===r?\"#0000\":a[r];return d?new e(d).toRgb():null},\"name\"])}\n","import { colord, extend } from 'colord';\nimport type { AnyColor } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\nimport Vector4 from '../math/Vector4';\nimport Vector3 from '../math/Vector3';\nimport { isUndef, isNumber, isHex, clamp } from '../utils';\n\nextend([namesPlugin]);\n\n/**\n * 归一化\n * @param a\n * @param min\n * @param max\n */\nconst normalize = (a, min, max) => {\n  const hex = isHex(a);\n  const diff = max - min;\n  let v = clamp(Number.parseFloat(`${a}`), min, max);\n  if (hex) {\n    v = Number.parseInt('' + a * max, 10) / 100;\n  }\n  return Math.abs(v - max) < 1e-6 ? 1 : (a % diff) / diff;\n};\n\n/**\n * 一个表示颜色的类，可以使用这个类来初始化颜色\n * ```ts\n * // 默认是白色\n * const color1 = new Color();\n *\n * // 16进制颜色\n * const color2 = new Color('#ff0000');\n *\n * // RGB\n * const color3 = new Color('rgb(255, 0, 0)');\n * const color3 = new Color({ r: 255, g: 255, b: 255 });\n * const color3 = new Color({ r: 255, g: 255, b: 255, a: 1 });\n *\n * // css 颜色名称\n * const color5 = new Color('skyblue');\n *\n * // HSL\n * const color6 = new Color('hsl(0, 100%, 50%)');\n *\n * // HSV\n * const color6 = new Color({ h: 360, s: 100, v: 100, a: 1 });\n *\n * // 设置 rgba 值, 支持归一化和非归一化的值\n * const color7 = new Color(1, 0, 0);\n * const color7 = new Color(1, 0, 0, 1, true);\n * ```\n */\nexport default class Color {\n  public r: number;\n  public g: number;\n  public b: number;\n  public a: number;\n\n  /**\n   * @param v 可以是 rgba 的 r 通道值，也可以是 AnyColor\n   * @param g g 通道\n   * @param b b 通道\n   * @param a alpha 通道\n   * @param isNormalized 是否是归一化的数值\n   */\n  constructor(v: number | AnyColor = 255, g?: number, b?: number, a = 1, isNormalized = false) {\n    this.r = 1;\n    this.g = 1;\n    this.b = 1;\n    this.a = 1;\n\n    /**\n     * 如果仅传入一个值，说明要么是数字要么是一个表示颜色的字符串或者对象\n     */\n    if (isUndef(g) && isUndef(b)) {\n      // 此处是（0-255 的值）可能和 three 不太一样\n      if (isNumber(v) && v <= 255) {\n        this.setRGBA(v, v, v, this.a, isNormalized);\n      } else {\n        // css 变量和颜色字符串都在此处解析\n        const rgb = colord(v as AnyColor).toRgb();\n        if (rgb) {\n          this.setRGBA(rgb.r, rgb.g, rgb.b, rgb.a);\n        } else {\n          console.error('Unsupported color value {'.concat(String(v), '} provided'));\n        }\n      }\n    } else {\n      this.setRGBA(v, g, b, a);\n    }\n  }\n\n  /**\n   * 解析颜色，凡是可以被 [colord](https://github.com/omgovich/colord) 解析的都可以使用\n   * @param c\n   */\n  fromColor(c: AnyColor) {\n    const color = colord(c).toRgb();\n    return this.setRGBA(color.r, color.g, color.b, color.a);\n  }\n\n  /**\n   * 解析 hsl 颜色\n   * @param h\n   * @param s\n   * @param l\n   * @param a\n   */\n  fromHSL(h, s, l, a = 1) {\n    const color = colord({\n      h,\n      s,\n      l,\n      a,\n    }).toRgb();\n    return this.setRGBA(color.r, color.g, color.b, color.a);\n  }\n\n  /**\n   * 解析 hsv 颜色\n   * @param h\n   * @param s\n   * @param v\n   * @param a\n   */\n  fromHSV(h, s, v, a = 1) {\n    const color = colord({\n      h,\n      s,\n      v,\n      a,\n    }).toRgb();\n    return this.setRGBA(color.r, color.g, color.b, color.a);\n  }\n\n  /**\n   * 设置 rgb 数值\n   * @param r r 值，一般为 0-255\n   * @param g g 值，一般为 0-255\n   * @param b b 值，一般为 0-255\n   */\n  setRGB(r: number, g: number, b: number) {\n    this.setRGBA(r, g, b, this.a);\n    return this;\n  }\n\n  /**\n   * 设置各通道的值\n   * @param r red 通道\n   * @param g green 通道\n   * @param b blue 通道\n   * @param a alpha 通道\n   * @param isNormalized 是否已经归一化（一般从颜色字符串解析的都是未归一化的）\n   */\n  setRGBA(r, g, b, a, isNormalized?: boolean) {\n    this.r = isNormalized ? r : normalize(r, 0, 255);\n    this.g = isNormalized ? g : normalize(g, 0, 255);\n    this.b = isNormalized ? b : normalize(b, 0, 255);\n    this.setAlpha(a);\n    return this;\n  }\n\n  /**\n   * 设置 alpha 通道\n   * @param alpha\n   */\n  setAlpha(alpha) {\n    if (alpha > 1) {\n      this.a = normalize(alpha, 0, 255);\n    } else {\n      this.a = alpha;\n    }\n    return this;\n  }\n\n  /**\n   * 输出 16 进制字符串\n   */\n  toHex() {\n    return colord(this.toObject()).toHex();\n  }\n\n  /**\n   * 输出 hsl 对象\n   */\n  toHSL() {\n    return colord(this.toObject()).toHsl();\n  }\n\n  /**\n   * 输出 hsv 对象\n   */\n  toHSV() {\n    return colord(this.toObject()).toHsv();\n  }\n\n  /**\n   * 将颜色转换为对象\n   * @param isNormalized 是否进行归一化，默认采用 0-255\n   */\n  toObject(isNormalized = false) {\n    const m = isNormalized ? 1 : 255;\n    return {\n      r: this.r * m,\n      g: this.g * m,\n      b: this.b * m,\n      a: this.a,\n    };\n  }\n\n  /**\n   * 转换为数组（一般已经归一化。可以直接传递给 gl）\n   */\n  toArray() {\n    return [this.r, this.g, this.b, this.a];\n  }\n\n  /**\n   * 转换为 Vector4\n   */\n  toVector() {\n    return new Vector4().fromArray(this.toArray());\n  }\n\n  /**\n   * 转换为 Vector3\n   */\n  toVector3() {\n    return new Vector3().fromArray(this.toArray());\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString() {\n    return `${this.constructor.name}(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\n  }\n}\n\nexport type ColorLike =\n  | Color\n  | {\n      r: number;\n      g: number;\n      b: number;\n      a?: number;\n    };\n","import { frustum, lookAt, perspective, ortho } from 'gl-matrix/mat4';\n\nimport Matrix4 from './Matrix4';\nimport Vector3 from './Vector3';\n\nexport default class ProjectionMatrix extends Matrix4 {\n  /**\n   * 一般用于生成相机的视椎体，用来做视椎剔除加速渲染\n   * @param mat4\n   * @param left\n   * @param right\n   * @param top\n   * @param bottom\n   * @param near\n   * @param far\n   */\n  frustum(mat4, left, right, top, bottom, near, far) {\n    frustum(mat4.elements, left, right, bottom, top, near, far);\n    return this;\n  }\n\n  /**\n   * 生成平面相机投影矩阵\n   * @param left\n   * @param right\n   * @param top\n   * @param bottom\n   * @param near\n   * @param far\n   */\n  orthographic(left, right, top, bottom, near, far) {\n    ortho(this.elements, left, right, bottom, top, near, far);\n    return this;\n  }\n\n  /**\n   * 生成透视相机投影矩阵\n   * @param fovy\n   * @param aspect\n   * @param near\n   * @param far\n   */\n  perspective(fovy, aspect, near, far) {\n    perspective(this.elements, fovy, aspect, near, far);\n    return this;\n  }\n\n  /**\n   * 设置物体的朝向\n   * @param eye\n   * @param target\n   * @param up\n   */\n  lookAt(eye, target = new Vector3(0, 0, 0), up = new Vector3(0, 1, 0)) {\n    lookAt(this.elements, eye.elements, target.elements, up.elements);\n    return this;\n  }\n\n  /**\n   * 转换为字符串\n   */\n  toString(): string {\n    return `${this.constructor.name}(${this.elements.join(', ')})`;\n  }\n}\n","import type { WithNull } from '../types';\nimport Euler from '../math/Euler';\nimport Quaternion from '../math/Quaternion';\nimport Vector3 from '../math/Vector3';\nimport ProjectionMatrix from '../math/ProjectionMatrix';\n\n/**\n * 三维物体，是大部分对象的基类，提供了一系列的属性和方法来对三维空间中的物体进行操作\n */\nexport default class Object3D {\n  /**\n   * 是否可见\n   */\n  public visible: boolean;\n\n  /**\n   * 局部变换矩阵\n   */\n  public localMatrix: ProjectionMatrix;\n\n  /**\n   * 物体的世界变换矩阵 (如果没有父级，那么他和局部变化矩阵相同)\n   */\n  public worldMatrix: ProjectionMatrix;\n\n  /**\n   * 当这个属性设置了之后，它将计算每一帧的位移、旋转（四元变换）和缩放矩阵，并重新计算 `worldMatrix` 属性\n   */\n  public matrixAutoUpdate: boolean;\n\n  /**\n   * 物体局部位置\n   */\n  public position: Vector3;\n\n  /**\n   * 物体的局部缩放\n   */\n  public scale: Vector3;\n\n  /**\n   * 物体的局部旋转\n   */\n  public rotation: Euler;\n\n  /**\n   * 物体的局部旋转\n   */\n  public quaternion: Quaternion;\n\n  /**\n   * 物体的朝向\n   */\n  public up: Vector3;\n\n  /**\n   * 对象子级\n   */\n  public children: Object3D[];\n\n  /**\n   * 对象父级\n   */\n  public parent: WithNull<Object3D>;\n\n  /**\n   * 当这个属性设置了之后，它将计算在那一帧中的 `worldMatrix`，并将这个值重置为false。默认值为false\n   */\n  public worldMatrixNeedsUpdate: boolean;\n\n  constructor() {\n    this.visible = true;\n    this.localMatrix = new ProjectionMatrix();\n    this.worldMatrix = new ProjectionMatrix();\n    this.matrixAutoUpdate = true;\n    this.position = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.rotation = new Euler();\n    this.quaternion = new Quaternion();\n    this.up = new Vector3(0, 1, 0);\n    this.parent = null;\n    this.children = [];\n    this.worldMatrixNeedsUpdate = false;\n    this.rotation.onChange(() => {\n      this.quaternion.fromEuler(this.rotation);\n    });\n    this.quaternion.onChange(() => {\n      this.rotation.fromQuaternion(this.quaternion);\n    });\n  }\n\n  /**\n   * 添加对象到这个对象的子级\n   * @param object\n   * @param notifyChild\n   */\n  add(object: Object3D, notifyChild = true) {\n    if (!this.contains(object)) {\n      this.children.push(object);\n    }\n    if (notifyChild) {\n      object.setParent(this, false);\n    }\n  }\n\n  /**\n   * 从此对象移除传入的对象（如果存在）\n   * @param object\n   * @param notifyChild\n   */\n  remove(object: Object3D, notifyChild = true) {\n    if (this.contains(object)) {\n      this.children.splice(this.children.indexOf(object), 1);\n    }\n    if (notifyChild) {\n      object.setParent(null, false);\n    }\n  }\n\n  /**\n   * 判断此渲染对象的子集是否包含传入的渲染对象\n   * @param object\n   */\n  contains(object: Object3D) {\n    return this.children.includes(object);\n  }\n\n  /**\n   * 设置此渲染对象的父集\n   * @param object 渲染对象\n   * @param notifyParent 设置是否将此渲染对象添加到传入的渲染对象中\n   */\n  setParent(object, notifyParent = true) {\n    if (this.parent && object !== this.parent) {\n      this.parent.remove(this, false);\n    }\n    this.parent = object;\n    if (notifyParent && object) {\n      object.add(this, false);\n    }\n  }\n\n  /**\n   * 遍历此对象（包含子对象）\n   * @param callback 回调函数\n   */\n  traverse(callback) {\n    if (!callback(this)) {\n      for (let i = 0, l = this.children.length; i < l; i++) {\n        this.children[i].traverse(callback);\n      }\n    }\n  }\n\n  /**\n   * 旋转物体使其在世界空间中面朝一个点\n   * @param eye 朝向位置\n   * @param invert 是否反转\n   */\n  lookAt(eye: Vector3, invert?: boolean) {\n    if (invert) {\n      this.localMatrix.lookAt(this.position, eye, this.up);\n    } else {\n      this.localMatrix.lookAt(eye, this.position, this.up);\n    }\n    this.localMatrix.getRotation(this.quaternion);\n    this.rotation.fromQuaternion(this.quaternion);\n  }\n\n  /**\n   * 更新渲染对象的世界矩阵\n   * @param force 是否更新次渲染对象的子集\n   */\n  updateMatrixWorld(force?: boolean) {\n    let f = force;\n    if (this.matrixAutoUpdate) {\n      this.updateMatrix();\n    }\n    if (this.worldMatrixNeedsUpdate || f) {\n      if (this.parent === null) {\n        this.worldMatrix.copy(this.localMatrix);\n      } else {\n        this.worldMatrix.multiply(this.parent.worldMatrix, this.localMatrix);\n      }\n\n      this.worldMatrixNeedsUpdate = false;\n      f = true;\n    }\n\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      const child = this.children[i];\n\n      child.updateMatrixWorld(f);\n    }\n  }\n\n  /**\n   * 更新局部变换矩阵\n   */\n  updateMatrix() {\n    this.localMatrix.compose(this.position, this.quaternion, this.scale);\n    this.worldMatrixNeedsUpdate = true;\n  }\n\n  /**\n   * 从局部矩阵计算位置，旋转和缩放\n   */\n  decompose() {\n    this.localMatrix.getTranslation(this.position);\n    this.localMatrix.getRotation(this.quaternion);\n    this.localMatrix.getScale(this.scale);\n    this.rotation.fromQuaternion(this.quaternion);\n  }\n\n  /**\n   * 克隆此渲染对象\n   */\n  clone() {\n    return new Object3D().copy(this, false);\n  }\n\n  /**\n   * 复制给定的对象到这个对象中\n   * @param object 渲染对象\n   * @param recursive 设置是否复制子对象\n   */\n  copy(object: Object3D, recursive?: boolean) {\n    this.visible = object.visible;\n    this.position.copy(object.position);\n    this.scale.copy(object.scale);\n    this.rotation.copy(object.rotation);\n    this.quaternion.copy(object.quaternion);\n    this.up.copy(object.up);\n    this.localMatrix.copy(object.localMatrix);\n    this.worldMatrix.copy(object.worldMatrix);\n    this.matrixAutoUpdate = object.matrixAutoUpdate;\n\n    if (recursive) {\n      for (let i = 0, n = object.children.length; i < n; i++) {\n        const children = object.children[i];\n        this.add(children.clone());\n      }\n    }\n    return this;\n  }\n}\n","import Renderer from './Renderer';\n\n/**\n * 这是一个基类，主要用于暴露 `renderer` 和 `gl` 以及 `rendererState`\n */\nexport default class Base {\n  public renderer: Renderer;\n\n  constructor(renderer: Renderer) {\n    this.renderer = renderer;\n  }\n\n  /**\n   * 获取 `webgl` 实例\n   */\n  get gl(): WebGLRenderingContext | WebGL2RenderingContext {\n    return this.renderer.gl;\n  }\n\n  /**\n   * 获取渲染状态\n   */\n  get rendererState() {\n    return this.renderer.state;\n  }\n}\n","import { uid } from '../utils';\nimport type { WithNull } from '../types';\nimport Renderer from './Renderer';\n\n/**\n * `attribute` 支持的数据类型\n */\nexport type DataType =\n  | Float32Array\n  | Float64Array\n  | Uint32Array\n  | Uint16Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int32Array\n  | Int16Array\n  | Int8Array;\n\nexport interface Attribute {\n  /**\n   * `Attribute` 数据，必须是 `TypedArray` 类型\n   */\n  data: DataType;\n\n  /**\n   * 指定缓冲区每个顶点分量的个数, 一般为 1-4\n   */\n  size?: number;\n\n  /**\n   * 指定数组中每个元素的数据类型，一般我们不传时会由内部进行判断。\n   */\n  type?: GLenum;\n\n  /**\n   * 指定当整数值转换为浮点数时是否应该将整数数值归一化到特定的范围。\n   * - 对于 `gl.BYTE` 和 `gl.SHORT`，当设置为`true`时，归一化到 [-1, 1]。\n   * - 对于 `gl.UNSIGNED_BYTE` 和 `gl.UNSIGNED_SHORT`，当设置为`true`时，归一化到 [0, 1]。\n   * - 对于 `gl.FLOAT` 和 `gl.HALF_FLOAT`，此参数无效。\n   */\n  normalized?: boolean;\n\n  /**\n   * 指定实例化渲染的数量，仅当 `ANGLE_instanced_arrays` 扩展可用时才支持此参数，在\n   * `webgl2` 中默认支持，调用函数为 `vertexAttribDivisor`\n   */\n  divisor?: number;\n\n  /**\n   * 以字节为单位指定连续顶点属性开始之间的偏移量(即数组中一行长度)\n   */\n  stride?: number;\n\n  /**\n   * 指定顶点属性数组中第一部分的字节偏移量。必须是类型的字节长度的倍数\n   */\n  offset?: number;\n\n  /**\n   * 顶点数量\n   */\n  count?: number;\n\n  /**\n   * 指定缓冲区对象，常用的值为`gl.ARRAY_BUFFER` 和 `gl.ELEMENT_ARRAY_BUFFER`。当然在`webgl2` 中有一些新的可用值，如 `gl.UNIFORM_BUFFER`和 `gl.TRANSFORM_FEEDBACK_BUFFER`。\n   */\n  target?: GLenum;\n\n  /**\n   * 标记如何使用这些数据，`webgl` 会针对性的做一些优化，默认是 `gl.STATIC_DRAW`，即标记数据不会经常性改变。\n   * 其他可用值请参考 https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData。\n   */\n  usage?: GLenum;\n\n  /**\n   * `WebGLBuffer`，一般我们不需要指定，会在内部进行创建\n   */\n  buffer?: WebGLBuffer;\n\n  /**\n   * 标记此 `Attribute` 是否需要重新上传 `GPU`，一般我们在数据改变时需要将此值设置为`true`。\n   */\n  needsUpdate?: boolean;\n}\n\n/**\n * 获取 `Buffer` 数据类型\n * @param gl\n * @param data\n */\nconst getBufferType = (gl, data) => {\n  if (data instanceof Float32Array || data instanceof Float64Array) {\n    return gl.FLOAT;\n  }\n\n  if (data instanceof Uint16Array) {\n    return gl.UNSIGNED_SHORT;\n  }\n\n  if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {\n    return gl.UNSIGNED_BYTE;\n  }\n\n  if (data instanceof Uint32Array) {\n    return gl.UNSIGNED_INT;\n  }\n\n  if (data instanceof Int8Array) {\n    return gl.BYTE;\n  }\n\n  if (data instanceof Int16Array) {\n    return gl.SHORT;\n  }\n\n  if (data instanceof Int32Array) {\n    return gl.INT;\n  }\n};\n\n/**\n * 存储和 `BufferAttribute` 相关的属性\n */\nexport default class BufferAttribute {\n  /**\n   * `BufferAttribute` 的 `id`，不传时由内部生成。\n   */\n  public id: string;\n\n  /**\n   * `Attribute` 数据，必须是 `TypedArray` 类型\n   */\n  public data: DataType;\n\n  /**\n   * `BufferAttribute`中元素的数据类型\n   */\n  public type: GLenum;\n\n  /**\n   * `BufferAttribute`中缓冲区每个顶点分量的个数, 一般为 1-4\n   */\n  public size: number;\n\n  /**\n   * `BufferAttribute` 是否是实例化数据\n   */\n  public instanced: boolean;\n\n  /**\n   * `BufferAttribute`中缓冲区顶点的偏移量\n   */\n  public stride: number;\n\n  /**\n   * `BufferAttribute`中顶点属性数组中第一部分的字节偏移量\n   */\n  public offset: number;\n\n  /**\n   * 指定实例化渲染的数量\n   */\n  public divisor: number;\n\n  /**\n   * 当整数值转换为浮点数时是否应该将整数数值归一化到特定的范围\n   */\n  public normalized: boolean;\n\n  /**\n   * 标记此 `BufferAttribute` 是否需要重新上传 `GPU`，一般我们在数据改变时需要将此值设置为`true`。\n   */\n  public needsUpdate: boolean;\n\n  /**\n   * 顶点数量\n   */\n  public count: number;\n\n  /**\n   * 标记如何使用这些数据，`webgl` 会针对性的做一些优化，默认是 `gl.STATIC_DRAW`，即标记数据不会经常性改变。\n   * 其他可用值请参考 https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData。\n   */\n  public usage: GLenum;\n\n  /**\n   * 缓冲区对象，常用的值为`gl.ARRAY_BUFFER` 和 `gl.ELEMENT_ARRAY_BUFFER`。当然在`webgl2` 中有一些新的可用值，如 `gl.UNIFORM_BUFFER`和 `gl.TRANSFORM_FEEDBACK_BUFFER`。\n   */\n  public target: GLenum;\n\n  /**\n   * WebGLBuffer\n   */\n  public buffer: WithNull<WebGLBuffer>;\n\n  constructor(renderer: Renderer, attribute: Attribute) {\n    const attr = Object.assign(\n      {},\n      {\n        size: 1,\n        normalized: true,\n        stride: 0,\n        offset: 0,\n        divisor: 0,\n        usage: renderer.gl.STATIC_DRAW,\n      },\n      attribute,\n    );\n    this.id = uid('attribute');\n    this.needsUpdate = false;\n\n    if (!attribute.data || Array.isArray(attribute.data)) {\n      throw new TypeError('BufferAttribute: data should be a typed array');\n    }\n\n    this.data = attr.data;\n    this.size = attr.size || 1;\n    this.type = attr.type || getBufferType(renderer.gl, attr.data);\n    this.normalized = attr.normalized || false;\n    this.stride = attr.stride || 0;\n    this.offset = attr.offset || 0;\n    this.divisor = attr.divisor || 0;\n    this.instanced = attr.divisor > 0;\n    this.usage = attr.usage || renderer.gl.STATIC_DRAW;\n\n    if (attr.target) {\n      this.target = attr.target;\n    }\n\n    let count = attr.count;\n    if (attr.count === undefined || attr.count === null) {\n      count = attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size;\n    }\n    this.count = count as number;\n  }\n}\n","import { omit, uid } from '../utils';\nimport Program from '../core/Program';\nimport Base from './Base';\nimport Renderer from './Renderer';\nimport BufferAttribute from './BufferAttribute';\nimport type { Attribute, DataType } from './BufferAttribute';\nimport Vector3 from '../math/Vector3';\nimport Vector4 from '../math/Vector4';\n\nconst tempVec3 = new Vector3();\n\ntype AttributesOmitKeys = 'id' | 'buffer';\n\nexport interface Attributes {\n  [key: string]: Attribute;\n}\n\n/**\n * 几何体对象，包含了顶点位置，面片索引、法向量、颜色值、UV 坐标和自定义缓存属性值等，这些数据最终会上传到`GPU`中。\n *\n * 示例代码：\n *\n * ```ts\n * const geometry = new ve.Geometry(renderer, {\n *     position: {\n *       size: 3,\n *       data: new Float32Array([\n *         -0.5, 0.5, 0,\n *         -0.5, -0.5, 0,\n *         0.5, 0.5, 0,\n *         0.5, -0.5, 0\n *       ])\n *     },\n *     uv: {\n *       size: 2,\n *       data: new Float32Array([0, 1, 1, 1, 0, 0, 1, 0])\n *     },\n *     index: {\n *       data: new Uint16Array([0, 1, 2, 1, 3, 2])\n *     },\n *   });\n * ```\n */\nexport default class Geometry extends Base {\n  #id: string;\n\n  #attributes: Map<string, BufferAttribute>;\n\n  #VAOs: Map<string, any>;\n\n  #bounds: any;\n\n  drawRange: any;\n\n  instancedCount: number;\n\n  isInstanced: boolean;\n\n  drawMode: number;\n\n  /**\n   * @param renderer 渲染器\n   * @param attributes 属性信息（顶点数据）\n   */\n  constructor(renderer: Renderer, attributes: Attributes = {}) {\n    super(renderer);\n    this.drawRange = {\n      start: 0,\n      count: 0,\n    };\n    this.instancedCount = 0;\n    this.isInstanced = false;\n    this.#attributes = new Map();\n    this.#VAOs = new Map();\n\n    this.#id = uid('geometry');\n    this.drawMode = this.gl.TRIANGLES;\n    renderer.bindVertexArray(null);\n    renderer.state.setActiveGeometry(null);\n    // eslint-disable-next-line guard-for-in\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      if (attribute instanceof BufferAttribute) {\n        if (name === 'index') {\n          this.setIndex(attribute);\n        } else {\n          this.addAttribute(name, attribute);\n        }\n      } else {\n        if (attribute.data) {\n          const n = new BufferAttribute(this.renderer, attribute);\n          if (name === 'index') {\n            this.setIndex(n);\n          } else {\n            this.addAttribute(name, n);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * 获取当前几何体数据的唯一标识\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * 获取全部的属性信息\n   */\n  get attributes() {\n    return this.#attributes;\n  }\n\n  /**\n   * 获取属性数据\n   */\n  get attributesData(): Attributes {\n    const attributes: Attributes = {};\n    const iterator = this.#attributes.entries();\n    for (let i = 0; i < this.#attributes.size; i++) {\n      const entry = iterator.next().value;\n      attributes[entry[0]] = omit<Attribute & { id: string }, AttributesOmitKeys>(entry[1], [\n        'id',\n        'buffer',\n      ]);\n    }\n\n    return attributes;\n  }\n\n  /**\n   * 获取顶点索引属性\n   */\n  get index() {\n    return this.attributes.get('index');\n  }\n\n  /**\n   * 获取当前几何体的包围盒\n   */\n  get bounds() {\n    return this.#bounds;\n  }\n\n  /**\n   * 手动设置包围盒，一般我们只需要内部计算\n   * @param bounds\n   */\n  set bounds(bounds) {\n    this.#bounds = bounds;\n  }\n\n  /**\n   * 添加对应的属性信息（顶点数据）\n   * @param name\n   * @param attribute\n   */\n  addAttribute(name: string, attribute: BufferAttribute) {\n    if (!attribute.target) {\n      attribute.target = name === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n    }\n    attribute.needsUpdate = false;\n    this.attributes.set(name, attribute);\n    if (!attribute.buffer) {\n      attribute.buffer = this.gl.createBuffer();\n      this.updateAttribute(attribute);\n    }\n    if (attribute.divisor) {\n      this.isInstanced = true;\n      if (this.instancedCount && this.instancedCount !== attribute.count * attribute.divisor) {\n        this.instancedCount = Math.min(this.instancedCount, attribute.count * attribute.divisor);\n        // eslint-disable-next-line max-len\n        return console.warn(\n          `Geometry has multiple instanced buffers of different length - instancedCount: ${this.instancedCount}, count: ${attribute.count}, divisor: ${attribute.divisor}, attribute: ${name}`,\n        );\n      }\n      this.instancedCount = attribute.count * attribute.divisor;\n    } else if (name === 'index') {\n      this.drawRange.count = attribute.count;\n    } else if (!this.index) {\n      this.drawRange.count = Math.max(this.drawRange.count, attribute.count);\n    }\n  }\n\n  /**\n   * 获取对应的属性信息（顶点数据）\n   * @param name\n   */\n  getAttribute(name) {\n    return this.attributes.get(name);\n  }\n\n  /**\n   * 设置对应的属性数据\n   * @param name\n   * @param data\n   */\n  setAttributeData(name, data) {\n    const attribute = this.getAttribute(name);\n    if (attribute) {\n      attribute.data = data;\n      attribute.needsUpdate = true;\n    }\n  }\n\n  /**\n   * 更新顶点属性数据\n   * @param attribute\n   */\n  updateAttribute(attribute) {\n    const createBuffer = !attribute.buffer;\n    if (createBuffer) {\n      attribute.buffer = this.gl.createBuffer();\n    }\n    if (this.rendererState.boundBuffer !== attribute.buffer) {\n      this.gl.bindBuffer(attribute.target, attribute.buffer);\n      this.rendererState.boundBuffer = attribute.buffer;\n    }\n\n    // if (createBuffer) {\n    //   this.gl.bufferData(attribute.target, attribute.data, attribute.usage);\n    // } else {\n    //   this.gl.bufferSubData(attribute.target, 0, attribute.data);\n    // }\n    this.gl.bufferData(attribute.target, attribute.data, attribute.usage);\n    attribute.needsUpdate = false;\n  }\n\n  /**\n   * 移除属性信息\n   * @param attribute\n   */\n  removeAttribute(attribute) {\n    this.attributes.delete(attribute);\n  }\n\n  /**\n   * 设置顶点索引数据\n   * @param index\n   */\n  setIndex(index) {\n    if (index instanceof BufferAttribute) {\n      index.size = 1;\n      this.addAttribute('index', index);\n    } else {\n      // eslint-disable-next-line max-len\n      const buffer = new BufferAttribute(this.renderer, {\n        data: index.length > 65535 ? new Uint32Array(index) : new Uint16Array(index),\n        size: 1,\n      });\n      this.addAttribute('index', buffer);\n    }\n    this.drawRange.count = this.index?.count;\n  }\n\n  /**\n   * 设置顶点数据\n   * @param data\n   */\n  setVertices(data) {\n    const array: number[] = [];\n    const len = data.length;\n    for (let i = 0; i < len; i++) {\n      const item: number[] = data[i];\n      array.push(item[0], item[1], item[2]);\n    }\n    this.addAttribute(\n      'position',\n      new BufferAttribute(this.renderer, {\n        data: new Float32Array(array),\n        size: 3,\n      }),\n    );\n  }\n\n  /**\n   * 设置顶点法向量数据\n   * @param data\n   */\n  setNormals(data) {\n    this.addAttribute(\n      'normal',\n      new BufferAttribute(this.renderer, {\n        data: new Float32Array(data),\n        size: 2,\n      }),\n    );\n  }\n\n  /**\n   * 设置纹理 UV 数据\n   * @param data\n   */\n  setUVs(data) {\n    this.addAttribute(\n      'uv',\n      new BufferAttribute(this.renderer, {\n        data: new Float32Array(data),\n        size: 2,\n      }),\n    );\n  }\n\n  /**\n   * 设置顶点颜色数据\n   * @param colors\n   */\n  setColors(colors: (Vector4 | Vector3 | number[] | Float32Array | Float64Array)[]) {\n    const data: number[] = [];\n    for (let i = 0; i < colors.length; i++) {\n      let color = colors[i];\n      if (color && (color instanceof Vector3 || color instanceof Vector4)) {\n        color = color.toArray();\n      }\n      data.push(color[0], color[1], color[2], color[3] || 1);\n    }\n    this.addAttribute(\n      'color',\n      new BufferAttribute(this.renderer, {\n        data: new Float32Array(data),\n        size: 4,\n      }),\n    );\n  }\n\n  /**\n   * 设置顶点渲染的开始索引和数量\n   * @param start 开始索引\n   * @param count 数量\n   */\n  setDrawRange(start: number, count: number) {\n    this.drawRange.start = start;\n    this.drawRange.count = count;\n  }\n\n  /**\n   * 设置实例化渲染的数量\n   * @param count 数量\n   */\n  setInstancedCount(count: number) {\n    this.instancedCount = count;\n  }\n\n  /**\n   * 创建 Vao\n   * @param program\n   */\n  createVAO(program: Program) {\n    const { attributeOrder } = program;\n    const vao = this.renderer.createVertexArray();\n    this.renderer.bindVertexArray(vao);\n    this.#VAOs.set(attributeOrder, vao);\n    this.bindAttributes(program);\n  }\n\n  /**\n   * 绑定顶点属性数据\n   * https://devdocs.io/dom/webgl2renderingcontext/vertexattribipointer\n   * @param program\n   */\n  bindAttributes(program: Program) {\n    program.attributeLocations.forEach((location, { name, type }) => {\n      const attributes = this.attributes.get(name);\n      if (!attributes) return;\n      this.gl.bindBuffer(attributes.target, attributes.buffer);\n      this.rendererState.boundBuffer = attributes.buffer;\n      let numLoc = 1;\n      if (type === this.gl.FLOAT_MAT2) numLoc = 2;\n      if (type === this.gl.FLOAT_MAT3) numLoc = 3;\n      if (type === this.gl.FLOAT_MAT4) numLoc = 4;\n\n      const size = attributes.size / numLoc;\n      const stride = numLoc === 1 ? 0 : numLoc * numLoc * numLoc;\n      const offset = numLoc === 1 ? 0 : numLoc * numLoc;\n\n      for (let i = 0; i < numLoc; i++) {\n        const attribIndex = location + i;\n        this.gl.vertexAttribPointer(\n          attribIndex,\n          size,\n          attributes.type,\n          attributes.normalized,\n          attributes.stride + stride,\n          attributes.offset + offset,\n        );\n        this.gl.enableVertexAttribArray(attribIndex);\n        this.renderer.vertexAttribDivisor(attribIndex, attributes.divisor);\n      }\n    });\n    const index = this.attributes.get('index');\n    if (index) {\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, index.buffer);\n    }\n  }\n\n  /**\n   * 计算当前几何体的的矩形边界（立方体包围盒）\n   * @param vertices 外部传入的顶点数据\n   */\n  computeBoundingBox(vertices?: DataType | number[]) {\n    const { data, offset = 0, stride, size } = this.attributes.get('position') as BufferAttribute;\n    if (!this.#bounds) {\n      this.#bounds = {\n        min: new Vector3(),\n        max: new Vector3(),\n        center: new Vector3(),\n        scale: new Vector3(),\n        radius: Number.POSITIVE_INFINITY,\n      };\n    }\n    this.#bounds.min.setScalar(+Number.POSITIVE_INFINITY);\n    this.#bounds.max.setScalar(Number.NEGATIVE_INFINITY);\n    const array = vertices || data;\n    const dl = stride || size;\n    for (let i = offset; i < array.length; i += dl) {\n      const x = array[i + 0];\n      const y = array[i + 1];\n      const z = array[i + 2];\n      this.#bounds.min.x = Math.min(x, this.#bounds.min.x);\n      this.#bounds.min.y = Math.min(y, this.#bounds.min.y);\n      this.#bounds.min.z = Math.min(z, this.#bounds.min.z);\n      this.#bounds.max.x = Math.max(x, this.#bounds.max.x);\n      this.#bounds.max.y = Math.max(y, this.#bounds.max.y);\n      this.#bounds.max.z = Math.max(z, this.#bounds.max.z);\n    }\n    this.#bounds.scale.subVectors(this.#bounds.max, this.#bounds.min);\n    this.#bounds.center.add(this.#bounds.min).add(this.#bounds.max).divideScalar(2);\n    return this.#bounds;\n  }\n\n  /**\n   * 计算当前几何体的的球形边界（球形包围盒）\n   * @param vertices 外部传入的顶点数据\n   */\n  computeBoundingSphere(vertices?: DataType | number[]) {\n    const { data, offset = 0, stride, size } = this.attributes.get('position') as BufferAttribute;\n    if (!this.#bounds) {\n      this.computeBoundingBox(vertices);\n    }\n    const array = vertices || data;\n    let len = 0;\n    const dl = stride || size;\n    const length = array.length;\n    for (let j = offset; j < length; j += dl) {\n      tempVec3.fromArray(array, j);\n      len = Math.max(len, this.#bounds.center.distanceToSquared(tempVec3));\n    }\n    this.#bounds.radius = Math.sqrt(len);\n  }\n\n  /**\n   * 执行绘制\n   * @param program Program 对象\n   * @param drawMode 绘制模式\n   */\n  draw(program, drawMode = this.drawMode) {\n    const { start, count } = this.drawRange;\n    const activeGeometryId = `${this.id}_${program.attributeOrder}`;\n    if (this.rendererState.activeGeometryId !== activeGeometryId) {\n      const vao = this.#VAOs.get(program.attributeOrder);\n      if (!vao) {\n        this.createVAO(program);\n      }\n      this.renderer.bindVertexArray(this.#VAOs.get(program.attributeOrder));\n      this.rendererState.activeGeometryId = activeGeometryId;\n    }\n\n    program.attributeLocations.forEach((location, { name }) => {\n      const attribute = this.getAttribute(name);\n      if (attribute && attribute.needsUpdate) {\n        this.updateAttribute(attribute);\n      }\n    });\n\n    if (this.isInstanced) {\n      if (this.index) {\n        const offset = this.index.offset + 2 * start;\n        this.renderer.drawElementsInstanced(\n          drawMode,\n          count,\n          this.index.type,\n          offset,\n          this.instancedCount,\n        );\n      } else {\n        this.renderer.drawArraysInstanced(drawMode, start, count, this.instancedCount);\n      }\n    } else if (this.index) {\n      const offset = this.index.offset + 2 * start;\n      this.gl.drawElements(drawMode, count, this.index.type, offset);\n    } else {\n      this.gl.drawArrays(drawMode, start, count);\n    }\n  }\n\n  /**\n   * 将传入的几何体对象的属性值拷贝到此对象\n   * @param source 源几何体对象\n   */\n  copy(source: Geometry) {\n    const attributes = source.attributesData;\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      if (attribute instanceof BufferAttribute) {\n        if (name === 'index') {\n          this.setIndex(attribute);\n        } else {\n          this.addAttribute(name, attribute);\n        }\n      } else {\n        if (attribute.data) {\n          const n = new BufferAttribute(this.renderer, attribute);\n          if (name === 'index') {\n            this.setIndex(n);\n          } else {\n            this.addAttribute(name, n);\n          }\n        }\n      }\n    }\n\n    if (source.bounds) {\n      this.bounds = {\n        min: new Vector3().copy(source.bounds.min),\n        max: new Vector3().copy(source.bounds.max),\n        center: new Vector3().copy(source.bounds.center),\n        scale: new Vector3().copy(source.bounds.scale),\n        radius: source.bounds.radius,\n      };\n    }\n\n    return this;\n  }\n\n  /**\n   * 克隆此几何体对象\n   */\n  clone() {\n    const geometry = new Geometry(this.renderer, {}).copy(this);\n    geometry.drawMode = this.drawMode;\n    return geometry;\n  }\n\n  /**\n   * 销毁几何体对象\n   */\n  destroy() {\n    this.#VAOs.forEach((t) => {\n      this.renderer.deleteVertexArray(t);\n    });\n    this.#VAOs.clear();\n    this.#attributes.forEach((t) => {\n      this.gl.deleteBuffer(t.buffer);\n    });\n    this.#attributes.clear();\n  }\n}\n","import { getWireframeIndex, uid } from '../utils';\nimport Object3D from './Object3D';\nimport Vector2 from '../math/Vector2';\nimport Matrix3 from '../math/Matrix3';\nimport Matrix4 from '../math/Matrix4';\nimport Geometry from '../core/Geometry';\nimport Program from '../core/Program';\nimport Renderer from '../core/Renderer';\nimport RenderTarget from '../core/RenderTarget';\n\nimport PerspectiveCamera from '../cameras/PerspectiveCamera';\nimport OrthographicCamera from '../cameras/OrthographicCamera';\nimport type { DataType } from '../core/BufferAttribute';\n\nexport interface MeshOptions {\n  /**\n   * `Mesh` 的`id`\n   */\n  id?: string;\n\n  /**\n   * 几何体`Geometry`对象\n   */\n  geometry: Geometry;\n\n  /**\n   * `Program` 对象\n   */\n  program: Program;\n\n  /**\n   * 渲染方式，默认值为`gl.TRIANGLES`。\n   * 其他可用值如下：\n   * - `gl.POINTS`: 绘制一系列点。\n   * - `gl.LINE_STRIP`: 绘制一个线条。即，绘制一系列线段，上一点连接下一点。\n   * - `gl.LINE_LOOP`: 绘制一个线圈。即，绘制一系列线段，上一点连接下一点，并且最后一点与第一个点相连。\n   * - `gl.LINES`: 绘制一系列单独线段。每两个点作为端点，线段之间不连接。\n   * - `gl.TRIANGLE_STRIP`：绘制一个三角带。\n   * - `gl.TRIANGLE_FAN`：绘制一个三角扇。\n   * - `gl.TRIANGLES`: 绘制一系列三角形。每三个点作为顶点。\n   */\n  mode?: GLenum;\n\n  /**\n   * 是否启用视锥体剔除\n   */\n  frustumCulled?: boolean;\n\n  /**\n   * 指定`Mesh` 的渲染顺序值\n   */\n  renderOrder?: number;\n\n  /**\n   * 设置是否是网格渲染，默认是 `false`。当此值为 `true` 时，会去构建 `wireframeIndex` 索引。\n   */\n  wireframe?: boolean;\n}\n\nexport interface MeshDrawOptions {\n  /**\n   * 渲染器\n   */\n  renderer: Renderer;\n\n  /**\n   * 相机\n   */\n  camera: PerspectiveCamera | OrthographicCamera;\n\n  /**\n   * 指定渲染目标 `RenderTarget`，常用于在多个 `RenderPass` 做流转，用来实现诸如后处理 `PostProcessing`。\n   */\n  target: RenderTarget;\n}\n\n/**\n * 网格渲染对象\n *\n * 代码示例：\n *\n * ```ts\n * const points = new Mesh(renderer, { mode: renderer.gl.POINTS, geometry, program });\n * points.setParent(scene);\n * points.position.set(-1, 1, 0);\n * ```\n */\nexport default class Mesh extends Object3D {\n  public gl: WebGLRenderingContext | WebGL2RenderingContext;\n\n  public modelViewMatrix: Matrix4;\n\n  public normalMatrix: Matrix3;\n\n  public renderOrder: number;\n\n  public zDepth: number;\n\n  public frustumCulled: boolean;\n\n  public mode: GLenum;\n\n  public renderer: Renderer;\n\n  #id: string;\n\n  #lastMode: GLenum;\n\n  #geometry: Geometry;\n\n  #program: Program;\n\n  #wireframe: boolean;\n\n  #wireframeGeometry: Geometry;\n\n  /**\n   * @param renderer 渲染器\n   * @param options MeshOptions\n   */\n  constructor(renderer, options: MeshOptions = {} as MeshOptions) {\n    super();\n    const opts = Object.assign({}, {\n      mode: renderer.gl.TRIANGLES,\n      frustumCulled: true,\n      renderOrder: 0,\n    }, options);\n    this.renderer = renderer;\n    this.gl = this.renderer.gl;\n    this.modelViewMatrix = new Matrix4();\n    this.normalMatrix = new Matrix3();\n    this.renderOrder = opts.renderOrder;\n    this.frustumCulled = opts.frustumCulled;\n    this.zDepth = 0;\n    this.#id = opts.id || uid('mesh');\n    this.#geometry = opts.geometry;\n    this.#program = opts.program;\n    this.#wireframe = Boolean(opts.wireframe);\n    this.mode = opts.mode;\n    this.#lastMode = opts.mode;\n\n    if (this.#wireframe) {\n      this.mode = this.gl.LINES;\n      this.updateWireframeGeometry(this.#wireframe);\n    }\n  }\n\n  /**\n   * 获取当前 `Mesh` 的 `id`\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * 获取当前 `Mesh` 的几何体信息\n   */\n  get geometry() {\n    return this.#wireframe ? this.#wireframeGeometry : this.#geometry;\n  }\n\n  /**\n   * 获取当前 `Mesh` 的 `program` 对象\n   */\n  get program() {\n    return this.#program;\n  }\n\n  /**\n   * 设置是否是网格渲染\n   * @param wireframe\n   */\n  set wireframe(wireframe: boolean) {\n    this.mode = wireframe ? this.gl.LINES : this.#lastMode;\n\n    this.#wireframe = wireframe;\n\n    this.updateWireframeGeometry(this.#wireframe);\n  }\n\n  /**\n   * 获取是否是网格渲染\n   */\n  get wireframe() {\n    return this.#wireframe;\n  }\n\n  /**\n   * 执行`Mesh` 的渲染，一般由`Renderer` 渲染器进行调度。\n   * @param options\n   */\n  draw(options: MeshDrawOptions = {} as MeshDrawOptions) {\n    const { camera, target } = options;\n    const uniforms = {};\n    if (camera) {\n      Object.assign(uniforms, {\n        projectionMatrix: camera.projectionMatrix,\n        cameraPosition: camera.worldPosition,\n        viewMatrix: camera.viewMatrix,\n      });\n      this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n      this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n    } else {\n      this.modelViewMatrix.copy(this.worldMatrix);\n    }\n\n    Object.assign(uniforms, {\n      resolution: new Vector2(\n        this.renderer.state?.viewport?.width || 1,\n        this.renderer.state?.viewport?.height || 1,\n      ),\n      modelMatrix: this.worldMatrix,\n      modelViewMatrix: this.modelViewMatrix,\n      normalMatrix: this.normalMatrix,\n    });\n    Object.keys(uniforms).forEach((key) => {\n      if (!Object.hasOwn(this.program.uniforms, key)) {\n        this.program.uniforms[key] = { value: null };\n      }\n      this.program.uniforms[key].value = uniforms[key];\n    });\n    if (target) target.bind();\n    this.program.use();\n    this.geometry.draw(this.program, this.mode);\n    if (target) target.unbind();\n  }\n\n  /**\n   * 更新网格几何体数据，主要是顶点索引数据\n   * @param wireframe 是否更新索引数据为网格数据\n   * @param force 是否强制更新\n   */\n  updateWireframeGeometry(wireframe, force = false) {\n    if (this.#geometry && (force || !this.#wireframeGeometry)) {\n      if (this.#wireframeGeometry) {\n        this.#wireframeGeometry.destroy();\n      }\n\n      const attributes = this.#geometry.attributes;\n\n      const positionArray = attributes.get('position')?.data as DataType;\n      const indexAttribute = this.#geometry.index?.data;\n      const numIndices = indexAttribute ? indexAttribute.length : Math.floor(positionArray.length / 3);\n      const index = [];\n\n      if (this.#geometry.index) {\n        if (indexAttribute) {\n          getWireframeIndex(positionArray, index, numIndices, indexAttribute as (Uint32Array | Uint16Array));\n        }\n      } else {\n        getWireframeIndex(positionArray, index, numIndices);\n      }\n\n      const indices = index.length > 65536 ? new Uint32Array(index) : new Uint16Array(index);\n\n      this.#wireframeGeometry = new Geometry(this.renderer, {\n        ...this.#geometry.attributesData,\n        index: {\n          data: indices,\n        },\n      });\n    }\n  }\n\n  /**\n   * 更新几何体信息，如果开启了 `wireframe` 还需要更新 `WireframeGeometry`\n   * @param geometry 几何体\n   * @param destroy 是否销毁上一个几何体\n   */\n  updateGeometry(geometry, destroy = true) {\n    if (destroy && this.#geometry) {\n      this.#geometry.destroy();\n    }\n    this.#geometry = geometry;\n    this.updateWireframeGeometry(this.#wireframe, true);\n  }\n\n  /**\n   * 更新 `Program` 对象\n   * @param program\n   * @param destroy 是否销毁上一个 program\n   */\n  updateProgram(program, destroy = true) {\n    if (destroy && this.#program) {\n      this.#program.destroy();\n    }\n    this.#program = program;\n  }\n\n  /**\n   * 销毁此 `Mesh`\n   */\n  destroy() {\n    this.program.destroy();\n    this.geometry.destroy();\n  }\n\n  /**\n   * 克隆 `Mesh` 对象\n   */\n  clone() {\n    return new Mesh(this.gl, {\n      geometry: this.geometry,\n      program: this.program,\n      frustumCulled: this.frustumCulled,\n      mode: this.mode,\n      renderOrder: this.renderOrder,\n    }).copy(this);\n  }\n\n  /**\n   * 将给定的 `Mesh` 对象复制到此对象\n   * @param mesh 源对象\n   * @param recursive 设置是否复制子对象\n   */\n  copy(mesh, recursive = true) {\n    super.copy(mesh, recursive);\n    this.modelViewMatrix.copy(mesh.modelViewMatrix);\n    this.normalMatrix.copy(mesh.normalMatrix);\n    this.mode = mesh.mode;\n    this.renderOrder = mesh.renderOrder;\n    this.zDepth = mesh.zDepth;\n    return this;\n  }\n}\n","import Object3D from './Object3D';\n\n/**\n * 场景对象，一般我们会将创建的网格渲染对象添加到场景中进行渲染\n *\n * 代码示例：\n * ```ts\n * const scene = new Scene();\n *\n * const points = new Mesh(renderer, { mode: renderer.gl.POINTS, geometry, program });\n *\n * points.position.set(-1, 1, 0);\n *\n * scene.add(points);\n * ```\n */\nexport default class Scene extends Object3D {\n  /**\n   * 克隆场景对象\n   */\n  clone() {\n    return new Scene().copy(this, false);\n  }\n\n  /**\n   * 将传入的场景对象的各属性复制到此场景实例中\n   * @param source 源场景\n   * @param recursive 设置是否复制子对象\n   */\n  copy(source, recursive) {\n    super.copy(source, recursive);\n    this.matrixAutoUpdate = source.matrixAutoUpdate;\n\n    return this;\n  }\n}\n","import type { WithNull } from '../types';\nimport { isNull, isUndef } from '../utils';\nimport Color, { ColorLike } from '../math/Color';\nimport Base from './Base';\nimport Renderer from './Renderer';\n\nexport enum BlendType {\n  NoBlending = 0,\n  NormalBlending = 1,\n  AdditiveBlending = 2,\n  SubtractiveBlending = 3,\n  MultiplyBlending = 4,\n  CustomBlending = 5,\n}\n\ntype IBlendType = BlendType;\n\ntype FBOData = {\n  target?: GLenum;\n  buffer: WithNull<WebGLFramebuffer>;\n};\n\ninterface StateOptions {\n  textureUnits: (number | string)[];\n  activeTextureUnit: number;\n  activeGeometryId: string | number;\n  currentProgramId: string | number;\n\n  boundBuffer: WebGLBuffer | null;\n\n  colorMask: boolean;\n\n  blending: IBlendType;\n\n  premultiplyAlpha: boolean;\n\n  blendFunc: {\n    src: number;\n    dst: number;\n    srcAlpha?: number;\n    dstAlpha?: number;\n  };\n\n  blendEquation: {\n    modeRGB: number;\n    modeAlpha?: number;\n  };\n\n  stencil: {\n    mask: GLenum;\n    func: {\n      cmp: GLenum;\n      ref: GLenum;\n      mask: GLenum;\n    };\n    opFront: {\n      fail: GLenum;\n      zFail: GLenum;\n      zPass: GLenum;\n    };\n    opBack: {\n      fail: GLenum;\n      zFail: GLenum;\n      zPass: GLenum;\n    };\n  };\n\n  clearAlpha: number;\n\n  clearColor: ColorLike;\n\n  cullFace: GLenum;\n\n  frontFace: GLenum;\n\n  depthMask: boolean;\n\n  depthFunc: GLenum;\n\n  depthTest: boolean;\n\n  depthWrite: boolean;\n\n  unpackAlignment: number;\n\n  flipY: boolean;\n\n  anisotropy: number;\n\n  lineWidth: number;\n\n  polygonOffset: boolean;\n\n  polygonOffsetFactor: GLenum;\n\n  polygonOffsetUnits: GLenum;\n\n  framebuffer: WithNull<WebGLFramebuffer>;\n\n  viewport: { x: number; y: number; width: number; height: number };\n}\n\ninterface IState extends StateOptions {\n  framebuffer: WithNull<WebGLFramebuffer>;\n}\n\n/**\n * 渲染状态管理，目的是减少CPU与GPU的交互，一般我们不需要主动创建，它默认包含在 `Renderer` 实例中。\n */\nexport default class State extends Base {\n  #state: IState;\n\n  constructor(renderer: Renderer, options?: Partial<StateOptions>) {\n    super(renderer);\n    const { gl } = renderer;\n    this.#state = {\n      viewport: {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n      },\n    } as IState;\n    this.apply(\n      options ||\n        ({\n          frontFace: gl.CCW,\n          depthTest: false,\n          depthWrite: true,\n          depthMask: true,\n          depthFunc: gl.LESS,\n          blending: BlendType.NormalBlending,\n          blendFunc: {\n            src: gl.ONE,\n            dst: gl.ZERO,\n          },\n          blendEquation: {\n            modeRGB: gl.FUNC_ADD,\n          },\n          premultiplyAlpha: false,\n          unpackAlignment: 4,\n          flipY: false,\n          framebuffer: null,\n          textureUnits: [],\n          activeTextureUnit: -1,\n          activeGeometryId: -1,\n          currentProgramId: -1,\n          clearAlpha: 1,\n          clearColor: new Color(0),\n          stencil: {\n            func: {},\n            opFront: {},\n            opBack: {},\n          },\n        } as unknown as StateOptions),\n    );\n  }\n\n  /**\n   * 获取所有状态\n   */\n  get state() {\n    return this.#state;\n  }\n\n  /**\n   * 获取视图\n   */\n  get viewport() {\n    return this.#state.viewport;\n  }\n\n  /**\n   * 获取当前 `gl` 的纹理单位\n   */\n  get textureUnits() {\n    return this.#state.textureUnits;\n  }\n\n  /**\n   * 获取已激活的纹理\n   */\n  get activeTextureUnit() {\n    return this.#state.activeTextureUnit;\n  }\n\n  /**\n   * 设置当前激活的纹理\n   * @param activeTextureUnit\n   */\n  set activeTextureUnit(activeTextureUnit) {\n    this.#state.activeTextureUnit = activeTextureUnit;\n  }\n\n  /**\n   * 获取当前的 `Program` id\n   */\n  get currentProgramId() {\n    return this.#state.currentProgramId;\n  }\n\n  /**\n   * 设置当前的 `Program` id\n   * @param id\n   */\n  set currentProgramId(id: string | number) {\n    this.#state.currentProgramId = id;\n  }\n\n  /**\n   * 获取当前激活的几何体 id\n   */\n  get activeGeometryId() {\n    return this.#state.activeGeometryId;\n  }\n\n  /**\n   * 设置当前激活的几何体 id\n   * @param id\n   */\n  set activeGeometryId(id: string | number) {\n    this.#state.activeGeometryId = id;\n  }\n\n  /**\n   * 设置 `flipY`\n   * @param flipY\n   */\n  set flipY(flipY: boolean) {\n    this.#state.flipY = flipY;\n  }\n\n  /**\n   * 获取 `flipY` 配置\n   */\n  get flipY(): boolean {\n    return this.#state.flipY;\n  }\n\n  /**\n   * 设置 `unpackAlignment`\n   * @param unpackAlignment\n   */\n  set unpackAlignment(unpackAlignment: number) {\n    this.#state.unpackAlignment = unpackAlignment;\n  }\n\n  /**\n   * 获取 `unpackAlignment` 配置\n   */\n  get unpackAlignment(): number {\n    return this.#state.unpackAlignment;\n  }\n\n  /**\n   * 设置 `premultipliedAlpha`\n   * @param premultiplyAlpha\n   */\n  set premultiplyAlpha(premultiplyAlpha: boolean) {\n    this.#state.premultiplyAlpha = premultiplyAlpha;\n  }\n\n  /**\n   * 获取 `premultipliedAlpha` 配置\n   */\n  get premultiplyAlpha(): boolean {\n    return this.#state.premultiplyAlpha;\n  }\n\n  /**\n   * 设置最后一次绑定的顶点数据\n   * @param boundBuffer\n   */\n  set boundBuffer(boundBuffer) {\n    this.#state.boundBuffer = boundBuffer;\n  }\n\n  /**\n   * 获取最后一次绑定的顶点数据\n   */\n  get boundBuffer() {\n    return this.#state.boundBuffer;\n  }\n\n  /**\n   * 配置 `anisotropy`\n   * @param anisotropy\n   */\n  set anisotropy(anisotropy: number) {\n    this.#state.anisotropy = anisotropy;\n  }\n\n  /**\n   * 获取 `anisotropy` 配置\n   */\n  get anisotropy() {\n    return this.#state.anisotropy;\n  }\n\n  /**\n   * apply options 并且更新状态\n   * @param options\n   */\n  apply(options: Partial<StateOptions>) {\n    if (options.blending !== undefined && options.blending !== null) {\n      this.setBlending(options.blending, options);\n    } else {\n      if (options.blendFunc) {\n        const { src, dst, srcAlpha, dstAlpha } = options.blendFunc;\n        this.setBlendFunc(src, dst, srcAlpha, dstAlpha);\n        this.enable(this.gl.BLEND);\n      } else {\n        this.disable(this.gl.BLEND);\n      }\n      if (options.blendEquation) {\n        const { modeRGB, modeAlpha } = options.blendEquation;\n        this.setBlendEquation(modeRGB, modeAlpha);\n      }\n    }\n\n    if (!isUndef(options.cullFace) && !isNull(options.cullFace)) {\n      this.setCullFace(options.cullFace);\n    }\n    if (!isUndef(options.frontFace) && !isNull(options.frontFace)) {\n      this.setFrontFace(options.frontFace);\n    }\n\n    if (options.depthTest) {\n      this.enable(this.gl.DEPTH_TEST);\n    } else {\n      this.disable(this.gl.DEPTH_TEST);\n    }\n\n    if (!isUndef(options.depthMask) && !isNull(options.depthMask)) {\n      this.setDepthMask(options.depthMask);\n    }\n\n    if (!isUndef(options.depthWrite) && !isNull(options.depthWrite)) {\n      this.setDepthMask(options.depthWrite);\n    }\n\n    if (!isUndef(options.depthFunc) && !isNull(options.depthFunc)) {\n      this.setDepthFunc(options.depthFunc);\n    }\n\n    if (!isUndef(options.lineWidth) && !isNull(options.lineWidth)) {\n      this.setLineWidth(options.lineWidth);\n    }\n\n    this.#state = Object.assign(this.#state, options);\n  }\n\n  /**\n   * 开启诸如 `DEPTH_TEST`、`BLEND` 等功能\n   * @param id\n   */\n  enable(id) {\n    if (this.#state[id] !== true) {\n      this.gl.enable(id);\n      this.#state[id] = true;\n    }\n  }\n\n  /**\n   * 关闭诸如 `DEPTH_TEST`、`BLEND` 等功能\n   * @param id\n   */\n  disable(id) {\n    if (this.#state[id] !== false) {\n      this.gl.disable(id);\n      this.#state[id] = false;\n    }\n  }\n\n  /**\n   * 设置 Viewport\n   * @param width\n   * @param height\n   * @param x\n   * @param y\n   */\n  setViewport(width, height, x = 0, y = 0) {\n    if (this.#state.viewport.width === width && this.#state.viewport.height === height) return;\n    this.gl.viewport(x, y, width, height);\n    this.#state.viewport = {\n      width,\n      height,\n      x,\n      y,\n    };\n  }\n\n  /**\n   * 设置颜色缓冲的状态\n   * 模板缓冲可以实现渲染剔除，需要遮罩的话，可能希望只绘制模板缓冲而不绘制颜色缓冲\n   * gl.colorMask(false, false, false, false)：关闭颜色缓冲的所有通道\n   * gl.colorMask(true, true, true, true)：开启颜色缓冲的所有通道\n   * @param colorMask\n   */\n  setMask(colorMask: boolean) {\n    if (this.#state.colorMask !== colorMask) {\n      this.gl.colorMask(colorMask, colorMask, colorMask, colorMask);\n      this.#state.colorMask = colorMask;\n    }\n  }\n\n  /**\n   * 指定渲染时的颜色混合方式\n   * https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFunc\n   * @param blending\n   * @param options\n   */\n  setBlending(blending: IBlendType, options?: Partial<StateOptions>) {\n    this.#state.blending = blending;\n    if (blending === BlendType.NoBlending) {\n      this.disable(this.gl.BLEND);\n      return;\n    } else {\n      this.enable(this.gl.BLEND);\n    }\n    if (blending === BlendType.AdditiveBlending) {\n      if (this.#state.premultiplyAlpha) {\n        this.setBlendEquation(this.gl.FUNC_ADD, this.gl.FUNC_ADD);\n        this.setBlendFunc(this.gl.ONE, this.gl.ONE, this.gl.ONE, this.gl.ONE);\n      } else {\n        this.setBlendEquation(this.gl.FUNC_ADD);\n        this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE);\n      }\n    } else if (blending === BlendType.SubtractiveBlending) {\n      if (this.#state.premultiplyAlpha) {\n        this.setBlendEquation(this.gl.FUNC_ADD, this.gl.FUNC_ADD);\n        this.setBlendFunc(\n          this.gl.ZERO,\n          this.gl.ZERO,\n          this.gl.ONE_MINUS_SRC_COLOR,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n        );\n      } else {\n        this.setBlendEquation(this.gl.FUNC_ADD);\n        this.setBlendFunc(this.gl.ZERO, this.gl.ONE_MINUS_SRC_COLOR);\n      }\n    } else if (blending === BlendType.MultiplyBlending) {\n      if (this.#state.premultiplyAlpha) {\n        this.setBlendEquation(this.gl.FUNC_ADD, this.gl.FUNC_ADD);\n        this.setBlendFunc(this.gl.ZERO, this.gl.SRC_COLOR, this.gl.ZERO, this.gl.SRC_ALPHA);\n      } else {\n        this.setBlendEquation(this.gl.FUNC_ADD);\n        this.setBlendFunc(this.gl.ZERO, this.gl.SRC_COLOR);\n      }\n    } else if (blending === BlendType.NormalBlending) {\n      if (this.#state.premultiplyAlpha) {\n        this.setBlendEquation(this.gl.FUNC_ADD, this.gl.FUNC_ADD);\n        this.setBlendFunc(\n          this.gl.ONE,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n          this.gl.ONE,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n        );\n      } else {\n        this.setBlendEquation(this.gl.FUNC_ADD, this.gl.FUNC_ADD);\n        this.setBlendFunc(\n          this.gl.SRC_ALPHA,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n          this.gl.ONE,\n          this.gl.ONE_MINUS_SRC_ALPHA,\n        );\n      }\n    } else if (blending === BlendType.CustomBlending) {\n      if (options?.blendFunc) {\n        const { src, dst, srcAlpha, dstAlpha } = options.blendFunc;\n        this.setBlendFunc(src, dst, srcAlpha, dstAlpha);\n        this.enable(this.gl.BLEND);\n      }\n      if (options?.blendEquation) {\n        const { modeRGB, modeAlpha } = options.blendEquation;\n        this.setBlendEquation(modeRGB, modeAlpha);\n      }\n    } else {\n      console.error('State: Invalid blending: ', blending);\n    }\n  }\n\n  /**\n   * 设置混合方式\n   * @param src\n   * @param dst\n   * @param srcAlpha\n   * @param dstAlpha\n   */\n  setBlendFunc(src: number, dst: number, srcAlpha?: number, dstAlpha?: number) {\n    if (\n      src !== this.#state.blendFunc?.src ||\n      dst !== this.#state.blendFunc?.dst ||\n      srcAlpha !== this.#state.blendFunc?.srcAlpha ||\n      dstAlpha !== this.#state.blendFunc?.dstAlpha\n    ) {\n      this.#state.blendFunc = {\n        src,\n        dst,\n        srcAlpha,\n        dstAlpha,\n      };\n      if (!isUndef(srcAlpha) && !isNull(srcAlpha) && !isUndef(dstAlpha) && !isNull(dstAlpha)) {\n        this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n      } else {\n        this.gl.blendFunc(src, dst);\n      }\n    }\n  }\n\n  /**\n   * 设置 blendEquation\n   * gl.FUNC_ADD：相加处理\n   * gl.FUNC_SUBTRACT：相减处理\n   * gl.FUNC_REVERSE_SUBSTRACT：反向相减处理，即 dest 减去 source\n   *\n   * @param modeRGB\n   * @param modeAlpha\n   */\n  setBlendEquation(modeRGB: number, modeAlpha?: number) {\n    if (\n      modeRGB !== this.#state.blendEquation?.modeRGB ||\n      modeAlpha !== this.#state.blendEquation?.modeAlpha\n    ) {\n      this.#state.blendEquation = {\n        modeRGB,\n        modeAlpha,\n      };\n\n      if (!isUndef(modeAlpha) && !isNull(modeAlpha)) {\n        this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n      } else {\n        this.gl.blendEquation(modeRGB);\n      }\n    }\n  }\n\n  /**\n   * 设置当前 State 下的清屏的透明度\n   * @param alpha\n   */\n  setClearAlpha(alpha: number) {\n    if (this.#state.clearAlpha !== alpha) {\n      this.#state.clearAlpha = alpha;\n    }\n  }\n\n  /**\n   * 设置清屏颜色和透明度值\n   * @param color 颜色\n   * @param alpha 透明度\n   */\n  setClearColor(color: ColorLike, alpha?: number) {\n    if (this.#state.clearAlpha !== alpha || this.#state.clearColor !== color) {\n      this.#state.clearColor = color;\n      if (!isUndef(alpha) && !isNull(alpha)) {\n        this.#state.clearAlpha = alpha;\n      } else {\n        this.#state.clearAlpha = color.a as number;\n      }\n      this.gl.clearColor(color.r, color.g, color.b, this.#state.clearAlpha);\n    }\n  }\n\n  /**\n   * 设置背面剔除方式\n   * @param cullFace\n   */\n  setCullFace(cullFace: GLenum) {\n    if (this.#state.cullFace !== cullFace) {\n      if (cullFace) {\n        this.gl.enable(this.gl.CULL_FACE);\n      } else {\n        this.gl.disable(this.gl.CULL_FACE);\n      }\n\n      this.#state.cullFace = cullFace;\n      this.gl.cullFace(cullFace);\n    }\n  }\n\n  /**\n   * 设置正面三角形顶点顺序\n   * 绘制立体图形时会使用三角形的顶点顺序来决定三角形的面是否朝向观察者，背向观察者的三角形一般不进行光栅化处理，绘制时会被剔除\n   * @param frontFace\n   */\n  setFrontFace(frontFace: GLenum) {\n    if (this.#state.frontFace !== frontFace) {\n      this.#state.frontFace = frontFace;\n      this.gl.frontFace(frontFace);\n    }\n  }\n\n  /**\n   * 设置深度缓冲区的写入操作方式（只读或者可写）\n   * @param mask\n   */\n  setDepthMask(mask: boolean) {\n    if (this.#state.depthMask !== mask) {\n      this.#state.depthMask = mask;\n      this.gl.depthMask(mask);\n    }\n  }\n\n  /**\n   * 指定将输入像素深度与当前深度缓冲区值进行比较的函数\n   * @param func\n   */\n  setDepthFunc(func: GLenum) {\n    if (this.#state.depthFunc !== func) {\n      this.#state.depthFunc = func;\n      this.gl.depthFunc(func);\n    }\n  }\n\n  /**\n   * 设置是否开启深度测试\n   * @param state\n   */\n  setDepthTest(state: boolean) {\n    if (this.#state.depthTest !== state) {\n      this.#state.depthTest = state;\n      if (state) {\n        this.enable(this.gl.DEPTH_TEST);\n      } else {\n        this.disable(this.gl.DEPTH_TEST);\n      }\n    }\n  }\n\n  /**\n   * 设置模板缓冲测试方式\n   * @param cmp 指定比较方式\n   * @param ref 用来做stencil测试的参考值\n   * @param mask 指定操作掩码，在测试的时候会先将ref与mask进行与运算\n   * @param face\n   */\n  setStencilFunc(cmp: GLenum, ref: GLenum, mask: GLenum, face?: GLenum) {\n    if (\n      this.#state?.stencil?.func?.cmp !== cmp ||\n      this.#state?.stencil?.func?.ref !== ref ||\n      this.#state?.stencil?.func?.mask !== mask\n    ) {\n      if (!this.#state?.stencil) {\n        this.#state.stencil = {} as StateOptions['stencil'];\n      }\n      if (!this.#state?.stencil?.func) {\n        this.#state.stencil.func = {} as StateOptions['stencil']['func'];\n      }\n      this.#state.stencil.func = {\n        ref,\n        mask,\n        cmp,\n      };\n      if (face) {\n        this.gl.stencilFuncSeparate(face, cmp, ref, mask);\n      } else {\n        this.gl.stencilFunc(cmp, ref, mask);\n      }\n    }\n  }\n\n  /**\n   * 设置模板测试的操作\n   * @param fail 指定模板测试失败时要使用的操作。默认值为 `gl.KEEP`\n   * @param zFail 指定模板测试通过但深度测试失败时要使用的操作。默认值为 `gl.KEEP`\n   * @param zPass 指定当模板测试和深度测试都通过时使用的操作，或者当模板测试通过但没有深度缓冲区或深度测试被禁用时使用的操作。默认值为 `gl.KEEP`\n   * @param face\n   */\n  setStencilOp(fail, zFail, zPass, face?: GLenum) {\n    const flag = false;\n\n    if (!this.#state?.stencil) {\n      this.#state.stencil = {} as StateOptions['stencil'];\n    }\n\n    if (!face || face === this.gl.FRONT_AND_BACK) {\n      return (\n        this.#state.stencil?.opFront?.fail !== fail ||\n        this.#state.stencil?.opFront?.zFail !== zFail ||\n        this.#state.stencil?.opFront?.zPass !== zPass ||\n        this.#state.stencil?.opBack?.fail !== fail ||\n        this.#state.stencil?.opBack?.zFail !== zFail ||\n        this.#state.stencil?.opBack?.zPass !== zPass\n      );\n    } else if (face === this.gl.FRONT) {\n      return (\n        this.#state.stencil?.opFront?.fail !== fail ||\n        this.#state.stencil?.opFront?.zFail !== zFail ||\n        this.#state.stencil?.opFront?.zPass !== zPass\n      );\n    } else if (face === this.gl.BACK) {\n      return (\n        this.#state.stencil?.opBack?.fail !== fail ||\n        this.#state.stencil?.opBack?.zFail !== zFail ||\n        this.#state.stencil?.opBack?.zPass !== zPass\n      );\n    }\n\n    if (flag) {\n      if (face) {\n        if (!this.#state.stencil?.opFront) {\n          this.#state.stencil.opFront = {} as StateOptions['stencil']['opFront'];\n        }\n        if (!this.#state.stencil?.opBack) {\n          this.#state.stencil.opBack = {} as StateOptions['stencil']['opBack'];\n        }\n        if (face === this.gl.FRONT_AND_BACK) {\n          this.#state.stencil.opFront.fail = fail;\n          this.#state.stencil.opFront.zFail = zFail;\n          this.#state.stencil.opFront.zPass = zPass;\n          this.#state.stencil.opBack.fail = fail;\n          this.#state.stencil.opBack.zFail = zFail;\n          this.#state.stencil.opBack.zPass = zPass;\n        } else if (face === this.gl.FRONT) {\n          this.#state.stencil.opFront.fail = fail;\n          this.#state.stencil.opFront.zFail = zFail;\n          this.#state.stencil.opFront.zPass = zPass;\n        } else if (face === this.gl.BACK) {\n          this.#state.stencil.opBack.fail = fail;\n          this.#state.stencil.opBack.zFail = zFail;\n          this.#state.stencil.opBack.zPass = zPass;\n        }\n\n        this.gl.stencilOpSeparate(face, fail, zFail, zPass);\n      } else {\n        this.#state.stencil.opFront.fail = fail;\n        this.#state.stencil.opFront.zFail = zFail;\n        this.#state.stencil.opFront.zPass = zPass;\n        this.#state.stencil.opBack.fail = fail;\n        this.#state.stencil.opBack.zFail = zFail;\n        this.#state.stencil.opBack.zPass = zPass;\n        this.gl.stencilOp(fail, zFail, zPass);\n      }\n    }\n  }\n\n  /**\n   * 设置模版测试的操作掩码\n   * @param mask\n   * @param face\n   */\n  setStencilMask(mask, face?: GLenum) {\n    if (this.#state.stencil?.mask !== mask) {\n      this.#state.stencil = {\n        ...this.#state.stencil,\n        mask,\n      };\n      if (face) {\n        this.gl.stencilMaskSeparate(face, mask);\n      } else {\n        this.gl.stencilMask(mask);\n      }\n    }\n  }\n\n  /**\n   * 设置当前激活的纹理单位\n   * @param unit\n   */\n  setActiveTexture(unit) {\n    if (this.#state.activeTextureUnit !== unit) {\n      this.#state.activeTextureUnit = unit;\n      this.gl.activeTexture(this.gl.TEXTURE0 + unit);\n    }\n  }\n\n  /**\n   * 设置 webgl 的线宽（注意大部分浏览器下是有 BUG 的）\n   * @param width\n   */\n  setLineWidth(width) {\n    if (this.#state.lineWidth !== width) {\n      this.#state.lineWidth = width;\n      this.gl.lineWidth(width);\n    }\n  }\n\n  /**\n   * 设置深度值的偏移量，主要可以用于解决当几何图形或物体的两个表面非常接近时会出现的深度冲突(Z fighting)。\n   * 原因是因为两个表面过于接近，深度缓冲区有限的精度无法区分哪个在前哪个在后。\n   *\n   * gl.polygonOffset(factor, units)方法指定加到每个顶点绘制后Z值上的偏移量，\n   * 偏移量按照公式 `m*factor+r*units` 计算，其中m表示顶点所在表面相对于观察者的视线的角度，\n   * 而r表示硬件能够区分两个Z值之差的最小值\n   * @param polygonOffset\n   * @param factor\n   * @param units\n   */\n  setPolygonOffset(polygonOffset, factor, units) {\n    if (polygonOffset) {\n      this.enable(this.gl.POLYGON_OFFSET_FILL);\n      if (this.#state.polygonOffsetFactor !== factor || this.#state.polygonOffsetUnits !== units) {\n        this.gl.polygonOffset(factor, units);\n\n        this.#state.polygonOffsetFactor = factor;\n        this.#state.polygonOffsetUnits = units;\n      }\n    } else {\n      this.disable(this.gl.POLYGON_OFFSET_FILL);\n    }\n  }\n\n  /**\n   * 绑定或者解绑 FBO\n   * @param v\n   */\n  bindFramebuffer(v: FBOData = {} as FBOData) {\n    const { target = this.gl.FRAMEBUFFER, buffer = null } = v;\n    if (this.#state.framebuffer !== buffer) {\n      this.#state.framebuffer = buffer;\n      this.gl.bindFramebuffer(target, buffer);\n    }\n  }\n\n  /**\n   * 设置当前激活的 Geometry\n   * @param id\n   */\n  setActiveGeometry(id) {\n    this.#state.activeGeometryId = id;\n  }\n\n  /**\n   * 重置 `State`\n   * @param force\n   */\n  reset(force = true) {\n    const keys = Object.keys(this.#state);\n    if (force) {\n      keys\n        .filter((key) => ['viewport', 'premultiplyAlpha'].indexOf(key) < 0)\n        .forEach((key) => {\n          delete this.#state[key];\n        });\n      this.bindFramebuffer({\n        buffer: null,\n      });\n      this.apply({\n        frontFace: this.gl.CCW,\n        depthTest: false,\n        depthWrite: true,\n        depthMask: true,\n        depthFunc: this.gl.LESS,\n        blending: BlendType.NormalBlending,\n        blendFunc: {\n          src: this.gl.ONE,\n          dst: this.gl.ZERO,\n        },\n        blendEquation: {\n          modeRGB: this.gl.FUNC_ADD,\n        },\n        premultiplyAlpha: false,\n        unpackAlignment: 4,\n        flipY: false,\n        framebuffer: null,\n        textureUnits: [],\n        activeTextureUnit: -1,\n        activeGeometryId: -1,\n        currentProgramId: -1,\n        clearAlpha: 1,\n        clearColor: new Color(0),\n        stencil: {\n          func: {},\n          opFront: {},\n          opBack: {},\n        },\n      } as unknown as StateOptions);\n    } else {\n      keys\n        .filter(\n          (key) =>\n            [\n              'flipY',\n              'framebuffer',\n              'textureUnits',\n              'activeTextureUnit',\n              'activeGeometryId',\n              'currentProgramId',\n            ].indexOf(key) > -1,\n        )\n        .forEach((key) => {\n          delete this.#state[key];\n        });\n\n      this.bindFramebuffer({\n        buffer: null,\n      });\n\n      this.#state.flipY = false;\n      this.#state.activeGeometryId = -1;\n      this.#state.activeTextureUnit = -1;\n      this.#state.currentProgramId = -1;\n      this.#state.textureUnits = [];\n      this.#state.boundBuffer = null;\n    }\n  }\n}\n","import State from './State';\nimport RenderTarget from './RenderTarget';\nimport Scene from '../objects/Scene';\nimport { isWebGL, isWebGL2, getContext } from '../utils';\nimport type { WithNull, WithUndef } from '../types';\n\nconst innerExtensionKeys = [\n  'ANGLE_instanced_arrays', // 实例化绘制\n  'OES_vertex_array_object', // 顶点数组对象\n] as const;\n\ntype InnerExtensionKeys = typeof innerExtensionKeys[number];\n\n/**\n * 仅在 webgl 1 中使用的扩展，webgl2 直接支持\n */\nconst external1ExtensionKeys = [\n  'WEBGL_depth_texture', // 深度纹理\n  'OES_texture_half_float', // 半浮点型纹理\n  'OES_texture_float', // 浮点型纹理\n  'OES_standard_derivatives', // 标准导数\n  'OES_element_index_uint', // UNSIGNED_INT索引\n  'EXT_frag_depth', // 设置gl_FragDepth\n  'EXT_blend_minmax', // 混合公式MIN/MAX\n  'EXT_shader_texture_lod', // 直接纹理LOD获取\n  'WEBGL_draw_buffers', // 多种绘制缓冲\n  'WEBGL_color_buffer_float', // 32 位浮点数颜色缓冲区\n] as const;\n\n/**\n * 仅在 webgl 2 中支持的扩展\n */\nconst external2ExtensionKeys = [\n  'EXT_color_buffer_float', // 32 位浮点数颜色缓冲区\n] as const;\n\n/**\n * 在 webgl1 和 webgl2 都支持的扩展\n */\nconst external12ExtensionKeys = [\n  'WEBGL_lose_context', // 模拟丢失和恢复 gl 上下文\n  'OES_texture_half_float_linear', // 半浮点型纹理线性过滤\n  'OES_texture_float_linear', // 浮点型纹理线性过滤\n  'EXT_color_buffer_half_float', // 半（16 位）浮点数颜色缓冲区\n  'WEBGL_debug_renderer_info', // 图形驱动信息\n  'EXT_texture_filter_anisotropic', // 有效各向异性值\n] as const;\n\ntype External1ExtensionKeys = typeof external1ExtensionKeys[number];\ntype External2ExtensionKeys = typeof external2ExtensionKeys[number];\ntype External12ExtensionKeys = typeof external12ExtensionKeys[number];\n\ntype ExternalExtensionKeys =\n  | External1ExtensionKeys\n  | External2ExtensionKeys\n  | External12ExtensionKeys;\n\ntype ExtensionKeys = InnerExtensionKeys | ExternalExtensionKeys;\n\ntype Extensions =\n  | ANGLE_instanced_arrays\n  | OES_vertex_array_object\n  | WEBGL_depth_texture\n  | OES_texture_half_float\n  | OES_texture_float\n  | OES_texture_half_float_linear\n  | OES_texture_float_linear\n  | OES_standard_derivatives\n  | OES_element_index_uint\n  | EXT_frag_depth\n  | EXT_blend_minmax\n  | EXT_shader_texture_lod\n  | WEBGL_draw_buffers;\n\nexport interface RendererOptions {\n  /**\n   * 指定 `devicePixelRatio`\n   */\n  dpr: number;\n\n  /**\n   * 指定是否开启自动清除\n   */\n  autoClear: boolean;\n\n  /**\n   * 指定是否开启深度检测\n   */\n  depth: boolean;\n\n  /**\n   * 指定画布是否包含alpha缓冲区，仅在传入的是 `canvas` 对象时有用\n   */\n  alpha: boolean;\n\n  /**\n   * 指定是否开启抗锯齿，仅在传入的是 `canvas` 对象时有用\n   */\n  antialias: boolean;\n\n  /**\n   * 指定是否开启模板缓冲区\n   */\n  stencil: boolean;\n\n  /**\n   * 指定GPU的性能配置，仅在传入的是 `canvas` 对象时有用\n   */\n  powerPreference: WebGLPowerPreference;\n\n  /**\n   * 指定是否开启预乘alpha\n   */\n  premultipliedAlpha: boolean;\n\n  /**\n   * 是否开启绘制缓冲区，仅在传入的是 `canvas` 对象时有用\n   */\n  preserveDrawingBuffer: boolean;\n\n  /**\n   * 获取 `webgl2` 实例，仅在传入的是 `canvas` 对象时有用\n   */\n  requestWebGl2: boolean;\n  /**\n   * 是否开启视锥剔除，默认不开启\n   */\n  frustumCull: boolean;\n\n  /**\n   * WebGL 上下文支持的扩展列表。默认 []\n   */\n  extensions: ExternalExtensionKeys[];\n}\n\nexport interface RenderParams {\n  /**\n   * 场景对象\n   */\n  scene: Scene;\n\n  /**\n   * 相机对象\n   */\n  camera: any;\n\n  /**\n   * 指定渲染目标 `RenderTarget`，常用于在多个 `RenderPass` 做流转，用来实现诸如后处理 `PostProcessing`。\n   */\n  target?: RenderTarget;\n\n  /**\n   * 指定是否强制更新\n   */\n  update?: boolean;\n\n  /**\n   * 指定是否进行渲染对象的排序\n   */\n  sort?: boolean;\n\n  /**\n   * 是否开启进行视锥剔除（通过计算各渲染对象的包围盒，完全在视锥外的排除在`RendererList` 之外）。\n   */\n  frustumCull?: boolean;\n\n  /**\n   * 指定是否进行（颜色、深度、模版）缓冲区清除\n   */\n  clear?: boolean;\n}\n\n/**\n * 渲染器\n */\nexport default class Renderer {\n  readonly #gl: WebGLRenderingContext | WebGL2RenderingContext;\n\n  readonly #state: State;\n\n  readonly #extensions: {\n    [key in ExtensionKeys]: Extensions;\n  };\n\n  readonly #autoClear: boolean;\n\n  readonly #depth: WithUndef<boolean>;\n\n  readonly #alpha: WithUndef<boolean>;\n\n  readonly #stencil: WithUndef<boolean>;\n\n  readonly #antialias: WithUndef<boolean>;\n\n  readonly #premultipliedAlpha: WithUndef<boolean>;\n\n  readonly #preserveDrawingBuffer: WithUndef<boolean>;\n\n  readonly #color: boolean;\n\n  readonly #dpr: number;\n\n  readonly #frustumCull: boolean;\n\n  public vertexAttribDivisor:\n    | ANGLE_instanced_arrays['vertexAttribDivisorANGLE']\n    | WebGL2RenderingContext['vertexAttribDivisor'];\n  public drawArraysInstanced:\n    | ANGLE_instanced_arrays['drawArraysInstancedANGLE']\n    | WebGL2RenderingContext['drawArraysInstanced'];\n  public drawElementsInstanced:\n    | ANGLE_instanced_arrays['drawElementsInstancedANGLE']\n    | WebGL2RenderingContext['drawElementsInstanced'];\n  public createVertexArray:\n    | OES_vertex_array_object['createVertexArrayOES']\n    | WebGL2RenderingContext['createVertexArray'];\n  public bindVertexArray:\n    | OES_vertex_array_object['bindVertexArrayOES']\n    | WebGL2RenderingContext['bindVertexArray'];\n  public deleteVertexArray:\n    | OES_vertex_array_object['deleteVertexArrayOES']\n    | WebGL2RenderingContext['deleteVertexArray'];\n\n  public width: number;\n\n  public height: number;\n\n  constructor(\n    gl: WebGLRenderingContext | WebGL2RenderingContext | HTMLCanvasElement,\n    opts: Partial<RendererOptions> = {},\n  ) {\n    const options = Object.assign(\n      {},\n      {\n        autoClear: true,\n        depth: true,\n        alpha: false,\n        stencil: false,\n        antialias: false,\n        premultipliedAlpha: false,\n        preserveDrawingBuffer: false,\n        requestWebGl2: true,\n        extensions: [],\n      },\n      opts,\n    );\n\n    this.#autoClear = Boolean(options.autoClear);\n\n    this.#depth = options.depth;\n\n    this.#alpha = options.alpha;\n\n    this.#stencil = options.stencil;\n\n    this.#antialias = options.antialias;\n\n    this.#premultipliedAlpha = options.premultipliedAlpha;\n\n    this.#preserveDrawingBuffer = options.preserveDrawingBuffer;\n\n    this.#gl = (\n      isWebGL(gl) || isWebGL2(gl)\n        ? gl\n        : getContext(\n            gl as HTMLCanvasElement,\n            {\n              alpha: this.#alpha,\n              depth: this.#depth,\n              stencil: this.#stencil,\n              antialias: this.#antialias,\n              powerPreference: options.powerPreference,\n              premultipliedAlpha: this.#premultipliedAlpha,\n              preserveDrawingBuffer: this.#preserveDrawingBuffer,\n            },\n            options.requestWebGl2,\n          )\n    ) as WebGLRenderingContext | WebGL2RenderingContext;\n\n    const attrs = this.#gl?.getContextAttributes();\n\n    const viewport = this.#gl?.getParameter(this.#gl.VIEWPORT);\n    const flipY = this.#gl?.getParameter(this.#gl.UNPACK_FLIP_Y_WEBGL);\n\n    this.#state = new State(this);\n\n    if (attrs) {\n      this.#depth = Boolean(attrs.depth);\n      this.#antialias = Boolean(attrs.antialias);\n      this.#alpha = Boolean(attrs.alpha);\n      this.#stencil = Boolean(attrs.stencil);\n      this.#premultipliedAlpha = Boolean(attrs.premultipliedAlpha);\n      this.#preserveDrawingBuffer = Boolean(attrs.preserveDrawingBuffer);\n    }\n\n    this.#state.flipY = Boolean(flipY);\n    this.#state.setViewport(viewport[2], viewport[3], viewport[0], viewport[1]);\n    this.#state.premultiplyAlpha = this.#premultipliedAlpha;\n\n    this.#color = true;\n\n    this.#dpr = options.dpr || 1;\n\n    this.width = this.gl.canvas.width / this.#dpr;\n    this.height = this.gl.canvas.height / this.#dpr;\n\n    this.#frustumCull = !!options.frustumCull;\n\n    this.#extensions = {} as {\n      [key in ExtensionKeys]: Extensions;\n    };\n\n    this.vertexAttribDivisor = this.getExtension(\n      'ANGLE_instanced_arrays',\n      'vertexAttribDivisor',\n      'vertexAttribDivisorANGLE',\n    );\n    this.drawArraysInstanced = this.getExtension(\n      'ANGLE_instanced_arrays',\n      'drawArraysInstanced',\n      'drawArraysInstancedANGLE',\n    );\n    this.drawElementsInstanced = this.getExtension(\n      'ANGLE_instanced_arrays',\n      'drawElementsInstanced',\n      'drawElementsInstancedANGLE',\n    );\n    this.createVertexArray = this.getExtension(\n      'OES_vertex_array_object',\n      'createVertexArray',\n      'createVertexArrayOES',\n    );\n    this.bindVertexArray = this.getExtension(\n      'OES_vertex_array_object',\n      'bindVertexArray',\n      'bindVertexArrayOES',\n    );\n    this.deleteVertexArray = this.getExtension(\n      'OES_vertex_array_object',\n      'deleteVertexArray',\n      'deleteVertexArrayOES',\n    );\n\n    if (options.extensions) {\n      options.extensions\n        .filter(\n          (extension: ExternalExtensionKeys) =>\n            external1ExtensionKeys.findIndex((ext) => ext === extension) > -1,\n        )\n        .forEach((extension: ExternalExtensionKeys) => {\n          if (!this.#extensions[extension] && !this.isWebGL2) {\n            this.#extensions[extension] = this.gl.getExtension(extension);\n          }\n        });\n\n      options.extensions\n        .filter(\n          (extension: ExternalExtensionKeys) =>\n            external2ExtensionKeys.findIndex((ext) => ext === extension) > -1,\n        )\n        .forEach((extension: ExternalExtensionKeys) => {\n          if (!this.#extensions[extension] && this.isWebGL2) {\n            this.#extensions[extension] = this.gl.getExtension(extension);\n          }\n        });\n\n      options.extensions\n        .filter(\n          (extension: ExternalExtensionKeys) =>\n            external12ExtensionKeys.findIndex((ext) => ext === extension) > -1,\n        )\n        .forEach((extension: ExternalExtensionKeys) => {\n          if (!this.#extensions[extension]) {\n            this.#extensions[extension] = this.gl.getExtension(extension);\n          }\n        });\n    }\n  }\n\n  /**\n   * 获取 gl 实例\n   */\n  get gl() {\n    return this.#gl;\n  }\n\n  /**\n   * 获取 `Renderer` 的内部属性值\n   */\n  get attributes() {\n    return {\n      dpr: this.#dpr,\n      flipY: this.#state.flipY,\n      depth: this.#depth,\n      color: this.#color,\n      antialias: this.#antialias,\n      alpha: this.#alpha,\n      stencil: this.#stencil,\n      autoClear: this.#autoClear,\n      frustumCull: this.#frustumCull,\n      premultipliedAlpha: this.#premultipliedAlpha,\n      preserveDrawingBuffer: this.#preserveDrawingBuffer,\n    };\n  }\n\n  /**\n   * 获取 canvas 实例\n   */\n  get canvas() {\n    return this.#gl.canvas;\n  }\n\n  /**\n   * 判断是否是 `webgl1`\n   */\n  get isWebGL() {\n    return isWebGL(this.gl);\n  }\n\n  /**\n   * 判断是否是 `webgl2`\n   */\n  get isWebGL2() {\n    return isWebGL2(this.gl);\n  }\n\n  /**\n   * 获取已开启的扩展\n   */\n  get extensions() {\n    return this.#extensions;\n  }\n\n  /**\n   * 获取指定的扩展\n   * @param key\n   */\n  extension(key: ExtensionKeys) {\n    return this.#extensions[key];\n  }\n\n  /**\n   * 获取 canvas 画布大小\n   */\n  get size() {\n    return {\n      width: 'clientWidth' in this.canvas ? this.canvas.clientWidth : this.canvas.width,\n      height: 'clientHeight' in this.canvas ? this.canvas.clientHeight : this.canvas.height,\n    };\n  }\n\n  /**\n   * 获取 `renderState`\n   */\n  get state(): State {\n    return this.#state;\n  }\n\n  /**\n   * 获取 `premultipliedAlpha` 配置\n   */\n  get premultipliedAlpha() {\n    return this.#premultipliedAlpha;\n  }\n\n  /**\n   * 设置画布宽高\n   * @param width 宽\n   * @param height 高\n   */\n  setSize(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n\n    this.gl.canvas.width = width * this.#dpr;\n    this.gl.canvas.height = height * this.#dpr;\n  }\n\n  /**\n   * 设置 `webgl` 的 `viewport`\n   * @param width\n   * @param height\n   * @param x\n   * @param y\n   */\n  setViewport(width, height, x = 0, y = 0) {\n    this.#state.setViewport(width, height, x, y);\n  }\n\n  /**\n   * @private\n   * 获取扩展\n   * @param extension\n   * @param method\n   * @param extFunc\n   */\n  getExtension(extension, method, extFunc) {\n    const func = this.gl[method];\n    if (method && func) return func.bind(this.gl);\n    if (!this.#extensions[extension]) {\n      this.#extensions[extension] = this.gl.getExtension(extension);\n    }\n    const ef = this.#extensions[extension];\n    return method ? (ef ? ef[extFunc].bind(ef) : null) : ef;\n  }\n\n  /**\n   * 获取渲染列表（排序先不实现）\n   * @param scene\n   * @param camera\n   */\n  getRenderList({ scene, camera }) {\n    const renderList: any[] = [];\n\n    scene.traverse((node) => {\n      if (!node.visible) return true;\n      if (!node.draw) return;\n\n      if (this.#frustumCull && node.frustumCulled && camera) {\n        if (!camera.frustumIntersectsMesh(node)) return;\n      }\n\n      renderList.push(node);\n    });\n\n    return renderList;\n  }\n\n  /**\n   * 渲染函数，一般会在每一帧中调用此方法\n   * @param params\n   */\n  render(params: RenderParams) {\n    const { scene, camera, target = null, update = true, clear } = params;\n    if (target === null) {\n      // make sure no render target bound so draws to canvas\n      this.#state.bindFramebuffer({\n        buffer: null,\n      });\n      this.setViewport(this.width * this.#dpr, this.height * this.#dpr);\n    } else {\n      // bind supplied render target and update viewport\n      target.bind();\n      this.setViewport(target.width, target.height);\n    }\n\n    if (clear || (this.#autoClear && clear !== false)) {\n      // 确保深度缓冲区写入已启用，以便可以将其清除\n      if (this.#depth && (!target || target.depth)) {\n        this.#state.enable(this.gl.DEPTH_TEST);\n        this.#state.setDepthMask(true);\n      }\n\n      this.clear(this.#color, this.#depth, this.#stencil);\n    }\n\n    // 更新场景矩阵\n    if (update) scene.updateMatrixWorld();\n\n    // 单独更新相机矩阵\n    if (camera) camera.updateMatrixWorld();\n\n    const renderList = this.getRenderList({ scene, camera });\n\n    let i = 0;\n    const len = renderList.length;\n    for (; i < len; i++) {\n      const node = renderList[i];\n      node.draw({ camera });\n    }\n\n    if (target) {\n      target.unbind();\n    }\n  }\n\n  /**\n   * 清空画布\n   * @param color 颜色\n   * @param depth 深度\n   * @param stencil 模板\n   */\n  clear(color = this.#color, depth = this.#depth, stencil = this.#stencil) {\n    let bits = 0;\n\n    if (color) bits |= this.gl.COLOR_BUFFER_BIT;\n    if (depth) bits |= this.gl.DEPTH_BUFFER_BIT;\n    if (stencil) bits |= this.gl.STENCIL_BUFFER_BIT;\n\n    this.gl.clear(bits);\n  }\n\n  /**\n   * 重置内部 `WebGL` 状态。\n   * 需要注意的是一般单独使用时我们不需要去重置状态，但是在跨多个 `WebGL` 库共享单个 `WebGL` 上下文时我们需要关注此方法。默认情况下\n   * 我们会重置所有的状态，但是当我们确认多个共享库使用的状态完全相同时我们可以考虑仅重置部分状态以提高性能。但是有可能会出现无法预料的情况\n   * 请在你确认状态完全匹配时使用 `force = false` 重置部分状态。\n   * @param force 是否强制重置所用状态，默认是 `true`\n   * @param vao\n   */\n  resetState(\n    force = true,\n    vao: WithNull<WebGLVertexArrayObject | WebGLVertexArrayObjectOES> = null,\n  ) {\n    this.#state.reset(force);\n    this.bindVertexArray(vao);\n  }\n}\n","import { uid } from '../utils';\nimport type { WithUndef } from '../types';\n\nimport Base from './Base';\nimport Renderer from './Renderer';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\nexport interface ResourceOptions {\n  id: string;\n  name: string;\n  handle: any;\n  userData: any;\n}\n\nexport default class Resource<T extends ResourceOptions> extends Base {\n  #handle: any;\n\n  #lastHandle: any;\n\n  id: string;\n\n  name: WithUndef<string>;\n\n  userData: any;\n\n  // Only meaningful for resources that allocate GPU memory\n  byteLength: number;\n\n  options: Partial<T>;\n\n  constructor(renderer: Renderer, options: Partial<T> = {}) {\n    super(renderer);\n    this.id = options?.id || uid(this.constructor.name);\n    this.name = options?.name;\n    this.userData = options?.userData;\n    this.#handle = options?.handle;\n\n    this.options = options;\n    if (this.#handle === undefined) {\n      this.#handle = this.createHandle();\n    }\n\n    this.byteLength = 0;\n  }\n\n  get handle() {\n    return this.#handle;\n  }\n\n  /**\n   * 交换为新的 `handle`（一般我们会用在虚拟 webgl 环境中）\n   * @param handle\n   */\n  swapHandle(handle) {\n    this.#lastHandle = this.#handle;\n    this.#handle = handle;\n  }\n\n  /**\n   * 恢复为原有 `handle`\n   */\n  restoreHandle() {\n    this.#handle = this.#lastHandle;\n  }\n\n  /**\n   * 销毁相关资源\n   */\n  destroy(): void {\n    this.delete();\n  }\n\n  delete({ deleteChildren = false } = {}) {\n    // Delete this object, and get refs to any children\n    // @ts-expect-error\n    const children = this.handle && this.deleteHandle(this.handle);\n    if (this.handle) {\n      this.removeStats();\n    }\n    this.#handle = null;\n\n    // Optionally, recursively delete the children\n    if (children && deleteChildren) {\n      children.filter(Boolean).forEach((child) => child.delete());\n    }\n\n    return this;\n  }\n\n  bind(funcOrHandle = this.handle) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  removeStats() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  toString(): string {\n    return `${this.constructor.name}(${this.id})`;\n  }\n}\n","import Resource, { ResourceOptions } from './Resource';\nimport Renderer from './Renderer';\n\nexport interface RenderBufferOptions extends ResourceOptions {\n  /**\n   * 缓冲区宽度\n   */\n  width: number;\n\n  /**\n   * 缓冲区高度\n   */\n  height: number;\n\n  /**\n   * 指定渲染缓冲区的内部格式。更多文档请参考：[renderbufferStorage](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/renderbufferStorage)\n   */\n  format: GLenum;\n}\n\n/**\n * 渲染缓冲区对象。\n * 由于渲染缓冲区对象是只写的，因此它们通常用作深度和模板关联对象。\n *\n * 实例代码：\n * ```ts\n * const renderBuffer = new RenderBuffer(renderer, {\n *   format: renderer.gl.DEPTH_COMPONENT16,\n *   width: 1920,\n *   height: 1080,\n * });\n *\n * renderBuffer.bind();\n * renderBuffer.unbind();\n * ```\n */\nexport default class RenderBuffer extends Resource<RenderBufferOptions> {\n  /**\n   * 渲染缓冲区宽度\n   */\n  public width: number;\n\n  /**\n   * 渲染缓冲区高度\n   */\n  public height: number;\n\n  #internalFormat: GLenum;\n\n  constructor(renderer: Renderer, options: Partial<RenderBufferOptions> = {} as RenderBufferOptions) {\n    super(renderer, {\n      ...options,\n      format: options.format || renderer.gl.DEPTH_COMPONENT16,\n    });\n\n    this.#internalFormat = this.options.format as GLenum;\n\n    this.width = this.options.width as number;\n    this.height = this.options.height as number;\n\n    console.assert(\n      this.width > 0 && this.height > 0,\n      'Renderbuffer object requires valid width and height greater than zero',\n    );\n    this.bind();\n    renderer.gl.renderbufferStorage(\n      renderer.gl.RENDERBUFFER,\n      this.#internalFormat,\n      this.width,\n      this.height,\n    );\n  }\n\n  /**\n   * 设置此渲染对象的的大小\n   * @param width\n   * @param height\n   */\n  resize(width, height) {\n    if (width === this.width && height === this.height) return;\n    this.width = width;\n    this.height = height;\n    this.bind();\n    this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.#internalFormat, width, height);\n    this.unbind();\n  }\n\n  /**\n   * 绑定渲染缓冲\n   */\n  bind() {\n    this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.handle);\n  }\n\n  /**\n   * 解绑渲染缓冲\n   */\n  unbind() {\n    this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, null);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  removeStats() {}\n\n  /**\n   * 销毁此渲染对象\n   */\n  destroy() {\n    this.unbind();\n    this.deleteHandle();\n  }\n\n  /**\n   * 创建 `RBO`\n   */\n  createHandle() {\n    return this.gl.createRenderbuffer();\n  }\n\n  /**\n   * 移除 `RBO`\n   */\n  deleteHandle() {\n    this.handle && this.gl.deleteRenderbuffer(this.handle);\n  }\n}\n","import Resource, { ResourceOptions } from './Resource';\nimport Renderer from './Renderer';\nimport { isNumber, isPowerOfTwo } from '../utils';\n\nexport interface TextureOptions extends ResourceOptions {\n  /**\n   * 默认为 `gl.TEXTURE_2D`\n   */\n  target: GLenum;\n\n  /**\n   * 纹理宽度，默认为 0\n   */\n  width: number;\n\n  /**\n   * 纹理高度，默认为 0\n   */\n  height: number;\n\n  /**\n   * 纹理放大时使用的过滤类型。\n   * 可能的值：`gl.NEAREST`，`gl.LINEAR`\n   */\n  magFilter: number;\n\n  /**\n   * 纹理缩小时使用的过滤类型。\n   * 可能的值：`gl.NEAREST`，`gl.LINEAR`\n   */\n  minFilter: number;\n\n  /**\n   * 水平采样纹理时使用的行为。\n   * 可能的值：`gl.REPEAT`，`gl.MIRRORED_REPEAT`，`gl.CLAMP_TO_EDGE`\n   */\n  wrapS: number;\n\n  /**\n   * 垂直采样纹理时使用的行为。\n   * 可能的值：`gl.REPEAT`，`gl.MIRRORED_REPEAT`，`gl.CLAMP_TO_EDGE`\n   */\n  wrapT: number;\n\n  /**\n   * 纹理数据的格式，在 WebGL 1 中，它必须与 internalformat 相同。\n   * 可能的值：`gl.RGBA`，`gl.RGB`，`gl.LUMINANCE`，`gl.LUMINANCE_ALPHA`\n   */\n  format: number;\n\n  /**\n   * 用于指定纹理图像的内部格式\n   * 可能的值：`gl.RGBA`，`gl.RGB`，`gl.ALPHA` 等等\n   */\n  internalFormat: number;\n\n  /**\n   * 指定纹理数据的数据类型。\n   * 可能的值：`gl.UNSIGNED_BYTE`，`gl.FLOAT`，`gl.UNSIGNED_SHORT`，`gl.UNSIGNED_INT` 等等\n   */\n  type: number;\n\n  /**\n   * 配置是否启用 `mipmap`，默认为`true`\n   * `generateMipmaps`会自动生成若干小尺寸的纹理，根据当前三维物体在屏幕上的大小来自动选择最合适的尺寸。\n   * 在 `webgl2` 使用`mipmap` 不再强制要求纹理的长度和宽度必须是2的整数次幂。\n   */\n  generateMipmaps: boolean;\n\n  /**\n   * 设置纹理上传时是否翻转 Y 轴，默认为 `false`\n   */\n  flipY: boolean;\n\n  /**\n   *  沿通过具有最高纹理像素密度的像素的坐标轴取样的数量。默认情况下，此值为 `1`。\n   *  较高的值会产生比基本mipmap更少的模糊结果，但需要使用更多纹理样本。通常我们在实现让物体缩小时\n   *  获取更高的清晰度，可以将此值设大，注意需要 `gl.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT)`\n   *  获取允许的最大值。（see: https://developer.mozilla.org/en-US/docs/Web/API/EXT_texture_filter_anisotropic）\n   */\n  anisotropy: number;\n\n  /**\n   * 指定内存中每个像素行起点的对齐要求。\n   * 可能的值: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n   */\n  unpackAlignment: number;\n\n  /**\n   * 设置纹理上传时是否预乘 `alpha` 值，默认为 `false`\n   */\n  premultiplyAlpha: boolean;\n\n  /**\n   * 指定mipmap的精细度，级别 0 是基础图像级别，级别 n 是第 n 个 mipmap 缩减级别。默认为 `0`。\n   */\n  level: number;\n\n  /**\n   * [GLintptr](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Types) 类型偏移到 [WebGLBuffer](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLBuffer) 的数据存储中。用于上传数据到当前范围 [WebGLTexture](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLTexture) 从WebGLBuffer 范围到PIXEL_UNPACK_BUFFER 目标\n   */\n  offset?: number;\n\n  /**\n   * 纹理数据\n   */\n  image: any;\n}\n\nexport interface TextureState {\n  version: number;\n  image: any;\n  wrapS: GLenum;\n  wrapT: GLenum;\n  minFilter: GLenum;\n  magFilter: GLenum;\n}\n\nexport const emptyPixel = new Uint8Array(4);\n\n/**\n * 纹理\n * 一般在 `webgl` 中会将纹理用于贴图，或者作为 `renderTarget`\n *\n * 代码示例：\n * ```ts\n * const texture = new ve.Texture(renderer, {\n *   generateMipmaps: true,\n *   flipY: true,\n * });\n *\n * const image = new Image();\n *\n * image.onload = () => {\n *   texture.setData(image, image.width, image.height);\n * };\n *\n * image.src = './assets/posx.jpg';\n * ```\n */\nexport default class Texture<T extends TextureOptions = TextureOptions> extends Resource<T> {\n  /**\n   * 设置纹理是否需要更新，一般我们会在纹理数据或者配置变更时将此配置项设置为 `true`\n   * 这样会在下一次渲染时应用对应的纹理数据和配置。\n   */\n  public needsUpdate = false;\n\n  /**\n   * 设置纹理单位\n   */\n  public textureUnit = 0;\n\n  /**\n   * 纹理数据\n   */\n  public image: any;\n\n  /**\n   * 纹理宽度\n   */\n  public width: number;\n\n  /**\n   * 纹理高度\n   */\n  public height: number;\n\n  /**\n   * `texImage2D` target\n   */\n  public target: GLenum;\n\n  #state: TextureState = {} as TextureState;\n\n  /**\n   * @param renderer Renderer 对象\n   * @param options 配置项\n   * @param needsUpdate 是否需要`update`\n   */\n  constructor(renderer: Renderer, options: Partial<T> = {}, needsUpdate = true) {\n    const { gl } = renderer;\n    const defaultOptions = {\n      target: gl.TEXTURE_2D,\n      type: gl.UNSIGNED_BYTE,\n      format: gl.RGBA,\n      internalFormat: options.format || gl.RGBA,\n      wrapS: gl.CLAMP_TO_EDGE,\n      wrapT: gl.CLAMP_TO_EDGE,\n      generateMipmaps: true,\n      minFilter: gl.LINEAR,\n      magFilter: gl.LINEAR,\n      premultiplyAlpha: false,\n      unpackAlignment: 4,\n      anisotropy: 0,\n      flipY: false,\n      level: 0,\n    };\n\n    const opt = Object.assign({}, defaultOptions, options);\n    super(renderer, opt);\n    this.textureUnit = 0;\n    this.image = this.options.image;\n    this.width = this.options.width as number;\n    this.height = this.options.height as number;\n    this.target = this.options.target as GLenum;\n    this.#state.version = -1;\n    this.needsUpdate = Boolean(needsUpdate);\n    if (this.needsUpdate) {\n      this.update();\n    }\n  }\n\n  /**\n   * 设置纹理数据\n   * @param image 纹理数据\n   * @param width 纹理宽度，默认为原始宽度\n   * @param height 纹理高度，默认为原始高度\n   */\n  setData(image, width = this.width, height = this.height) {\n    this.image = image;\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = true;\n  }\n\n  /**\n   * 设置纹理配置（默认进行合并）\n   * @param options 配置项\n   */\n  setOptions(options: Partial<T>) {\n    this.options = Object.assign(this.options, options);\n    this.width = this.options.width as number;\n    this.height = this.options.height as number;\n    this.needsUpdate = true;\n  }\n\n  /**\n   * 从 Url 设置纹理对象的数据，会默认标记为需要更新 `needsUpdate = true`\n   * @param url\n   */\n  fromSrc(url: string) {\n    return new Promise((resolve, reject) => {\n      const image = new Image();\n      image.onload = () => {\n        this.setData(image, image.width, image.height);\n        resolve(this);\n      };\n      image.onerror = (e) => {\n        reject(e);\n      };\n      image.crossOrigin = '*';\n      image.src = url;\n    });\n  }\n\n  /**\n   * 更新纹理数据或者纹理相关配置\n   * @param units 纹理单位，默认为 0\n   */\n  update(units = 0) {\n    const needUpdate = !(this.image === this.#state.image && !this.needsUpdate);\n    const checked =\n      needUpdate ||\n      this.rendererState.textureUnits[units] !== this.id ||\n      this.rendererState.activeTextureUnit !== units;\n    if (checked) {\n      this.rendererState.setActiveTexture(units);\n      this.bind(units);\n    }\n    if (!needUpdate) return;\n    this.needsUpdate = false;\n    if (this.options.wrapS !== this.#state.wrapS) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.options.wrapS as GLenum);\n      this.#state.wrapS = this.options.wrapS as GLenum;\n    }\n    if (this.options.wrapT !== this.#state.wrapT) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.options.wrapT as GLenum);\n      this.#state.wrapT = this.options.wrapT as GLenum;\n    }\n    if (this.options.minFilter !== this.#state.minFilter) {\n      this.gl.texParameteri(\n        this.target,\n        this.gl.TEXTURE_MIN_FILTER,\n        this.options.minFilter as GLenum,\n      );\n      this.#state.minFilter = this.options.minFilter as GLenum;\n    }\n    if (this.options.magFilter !== this.#state.magFilter) {\n      this.gl.texParameteri(\n        this.target,\n        this.gl.TEXTURE_MAG_FILTER,\n        this.options.magFilter as GLenum,\n      );\n      this.#state.magFilter = this.options.magFilter as GLenum;\n    }\n    if (this.options.flipY !== this.rendererState.flipY) {\n      this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.options.flipY as boolean);\n      this.rendererState.flipY = this.options.flipY as boolean;\n    }\n    if (this.options.premultiplyAlpha !== this.rendererState.premultiplyAlpha) {\n      this.gl.pixelStorei(\n        this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,\n        this.options.premultiplyAlpha as boolean,\n      );\n      this.rendererState.premultiplyAlpha = this.options.premultiplyAlpha as boolean;\n    }\n    if (this.options.unpackAlignment !== this.rendererState.unpackAlignment) {\n      this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.options.unpackAlignment as GLenum);\n      this.rendererState.unpackAlignment = this.options.unpackAlignment as number;\n    }\n\n    if (this.options.anisotropy && this.options.anisotropy !== this.rendererState.anisotropy) {\n      const extTextureFilterAnisotropic =\n        this.gl.getExtension('EXT_texture_filter_anisotropic') ||\n        this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic') ||\n        this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n      if (extTextureFilterAnisotropic) {\n        const max = this.gl.getParameter(\n          extTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT,\n        );\n        let v = this.options.anisotropy;\n        if (this.options.anisotropy > max) {\n          v = max;\n          console.warn(\n            `[Texture]: Texture.anisotropy option exceeded the maximum allowed value ${max} of the device`,\n          );\n        }\n        this.gl.texParameterf(\n          this.target,\n          extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,\n          v,\n        );\n      }\n      this.rendererState.anisotropy = this.options.anisotropy;\n    }\n\n    if (this.image) {\n      if (this.image.width) {\n        this.width = this.image.width;\n        this.height = this.image.height;\n      }\n\n      if (this.renderer.isWebGL2 && isNumber(this.options.offset)) {\n        this.gl.texImage2D(\n          this.target,\n          this.options.level as GLenum,\n          this.options.internalFormat as GLenum,\n          this.width,\n          this.height,\n          0,\n          this.options.format as GLenum,\n          this.options.type as GLenum,\n          this.image,\n          this.options.offset,\n        );\n      } else {\n        if (ArrayBuffer.isView(this.image)) {\n          this.gl.texImage2D(\n            this.target,\n            this.options.level as GLenum,\n            this.options.internalFormat as GLenum,\n            this.width,\n            this.height,\n            0,\n            this.options.format as GLenum,\n            this.options.type as GLenum,\n            this.image,\n          );\n        } else {\n          this.gl.texImage2D(\n            this.target,\n            this.options.level as GLenum,\n            this.options.internalFormat as GLenum,\n            this.options.format as GLenum,\n            this.options.type as GLenum,\n            this.image,\n          );\n        }\n      }\n\n      if (this.options.generateMipmaps) {\n        if (\n          this.renderer.isWebGL2 ||\n          (isPowerOfTwo(this.image.width) && isPowerOfTwo(this.image.height))\n        ) {\n          this.gl.generateMipmap(this.target);\n        } else {\n          this.options.generateMipmaps = false;\n          this.options.wrapS = this.gl.CLAMP_TO_EDGE;\n          this.options.wrapT = this.options.wrapS;\n          this.options.minFilter = this.gl.LINEAR;\n        }\n      }\n    } else {\n      if (this.renderer.isWebGL2 && isNumber(this.options.offset)) {\n        if (this.width > 0) {\n          (this.gl as WebGL2RenderingContext).texImage2D(\n            this.target,\n            this.options.level as GLenum,\n            this.options.internalFormat as GLenum,\n            this.width,\n            this.height,\n            0,\n            this.options.format as GLenum,\n            this.options.type as GLenum,\n            this.options.offset,\n          );\n        } else {\n          this.gl.texImage2D(\n            this.target,\n            0,\n            this.gl.RGBA,\n            1,\n            1,\n            0,\n            this.gl.RGBA,\n            this.gl.UNSIGNED_BYTE,\n            emptyPixel,\n            this.options.offset,\n          );\n        }\n      } else {\n        if (this.width > 0) {\n          this.gl.texImage2D(\n            this.target,\n            this.options.level as GLenum,\n            this.options.internalFormat as GLenum,\n            this.width,\n            this.height,\n            0,\n            this.options.format as GLenum,\n            this.options.type as GLenum,\n            null,\n          );\n        } else {\n          this.gl.texImage2D(\n            this.target,\n            0,\n            this.gl.RGBA,\n            1,\n            1,\n            0,\n            this.gl.RGBA,\n            this.gl.UNSIGNED_BYTE,\n            emptyPixel,\n          );\n        }\n      }\n    }\n    this.#state.image = this.image;\n    this.#state.version += 1;\n  }\n\n  /**\n   * 绑定纹理\n   * @param unit 纹理单位，默认为 `this.textureUnit`\n   */\n  bind(unit = this.textureUnit) {\n    if (this.rendererState.textureUnits[this.rendererState.activeTextureUnit] === this.id) return;\n    this.textureUnit = unit;\n    this.rendererState.textureUnits[this.textureUnit] = this.id;\n    this.gl.bindTexture(this.target, this.handle);\n  }\n\n  /**\n   * 解绑纹理\n   */\n  unbind() {\n    this.gl.activeTexture(this.gl.TEXTURE0 + this.textureUnit);\n    this.gl.bindTexture(this.target, null);\n    delete this.rendererState.textureUnits[this.textureUnit];\n  }\n\n  /**\n   * 销毁纹理\n   */\n  destroy() {\n    this.unbind();\n    super.destroy();\n  }\n\n  /**\n   * 移除相关状态\n   */\n  removeStats() {\n    this.#state = {\n      version: -1,\n    } as TextureState;\n  }\n\n  /**\n   * @private\n   * 创建纹理对象\n   */\n  createHandle() {\n    return this.gl.createTexture();\n  }\n\n  /**\n   * @private\n   */\n  deleteHandle() {\n    if (this.handle) {\n      this.gl.deleteTexture(this.handle);\n    }\n  }\n\n  /**\n   * 获取字符串数据\n   */\n  toString(): string {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n}\n","import Texture from './Texture';\nimport type { TextureOptions } from './Texture';\n\nexport interface DataTextureOptions extends TextureOptions {\n  data: any;\n}\n\n/**\n * 数据纹理对象，常用于结构化数据的纹理对象。\n *\n * 代码实例：\n *\n * ```ts\n * const texture = new DataTexture(renderer, opt);\n * ```\n */\nexport default class DataTexture extends Texture<DataTextureOptions> {\n  /**\n   * 设置纹理是否需要更新，一般我们会在纹理数据或者配置变更时将此配置项设置为 `true`\n   * 这样会在下一次渲染时应用对应的纹理数据和配置。\n   */\n  public needsUpdate = true;\n\n  constructor(renderer, options: Partial<DataTextureOptions> = {}) {\n    super(renderer, {\n      ...options,\n      image: options.data,\n      premultiplyAlpha: true,\n      flipY: false,\n      unpackAlignment: 1,\n    });\n  }\n}\n","import Resource, { ResourceOptions } from './Resource';\nimport Vector4 from '../math/Vector4';\nimport Texture, { TextureOptions } from './Texture';\nimport DataTexture from './DataTexture';\nimport RenderBuffer from './RenderBuffer';\nimport Renderer from './Renderer';\nimport { isNumber, omit } from '../utils';\n\nexport type Attachment = [GLenum, Texture | DataTexture | RenderBuffer];\n\nexport interface RenderTargetOptions extends ResourceOptions {\n  /**\n   * 非图片和 canvas 数据，传入的是一组结构化数组，这里我们先不去指定数据类型\n   */\n  data: any;\n\n  /**\n   * 设置此 `RenderTarget` 的名称，方便我们区分不同的 `RenderTarget`。\n   */\n  name: string;\n\n  /**\n   * `RenderTarget` 的宽度\n   */\n  width: number;\n\n  /**\n   * `RenderTarget` 的高度\n   */\n  height: number;\n\n  /**\n   * 颜色关联对象的数量，默认是`1`。\n   * 可以理解为整个帧缓存对象就是一张纹理，这个纹理的颜色就保存在`color attachment`中。\n   */\n  color: number;\n\n  /**\n   * 关联对象，此参数是一个数组，可以指定多组关联对象\n   */\n  attachments: Attachment[];\n\n  /**\n   * 是否包含深度关联对象\n   */\n  depth: boolean;\n\n  /**\n   * 是否包含模版关联对象\n   */\n  stencil: boolean;\n\n  /**\n   * 是否是深度纹理，默认是`false`。\n   */\n  depthTexture: boolean;\n}\n\n/**\n * `RenderTarget` 是一种用于将场景渲染到纹理的方法，主要用于做离屏渲染和后处理等效果。\n *\n * 示例代码：\n * ```ts\n * const options = {\n *   width: 256,\n *   height: 256,\n *   minFilter: renderer.gl.NEAREST,\n *   magFilter: renderer.gl.NEAREST\n * };\n * const current = new RenderTarget(renderer, options);\n *\n * current.resize(width, height);\n * current.bind();\n * renderer.setViewport(0, 0, width, height);\n * mesh.updateMatrixWorld();\n * mesh.draw();\n * current.unbind();\n * ```\n */\nexport default class RenderTarget extends Resource<RenderTargetOptions> {\n  #textures: Map<any, any>;\n\n  #renderBuffers: Map<any, any>;\n\n  public depth: boolean;\n\n  /**\n   * `RenderTarget` 宽度\n   */\n  public width: number;\n\n  /**\n   * `RenderTarget` 高度\n   */\n  public height: number;\n\n  /**\n   * `RenderTarget` 视图大小，默认是一个四维向量\n   */\n  public viewport: Vector4;\n\n  /**\n   * 绘制对象是否变化\n   */\n  public drawBuffersChanged: boolean;\n\n  /**\n   * 绘制缓存(绘制缓存设置了上一次绑定帧缓存状态，如果没有帧缓存可用的话，则用绘制缓存)\n   */\n  public drawBuffers: number[];\n\n  /**\n   * 清屏颜色配置；因为在我们在指定多个关联对象时，可能每个关联对象需要的清屏颜色不一致。\n   */\n  #clearColors: [number, number, number, number][];\n\n  /**\n   * 清除深度缓冲区，深度值默认是 `1`。\n   */\n  #clearDepth: number;\n\n  /**\n   * 清除模版缓冲区，默认值为`0`。\n   */\n  #clearStencil: number;\n\n  /**\n   * @param renderer `Renderer` 对象\n   * @param options 配置项，详见 #RenderTargetOptions\n   */\n  constructor(renderer: Renderer, options: Partial<RenderTargetOptions> = {}) {\n    super(renderer, {\n      color: 1,\n      depth: true,\n      depthTexture: false,\n      stencil: false,\n      ...options,\n    });\n\n    this.#renderBuffers = new Map();\n    this.#textures = new Map();\n    this.depth = Boolean(options.depth);\n    /**\n     * 在 `webgl1` 需要开启 `WEBGL_draw_buffers` 扩展\n     */\n    this.drawBuffers = [];\n    this.drawBuffersChanged = false;\n    this.width = this.options.width as number;\n    this.height = this.options.height as number;\n    this.viewport = new Vector4(0, 0, this.width, this.height);\n    this.name = this.options.name;\n    const attachments = this.options.attachments || [];\n\n    /**\n     * 此处注意如果配置中未传入指定的关联对象，那么在这里我们会内部进行创建\n     */\n    if (attachments.length === 0) {\n      for (let i = 0; i < this.options.color!; i++) {\n        const opt: any = {\n          wrapS: this.gl.CLAMP_TO_EDGE,\n          wrapT: this.gl.CLAMP_TO_EDGE,\n          minFilter: this.gl.LINEAR,\n          magFilter: this.gl.LINEAR,\n          type: this.gl.UNSIGNED_BYTE,\n          format: this.gl.RGBA,\n          flipY: false,\n          generateMipmaps: false,\n          ...options,\n        };\n        let texture;\n        if (opt.data) {\n          texture = new DataTexture(renderer, opt);\n        } else {\n          texture = new Texture(\n            renderer,\n            omit<TextureOptions & RenderTargetOptions, keyof RenderTargetOptions>(opt, [\n              'data',\n              'name',\n              'attachments',\n              'depthTexture',\n            ]),\n          );\n        }\n        attachments.push([this.gl.COLOR_ATTACHMENT0 + i, texture]);\n      }\n      if (\n        options.depthTexture &&\n        (renderer.isWebGL2 ||\n          // 此扩展仅适用于WebGL1上下文。在WebGL2 中，此扩展的功能默认在 WebGL2 上下文中可用。WebGL2 中的常量是 gl.UNSIGNED_INT_24_8\n          // @link https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_depth_texture\n          (!renderer.isWebGL2 && renderer.gl.getExtension('WEBGL_depth_texture')))\n      ) {\n        const texture = new Texture(renderer, {\n          width: this.width,\n          height: this.height,\n          minFilter: this.gl.NEAREST,\n          magFilter: this.gl.NEAREST,\n          format: this.gl.DEPTH_COMPONENT,\n          internalFormat: renderer.isWebGL2 ? this.gl.DEPTH_COMPONENT16 : this.gl.DEPTH_COMPONENT,\n          type: this.gl.UNSIGNED_INT,\n        });\n        attachments.push([this.gl.DEPTH_ATTACHMENT, texture]);\n      } else {\n        const { depth, stencil } = options;\n        if (depth && !stencil) {\n          const renderBuffer = new RenderBuffer(renderer, {\n            format: this.gl.DEPTH_COMPONENT16,\n            width: this.width,\n            height: this.height,\n          });\n          attachments.push([this.gl.DEPTH_ATTACHMENT, renderBuffer]);\n        } else if (stencil && !depth) {\n          const renderBuffer = new RenderBuffer(renderer, {\n            format: this.gl.STENCIL_INDEX8,\n            width: this.width,\n            height: this.height,\n          });\n          attachments.push([this.gl.STENCIL_ATTACHMENT, renderBuffer]);\n        } else if (depth && stencil) {\n          const renderBuffer = new RenderBuffer(renderer, {\n            format: this.gl.DEPTH_STENCIL,\n            width: this.width,\n            height: this.height,\n          });\n          attachments.push([this.gl.DEPTH_STENCIL_ATTACHMENT, renderBuffer]);\n        }\n      }\n    }\n    this.create(attachments);\n  }\n\n  get texture() {\n    return this.#textures.values().next().value;\n  }\n\n  /**\n   * 设置清屏颜色值\n   * @param colors\n   */\n  set clearColors(colors) {\n    this.#clearColors = colors;\n  }\n\n  /**\n   * 获取清屏颜色值\n   */\n  get clearColors() {\n    return this.#clearColors;\n  }\n\n  /**\n   * 设置清除深度缓冲区的深度值\n   * @param depth 深度值\n   */\n  set clearDepth(depth) {\n    this.#clearDepth = depth;\n  }\n\n  /**\n   * 获取深度缓冲区的深度值\n   */\n  get clearDepth() {\n    return this.#clearDepth;\n  }\n\n  /**\n   * 设置清除模版缓冲区的默认值\n   * @param stencil 模版缓冲区默认值\n   */\n  set clearStencil(stencil) {\n    this.#clearStencil = stencil;\n  }\n\n  /**\n   * 获取缓冲区的默认值\n   */\n  get clearStencil() {\n    return this.#clearStencil;\n  }\n\n  /**\n   * 创建帧缓冲关联对象\n   * @param attachments\n   */\n  create(attachments: Attachment[]) {\n    this.#clearColors = [];\n    this.#clearDepth = 1;\n    this.#clearStencil = 0;\n    for (const attachment of attachments) {\n      const attach = attachment[0];\n      const target = attachment[1];\n      if (target instanceof RenderBuffer) {\n        this.#renderBuffers.set(attach, target);\n      } else if (target instanceof Texture) {\n        this.#textures.set(attach, target);\n        this.drawBuffers.push(attach);\n      }\n      const i = attach - this.gl.COLOR_ATTACHMENT0;\n      this.#clearColors[i] = [0, 0, 0, 0];\n    }\n\n    if (this.options.color! > 1) {\n      // @link https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers#browser_compatibility 兼容性不好\n      if (this.renderer.isWebGL2) {\n        (this.gl as WebGL2RenderingContext).drawBuffers(this.drawBuffers);\n      } else {\n        const ext = this.renderer.extension('WEBGL_draw_buffers') as WEBGL_draw_buffers;\n        if (ext && ext.drawBuffersWEBGL) {\n          ext.drawBuffersWEBGL(this.drawBuffers);\n        } else {\n          throw new Error(\n            'Please open the corresponding extension [WEBGL_draw_buffers](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_draw_buffers#browser_compatibility) and check whether the browser supports it',\n          );\n        }\n      }\n    }\n\n    this.drawBuffersChanged = true;\n    this.bind();\n\n    /**\n     * 将渲染缓冲区关联到帧缓冲区\n     */\n    this.#renderBuffers.forEach((rbo, attachment) => {\n      this.gl.framebufferRenderbuffer(\n        this.gl.FRAMEBUFFER,\n        attachment,\n        this.gl.RENDERBUFFER,\n        rbo.handle,\n      );\n    });\n\n    /**\n     * 将纹理缓冲区与帧缓冲区关联\n     */\n    this.#textures.forEach((texture, attachment) => {\n      this.gl.framebufferTexture2D(\n        this.gl.FRAMEBUFFER,\n        attachment,\n        this.gl.TEXTURE_2D,\n        texture.handle,\n        0,\n      );\n    });\n    this.unbind();\n    const status = this.gl.checkFramebufferStatus(this.gl.FRAMEBUFFER);\n    if (status !== this.gl.FRAMEBUFFER_COMPLETE) {\n      switch (status) {\n        case this.gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n          throw new Error(\n            'The attachment types are mismatched or not all framebuffer attachment points are framebuffer attachment complete',\n          );\n        case this.gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n          throw new Error('There is no attachment');\n        case this.gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n          throw new Error(' Height and width of the attachment are not the same.');\n        case this.gl.FRAMEBUFFER_UNSUPPORTED:\n          throw new Error(\n            'The format of the attachment is not supported or if depth and stencil attachments are not the same renderbuffer',\n          );\n      }\n    }\n\n    return this.handle;\n  }\n\n  /**\n   * 清空此帧缓冲区\n   */\n  clear() {\n    this.bind();\n\n    let flags = 0;\n\n    if (this.clearColors[0]) {\n      const color = this.clearColors[0];\n      this.gl.clearColor(color[0], color[1], color[2], color[3]);\n      flags |= this.gl.COLOR_BUFFER_BIT;\n    }\n    if (isNumber(this.#clearDepth)) {\n      this.gl.clearDepth(this.#clearDepth);\n      flags |= this.gl.DEPTH_BUFFER_BIT;\n    }\n\n    if (isNumber(this.#clearStencil)) {\n      this.gl.clearStencil(this.#clearStencil);\n      flags |= this.gl.STENCIL_BUFFER_BIT;\n    }\n\n    this.gl.clear(flags);\n    this.unbind();\n  }\n\n  getTexture(key) {\n    return this.#textures.get(key);\n  }\n\n  /**\n   * 重新设置此帧缓冲区的大小\n   * @param width 宽度\n   * @param height 高度\n   */\n  resize(width: number, height: number) {\n    if (this.width !== width || this.height !== height) {\n      this.width = width;\n      this.height = height;\n      this.#textures.forEach((texture: Texture) => {\n        if (texture.width !== width || texture.height !== height) {\n          texture.width = width;\n          texture.height = height;\n          texture.needsUpdate = true;\n          texture.update();\n        }\n      });\n      this.#renderBuffers.forEach((rbo) => {\n        rbo.resize(width, height);\n      });\n      this.viewport.set(0, 0, width, height);\n    }\n  }\n\n  /**\n   * 绑定帧缓冲区\n   * @param fbo 如果未传入 `fbo`，默认是此 `RenderTarget` 创建的帧缓冲\n   */\n  bind(fbo = this.gl.FRAMEBUFFER) {\n    this.gl.bindFramebuffer(fbo, this.handle);\n  }\n\n  /**\n   * 解绑帧缓冲区\n   * @param fbo 如果未传入 `fbo`，默认是此 `RenderTarget` 创建的帧缓冲\n   */\n  unbind(fbo = this.gl.FRAMEBUFFER) {\n    this.gl.bindFramebuffer(fbo, null);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  removeStats() {}\n\n  /**\n   * 销毁此 `RenderTarget`\n   * - 销毁关联的纹理缓冲区\n   * - 销毁关联的渲染缓冲区\n   * - 销毁帧缓冲区\n   */\n  destroy() {\n    this.#textures.forEach((texture: Texture) => {\n      texture.destroy();\n    });\n    this.#renderBuffers.forEach((buffer) => {\n      buffer.destroy();\n    });\n    this.deleteHandle();\n  }\n\n  /**\n   * 创建帧缓冲区\n   */\n  createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  /**\n   * 移除帧缓冲区\n   */\n  deleteHandle() {\n    this.handle && this.gl.deleteFramebuffer(this.handle);\n  }\n\n  /**\n   * 将此实例转换为字符串标识\n   */\n  toString(): string {\n    return `RenderTarget(${this.id},${this.width}x${this.height})`;\n  }\n}\n","import type { Attributes } from '../core/Geometry';\nimport Geometry from '../core/Geometry';\nimport Renderer from '../core/Renderer';\n\nexport interface PlaneOptions {\n  /**\n   * 平面几何体沿着`X`轴的宽度，默认值是`1`。\n   */\n  width: number;\n\n  /**\n   * 平面几何体沿着`Y`轴的宽度，默认值是`1`。\n   */\n  height: number;\n\n  /**\n   * 宽度分段数，默认值是`1`。\n   */\n  widthSegments: number;\n\n  /**\n   * 高度分段数，默认值是`1`。\n   */\n  heightSegments: number;\n\n  /**\n   * 顶点数据\n   */\n  attributes: Attributes;\n}\n\n/**\n * 获取平面几何体数据\n * @param position\n * @param normal\n * @param uv\n * @param index\n * @param width\n * @param height\n * @param depth\n * @param widthSegments\n * @param heightSegments\n * @param u\n * @param v\n * @param w\n * @param uDir\n * @param vDir\n * @param i\n * @param ii\n */\nexport function getPlaneBuffer(\n  position: Float32Array,\n  normal: Float32Array,\n  uv: Float32Array,\n  index: Uint32Array | Uint16Array,\n  width = 1,\n  height = 1,\n  depth = 0,\n  widthSegments = 1,\n  heightSegments = 1,\n  u = 0,\n  v = 1,\n  w = 2,\n  uDir = 1,\n  vDir = -1,\n  i = 0,\n  ii = 0,\n) {\n  const consti = i;\n  const widthHalf = width / 2;\n  const heightHalf = height / 2;\n  const depthHalf = depth / 2;\n\n  const gridX = Math.floor(widthSegments);\n  const gridY = Math.floor(heightSegments);\n\n  const gridX1 = gridX + 1;\n  const gridY1 = gridY + 1;\n\n  const segmentWidth = width / gridX;\n  const segmentHeight = height / gridY;\n\n  for (let iy = 0; iy < gridY1; iy++) {\n    const y = iy * segmentHeight - heightHalf;\n    for (let ix = 0; ix < gridX1; ix++) {\n      position[i * 3 + u] = (ix * segmentWidth - widthHalf) * uDir;\n      position[i * 3 + v] = y * vDir;\n      position[i * 3 + w] = depthHalf;\n\n      normal[i * 3 + u] = 0;\n      normal[i * 3 + v] = 0;\n      normal[i * 3 + w] = depth >= 0 ? 1 : -1;\n\n      uv[i * 2] = ix / gridX;\n      uv[i * 2 + 1] = 1 - iy / gridY;\n\n      // eslint-disable-next-line no-param-reassign\n      i++;\n      if (iy === gridY || ix === gridX) continue;\n\n      const a = consti + ix + gridX1 * iy;\n      const b = consti + ix + gridX1 * (iy + 1);\n      const c = consti + ix + 1 + gridX1 * (iy + 1);\n      const d = consti + ix + 1 + gridX1 * iy;\n\n      index[ii * 6] = a;\n      index[ii * 6 + 1] = b;\n      index[ii * 6 + 2] = d;\n      index[ii * 6 + 3] = b;\n      index[ii * 6 + 4] = c;\n      index[ii * 6 + 5] = d;\n\n      // eslint-disable-next-line no-param-reassign\n      ii++;\n    }\n  }\n}\n\n/**\n * 平面几何体\n *\n * 代码示例：\n * ```ts\n * const plane - new Plane(renderer);\n *\n * const plane = new Mesh(renderer, { geometry: planeGeometry, program });\n * scene.add(plane);\n * ```\n */\nexport default class Plane extends Geometry {\n  /**\n   * @param renderer 渲染器\n   * @param width 平面几何体沿着`X`轴的宽度，默认值是`1`。\n   * @param height 平面几何体沿着`Y`轴的宽度，默认值是`1`。\n   * @param widthSegments 宽度分段数，默认值是`1`。\n   * @param heightSegments 高度分段数，默认值是`1`。\n   * @param attributes 顶点数据\n   */\n  constructor(\n    renderer: Renderer,\n    {\n      width = 1,\n      height = 1,\n      widthSegments = 1,\n      heightSegments = 1,\n      attributes = {},\n    }: Partial<PlaneOptions> = {},\n  ) {\n    const gridX = Math.floor(widthSegments);\n    const gridY = Math.floor(heightSegments);\n\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n\n    const num = gridX1 * gridY1;\n    const numIndices = gridX * gridY * 6;\n\n    const position = new Float32Array(num * 3);\n    const normal = new Float32Array(num * 3);\n    const uv = new Float32Array(num * 2);\n    const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n    getPlaneBuffer(position, normal, uv, index, width, height, 0, widthSegments, heightSegments);\n\n    super(renderer, {\n      ...attributes,\n      position: {\n        size: 3,\n        data: position,\n      },\n      normal: {\n        size: 3,\n        data: normal,\n      },\n      uv: {\n        size: 2,\n        data: uv,\n      },\n      index: {\n        data: index,\n      },\n    });\n  }\n}\n","import type { Attributes } from '../core/Geometry';\nimport Geometry from '../core/Geometry';\nimport Renderer from '../core/Renderer';\nimport { getPlaneBuffer } from './Plane';\n\nexport interface BoxOptions {\n  /**\n   * 几何体沿着`X`轴的宽度，默认值是`1`。\n   */\n  width: number;\n\n  /**\n   * 几何体沿着`Y`轴的宽度，默认值是`1`。\n   */\n  height: number;\n\n  /**\n   * 几何体沿着`Z`轴的深度，默认值是`1`。\n   */\n  depth: number;\n\n  /**\n   * 宽度分段数，默认值是`1`。\n   */\n  widthSegments: number;\n\n  /**\n   * 高度分段数，默认值是`1`。\n   */\n  heightSegments: number;\n\n  /**\n   * 深度分段数，默认值是`1`。\n   */\n  depthSegments: number;\n\n  /**\n   * 顶点数据\n   */\n  attributes: Attributes;\n}\n\n/**\n * 立方体，通常用来创建立方体或者不规则四边形。\n *\n * 代码示例：\n * ```ts\n * const boxGeometry - new Box(renderer);\n *\n * const box = new Mesh(renderer, { geometry: boxGeometry, program });\n * scene.add(box);\n * ```\n */\nexport default class Box extends Geometry {\n  /**\n   * @param renderer 渲染器\n   * @param width 几何体沿着`X`轴的宽度，默认值是`1`。\n   * @param height 几何体沿着`Y`轴的宽度，默认值是`1`。\n   * @param depth 几何体沿着`Z`轴的深度，默认值是`1`。\n   * @param widthSegments 宽度分段数，默认值是`1`。\n   * @param heightSegments 高度分段数，默认值是`1`。\n   * @param depthSegments 深度分段数，默认值是`1`。\n   * @param attributes 顶点数据\n   */\n  constructor(\n    renderer: Renderer,\n    {\n      width = 1,\n      height = 1,\n      depth = 1,\n      widthSegments = 1,\n      heightSegments = 1,\n      depthSegments = 1,\n      attributes = {},\n    }: Partial<BoxOptions> = {},\n  ) {\n    const gridX = Math.floor(widthSegments);\n    const gridY = Math.floor(heightSegments);\n    const gridZ = Math.floor(depthSegments);\n\n    const gridX1 = gridX + 1;\n    const gridY1 = gridY + 1;\n    const gridZ1 = gridZ + 1;\n\n    const num = gridX1 * gridY1 * 2 + gridX1 * gridZ1 * 2 + gridY1 * gridZ1 * 2;\n    const numIndices = (gridX * gridY * 2 + gridX * gridZ * 2 + gridY * gridZ * 2) * 6;\n\n    const position = new Float32Array(num * 3);\n    const normal = new Float32Array(num * 3);\n    const uv = new Float32Array(num * 2);\n    const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n    let i = 0;\n    let ii = 0;\n    const d = gridZ1 * gridY1;\n    const w = gridX1 * gridZ1;\n    const h = gridX1 * gridY1;\n    const dt = gridZ * gridY;\n    const wt = gridX * gridZ;\n    const ht = gridX * gridY;\n    // left plane\n    getPlaneBuffer(\n      position,\n      normal,\n      uv,\n      index,\n      depth,\n      height,\n      width,\n      depthSegments,\n      heightSegments,\n      2,\n      1,\n      0,\n      -1,\n      -1,\n      i,\n      ii,\n    );\n\n    // right plane\n    i += d;\n    ii += dt;\n    getPlaneBuffer(\n      position,\n      normal,\n      uv,\n      index,\n      depth,\n      height,\n      -width,\n      depthSegments,\n      heightSegments,\n      2,\n      1,\n      0,\n      1,\n      -1,\n      i,\n      ii,\n    );\n\n    // top plane\n    i += d;\n    ii += dt;\n    getPlaneBuffer(\n      position,\n      normal,\n      uv,\n      index,\n      width,\n      depth,\n      height,\n      depthSegments,\n      widthSegments,\n      0,\n      2,\n      1,\n      1,\n      1,\n      i,\n      ii,\n    );\n\n    // bottom plane\n    i += w;\n    ii += wt;\n    getPlaneBuffer(\n      position,\n      normal,\n      uv,\n      index,\n      width,\n      depth,\n      -height,\n      depthSegments,\n      widthSegments,\n      0,\n      2,\n      1,\n      1,\n      -1,\n      i,\n      ii,\n    );\n\n    // front plane\n    i += w;\n    ii += wt;\n    getPlaneBuffer(\n      position,\n      normal,\n      uv,\n      index,\n      width,\n      height,\n      -depth,\n      widthSegments,\n      heightSegments,\n      0,\n      1,\n      2,\n      -1,\n      -1,\n      i,\n      ii,\n    );\n\n    // back plane\n    i += h;\n    ii += ht;\n    getPlaneBuffer(\n      position,\n      normal,\n      uv,\n      index,\n      width,\n      height,\n      depth,\n      widthSegments,\n      heightSegments,\n      0,\n      1,\n      2,\n      1,\n      -1,\n      i,\n      ii,\n    );\n\n    super(renderer, {\n      ...attributes,\n      position: {\n        size: 3,\n        data: position,\n      },\n      normal: {\n        size: 3,\n        data: normal,\n      },\n      uv: {\n        size: 2,\n        data: uv,\n      },\n      index: {\n        data: index,\n      },\n    });\n  }\n}\n","import Resource, { ResourceOptions } from './Resource';\nimport Renderer from './Renderer';\nimport { getShaderName } from '../utils';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\nconst cachedIds = {};\nfunction genShaderName(key = 'id') {\n  cachedIds[key] = cachedIds[key] || 1;\n  const idx = cachedIds[key];\n  cachedIds[key] += 1;\n  return ''.concat(key, '-').concat(idx);\n}\n\ntype ShaderType = 'vertex-shader' | 'fragment-shader' | 'unknown';\n\nconst getTypeName = (ctx, shaderType: any): ShaderType => {\n  switch (shaderType) {\n    case ctx.VERTEX_SHADER:\n      return 'vertex-shader';\n    case ctx.FRAGMENT_SHADER:\n      return 'fragment-shader';\n    default:\n      return 'unknown';\n  }\n};\n\nconst getShaderType = (ctx, type) => {\n  switch (type) {\n    case 'fragment':\n      return ctx.FRAGMENT_SHADER;\n    case 'vertex':\n      return ctx.VERTEX_SHADER;\n    default:\n      return;\n  }\n};\n\nfunction addLineNumbers(string: string) {\n  const lines = string.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    lines[i] = i + 1 + ': ' + lines[i];\n  }\n  return lines.join('\\n');\n}\n\nexport class Shader extends Resource<ResourceOptions> {\n  #shaderType: ShaderType;\n\n  #includes: {\n    [key: string]: string;\n  };\n\n  public sourceCode: string;\n\n  constructor(renderer: Renderer, sourceCode, type, includes = {}) {\n    const shaderType = getShaderType(renderer.gl, type);\n    super(renderer, {\n      name: getShaderName(sourceCode) || genShaderName(getTypeName(renderer, shaderType)),\n    });\n    console.assert(typeof sourceCode === 'string', ERR_SOURCE);\n    this.#includes = includes;\n    this.#shaderType = shaderType;\n    this.sourceCode = this.injectShaderModule(sourceCode, includes || {}).replace(\n      /\\n\\n+/gm,\n      '\\n\\n',\n    );\n    this.createShader(this.sourceCode);\n  }\n\n  injectShaderModule(shader, modules = {}) {\n    const regExp = /^[\\t ]*#glsl_include +<([\\w.]+)>/gm;\n    const replacement = (substring, r) => {\n      let module = modules[r];\n      if (module === undefined) throw new Error('Cannot resolve #include <'.concat(r, '>'));\n      module = module.replace(/#include </g, '#glsl_include <');\n      return this.injectShaderModule(module, modules);\n    };\n    return shader.replace(regExp, replacement);\n  }\n\n  createShader(source = this.source) {\n    let s = source.replace(/#include </g, '#glsl_include <');\n    s = this.injectShaderModule(s, this.#includes || {}).replace(/\\n\\n+/gm, '\\n\\n');\n    this.gl.shaderSource(this.handle, s);\n    this.gl.compileShader(this.handle);\n    if (!this.gl.getShaderParameter(this.handle, this.gl.COMPILE_STATUS)) {\n      const log = this.gl.getShaderInfoLog(this.handle) || '';\n      this.gl.deleteShader(this.handle);\n      throw new Error(`${this.toString()}\\n${log}\\n${addLineNumbers(s)}`);\n    }\n  }\n\n  get source() {\n    return this.sourceCode;\n  }\n\n  get shaderType() {\n    return this.#shaderType;\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  setSource(source) {\n    const name = getShaderName(source);\n    if (name) {\n      this.name = genShaderName(name);\n    }\n    this.createShader(source);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  removeStats() {}\n\n  deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  toString(): string {\n    return `${getTypeName(this.gl, this.shaderType)}:${this.id}`;\n  }\n}\n\n/**\n * 顶点着色器\n */\nexport class VertexShader extends Shader {\n  constructor(renderer: Renderer, sourceCode: string, includes) {\n    super(renderer, sourceCode, 'vertex', includes);\n  }\n\n  createHandle() {\n    return this.gl.createShader(this.gl.VERTEX_SHADER);\n  }\n}\n\n/**\n * 片段着色器\n */\nexport class FragmentShader extends Shader {\n  constructor(renderer: Renderer, sourceCode: string, includes) {\n    super(renderer, sourceCode, 'fragment', includes);\n  }\n\n  createHandle() {\n    return this.gl.createShader(this.gl.FRAGMENT_SHADER);\n  }\n}\n","import { isNull, isUndef, omit, parseShader, uid } from '../utils';\nimport type { WithNull } from '../types';\n\nimport Resource, { ResourceOptions } from './Resource';\nimport Texture from './Texture';\nimport Vector from '../math/Vector';\nimport Matrix from '../math/Matrix';\nimport { FragmentShader, VertexShader } from './Shader';\nimport Color from '../math/Color';\nimport { BlendType } from './State';\n\nconst getDefines = (t) => {\n  const defines = [];\n  return defines.map((d) => '#define '.concat(d));\n};\n\nconst arrayCacheF32 = {};\n\nfunction flatten(a) {\n  const arrayLen = a.length;\n  const valueLen = a[0].length;\n  if (valueLen === undefined) return a;\n  const length = arrayLen * valueLen;\n  let value = arrayCacheF32[length];\n  if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n  for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n  return value;\n}\n\nfunction setUniform(gl: WebGLRenderingContext, type: number, location: WebGLUniformLocation, value: any) {\n  value = value.length ? flatten(value) : value;\n  const isArray = value.length;\n\n  switch (type) {\n    case WebGLRenderingContext.FLOAT: // 5126\n      return isArray ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n    case WebGLRenderingContext.FLOAT_VEC2: // 35664\n      return gl.uniform2fv(location, value); // FLOAT_VEC2\n    case WebGLRenderingContext.FLOAT_VEC3: // 35665\n      return gl.uniform3fv(location, value); // FLOAT_VEC3\n    case WebGLRenderingContext.FLOAT_VEC4:\n      return gl.uniform4fv(location, value); // FLOAT_VEC4\n    case WebGLRenderingContext.BOOL: // BOOL\n    case WebGLRenderingContext.INT: // INT\n    case WebGLRenderingContext.SAMPLER_2D: // SAMPLER_2D\n    case WebGLRenderingContext.SAMPLER_CUBE: // SAMPLER_CUBE\n      return isArray ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n    case WebGLRenderingContext.BOOL_VEC2: // BOOL_VEC2\n    case WebGLRenderingContext.INT_VEC2: // INT_VEC2\n      return gl.uniform2iv(location, value); // INT_VEC2\n    case WebGLRenderingContext.BOOL_VEC3: // BOOL_VEC3\n    case WebGLRenderingContext.INT_VEC3: // INT_VEC3\n      return gl.uniform3iv(location, value); // INT_VEC3\n    case WebGLRenderingContext.BOOL_VEC4: // BOOL_VEC4\n    case WebGLRenderingContext.INT_VEC4: // INT_VEC4\n      return gl.uniform4iv(location, value); // INT_VEC4\n    case WebGLRenderingContext.FLOAT_MAT2: // FLOAT_MAT2\n      return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n    case WebGLRenderingContext.FLOAT_MAT3: // FLOAT_MAT3\n      return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n    case WebGLRenderingContext.FLOAT_MAT4: // FLOAT_MAT4\n      return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n  }\n}\n\nexport type Uniforms = any;\n\nexport interface UniformData {\n  location: WithNull<WebGLUniformLocation>;\n  type: GLenum;\n  name: string;\n  value?: any;\n  isStruct: boolean;\n  isStructArray?: boolean;\n  structIndex?: number;\n  structProperty?: string;\n}\n\nexport interface ProgramRenderState {\n  /**\n   * 指定正面或背面多边形是否可以剔除\n   * 可能的值：`gl.FRONT`、`gl.FRONT_AND_BACK` 和 `gl.BACK`\n   */\n  cullFace: GLenum;\n\n  /**\n   * 指定图形顶点以顺时针是正面还是逆时针方向是正面：\n   * 可能的值：`gl.CW` 和 `gl.CCW`\n   */\n  frontFace: GLenum;\n\n  /**\n   * 是否启用深度测试，默认启用\n   */\n  depthTest: boolean;\n\n  /**\n   * 是否开启深度值写入\n   */\n  depthWrite: boolean;\n\n  /**\n   * 指定深度检测的参数，即什么情况算失败、什么情况算作通过，默认是 `gl.LESS`。\n   * 可能的值：\n   * - gl.NEVER （总不通过）\n   * - gl.LESS（如果新值小于缓冲区中的值则通过）\n   * - gl.EQUAL（如果新值等于缓冲区中的值则通过）\n   * - gl.LEQUAL（如果新值小于等于缓冲区中的值则通过）\n   * - gl.GREATER（如果新值大于缓冲区中的值则通过）\n   * - gl.NOTEQUAL（如果新值不等于缓冲区中的值则通过）\n   * - gl.GEQUAL（如果新值大于等于缓冲区中的值则通过）\n   * - gl.ALWAYS（总通过）\n   */\n  depthFunc: GLenum;\n\n  /**\n   * blend 类型\n   */\n  blending: BlendType;\n\n  /**\n   * 指定颜色混合算法\n   * 可能的值可以参考：https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/blendFunc 和 https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFuncSeparate\n   */\n  blendFunc: {\n    src: number;\n    dst: number;\n    srcAlpha?: number;\n    dstAlpha?: number;\n  };\n\n  /**\n   * 指定颜色混合方程式\n   * 可能的值可以参考：https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquation 和 https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquationSeparate\n   */\n  blendEquation: {\n    modeRGB: number;\n    modeAlpha?: number;\n  };\n}\n\nexport interface ProgramOptions extends ProgramRenderState, ResourceOptions {\n  /**\n   * 指定 `id`\n   */\n  id: string;\n\n  /**\n   * 顶点着色器\n   */\n  vertexShader: string | VertexShader;\n\n  /**\n   * 片段着色器\n   */\n  fragmentShader: string | FragmentShader;\n\n  /**\n   * uniform\n   */\n  uniforms?: Uniforms;\n\n  /**\n   * 配置是否是透明渲染\n   */\n  transparent?: boolean;\n\n  /**\n   * 指定着色的宏定义\n   */\n  defines?: string[];\n\n  /**\n   * 着色器模块，会在着色器中遇到 `#include <xxx>` 会自动替换此配置项对应的着色器片段。\n   */\n  includes?: {\n    [key: string]: string;\n  };\n}\n\n/**\n * 着色器程序对象封装，主要功能如下：\n * - 创建Program管线，编译顶点着色器和片段着色器源码；\n * - 管理`Attribute`属性\n * - 管理`Uniform`属性\n * - 渲染状态的切换\n *\n * 示例代码：\n * ```jsx live\n * function render(props) {\n *   const drawModelVertex = `\n *     attribute vec2 uv;\n *     attribute vec3 position;\n *     uniform mat4 modelViewMatrix;\n *     uniform mat4 projectionMatrix;\n *\n *     varying vec2 vUv;\n *\n *     void main() {\n *         vUv = uv;\n *\n *         gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n *\n *         // gl_PointSize only applicable for gl.POINTS draw mode\n *         gl_PointSize = 5.0;\n *     }\n *     `;\n *\n *   const drawModelFragment = `\n *     precision highp float;\n *\n *     uniform float uTime;\n *     varying vec2 vUv;\n *\n *     void main() {\n *         gl_FragColor.rgb = 0.5 + 0.3 * sin(vUv.yxx + uTime) + vec3(0.2, 0.0, 0.1);\n *         gl_FragColor.a = 1.0;\n *     }\n *     `;\n *\n *   const refDom = useRef(null);\n *\n *\n *\n *   const init = () => {\n *     const canvas = refDom.current;\n *\n *     canvas.width = canvas.clientWidth;\n *     canvas.height = canvas.clientHeight;\n *     const renderer = new Renderer(canvas, {\n *       alpha: true,\n *     });\n *\n *     const fov = 15;\n *     const nearZ = 0.1;\n *\n *     const farZ = 100;\n *     const camera = new PerspectiveCamera(fov, canvas.width / canvas.height, nearZ, farZ);\n *     camera.position.z = 15;\n *\n *     function resize(target) {\n *       const { width, height } = target.getBoundingClientRect();\n *       renderer.setSize(width, height);\n *       camera.aspect = width / height;\n *     }\n *\n *     const scene = new Scene();\n *\n *     const geometry = new Geometry(renderer, {\n *       position: {\n *         size: 3,\n *         data: new Float32Array([\n *           -0.5, 0.5, 0,\n *           -0.5, -0.5, 0,\n *           0.5, 0.5, 0,\n *           0.5, -0.5, 0\n *         ])\n *       },\n *       uv: {\n *         size: 2,\n *         data: new Float32Array([0, 1, 1, 1, 0, 0, 1, 0])\n *       },\n *       index: {\n *         data: new Uint16Array([0, 1, 2, 1, 3, 2])\n *       },\n *     });\n *\n *     const program = new Program(renderer, {\n *       vertexShader: drawModelVertex,\n *       fragmentShader: drawModelFragment,\n *       uniforms: {\n *         uTime: { value: 0 },\n *       },\n *     });\n *\n *     const points = new Mesh(renderer, { mode: renderer.gl.POINTS, geometry, program });\n *     points.setParent(scene);\n *     points.position.set(-1, 1, 0);\n *\n *     const lineStrip = new Mesh(renderer, { mode: renderer.gl.LINES, geometry, program });\n *     lineStrip.setParent(scene);\n *     lineStrip.position.set(1, 1, 0);\n *\n *     const lineLoop = new Mesh(renderer, { mode: renderer.gl.LINE_LOOP, geometry, program });\n *     lineLoop.setParent(scene);\n *     lineLoop.position.set(-1, -1, 0);\n *\n *     const triangles = new Mesh(renderer, { mode: renderer.gl.TRIANGLES, geometry, program });\n *     triangles.setParent(scene);\n *     triangles.position.set(1, -1, 0);\n *\n *     const raf = new Raf((t) => {\n *       program.setUniform('uTime', t);\n *       renderer.render({ scene, camera });\n *     });\n *\n *     return {\n *       canvas,\n *       resize,\n *     }\n *   }\n *\n *   useEffect(() => {\n *     const { canvas, resize } = init();\n *\n *     observe(canvas, resize);\n *\n *     return () => {\n *       unobserve(canvas, resize);\n *     };\n *   }, []);\n *\n *   return (\n *     <div className=\"live-wrap\">\n *       <canvas className=\"scene-canvas\" ref={refDom}></canvas>\n *     </div>\n *   );\n * }\n * ```\n */\nexport default class Program extends Resource<ProgramOptions> {\n  public attributeOrder: string;\n\n  public uniforms: Uniforms;\n\n  #uniformLocations: Map<any, any>;\n\n  #attributeLocations: Map<any, any>;\n\n  #vs: VertexShader;\n\n  #fs: FragmentShader;\n\n  #renderState: Partial<ProgramRenderState>;\n\n  constructor(renderer, options: Partial<ProgramOptions> = {} as ProgramOptions) {\n    super(renderer, options);\n    const {\n      id,\n      vertexShader,\n      fragmentShader,\n      uniforms = {},\n      transparent = false,\n      defines = [],\n      includes = {},\n      cullFace,\n      frontFace = renderer.gl.CCW,\n      depthTest = true,\n      depthWrite = true,\n      depthFunc = renderer.gl.LESS,\n      blending = 1,\n      blendFunc,\n      blendEquation,\n    } = options;\n    this.id = id || uid('program');\n    const defs: string[] = [\n      ...getDefines({\n        ...options,\n        ...uniforms,\n      }),\n      ...defines,\n    ].map((str) => (!str.startsWith('#define ') ? '#define '.concat(str) : str));\n\n    if (!vertexShader || !fragmentShader) {\n      throw new Error(`Program: ${this.id}：must provide vertexShader and fragmentShader`);\n    }\n\n    this.#vs = typeof vertexShader === 'string' ? new VertexShader(renderer, parseShader(vertexShader, defs), includes) : vertexShader;\n    this.#fs = typeof fragmentShader === 'string' ? new FragmentShader(renderer, parseShader(fragmentShader, defs), includes) : fragmentShader;\n\n    this.gl.attachShader(this.handle, this.#vs.handle);\n    this.gl.attachShader(this.handle, this.#fs.handle);\n    this.gl.linkProgram(this.handle);\n    this.gl.validateProgram(this.handle);\n    if (!this.gl.getProgramParameter(this.handle, this.gl.LINK_STATUS)) {\n      throw new Error(\n        'Program:'\n          .concat(this.id, ': Error linking ')\n          .concat(this.gl.getProgramInfoLog(this.handle) as string),\n      );\n    }\n\n    this.uniforms = uniforms;\n\n    this.#renderState = {\n      blending,\n      cullFace,\n      frontFace,\n      depthTest,\n      depthWrite,\n      depthFunc,\n      blendFunc,\n      blendEquation,\n    };\n\n    this.#uniformLocations = new Map();\n    this.#attributeLocations = new Map();\n\n    this.#assignUniforms(uniforms);\n\n    this.#assignAttributes();\n    if (transparent && !blendFunc?.src) {\n      if (this.renderer.premultipliedAlpha) {\n        this.#renderState.blendFunc = {\n          ...blendFunc,\n          src: this.gl.ONE,\n          dst: this.gl.ONE_MINUS_SRC_ALPHA,\n        };\n      } else {\n        this.#renderState.blendFunc = {\n          ...blendFunc,\n          src: this.gl.SRC_ALPHA,\n          dst: this.gl.ONE_MINUS_SRC_ALPHA,\n        };\n      }\n    }\n  }\n\n  get uniformLocations() {\n    return this.#uniformLocations;\n  }\n\n  get attributeLocations() {\n    return this.#attributeLocations;\n  }\n\n  /**\n   * 获取 `VertexShader` 对象\n   */\n  get vertexShader() {\n    return this.#vs;\n  }\n\n  /**\n   * 获取 `FragmentShader` 对象\n   */\n  get fragmentShader() {\n    return this.#fs;\n  }\n\n  /**\n   *\n   */\n  use() {\n    const programActive = this.rendererState.currentProgramId === this.id;\n    let textureUnit = -1;\n    if (!programActive) {\n      this.gl.useProgram(this.handle);\n      this.rendererState.currentProgramId = this.id;\n    }\n\n    this.#uniformLocations.forEach((location, activeUniform) => {\n      const name = activeUniform.name;\n\n      const uniform = this.uniforms[name];\n\n      if (!uniform) {\n        console.warn('Program:'.concat(this.id, ': Active uniform ').concat(name, ' has not been supplied'));\n        return;\n      }\n\n      if (uniform && (isUndef(uniform.value) || isNull(uniform.value))) {\n        console.warn('Program:'.concat(this.id, ': Uniform ').concat(name, ' is missing a value parameter'));\n        return;\n      }\n\n      let value = uniform?.value;\n\n      if (value instanceof Texture) {\n        textureUnit += 1;\n        uniform.value.update(textureUnit);\n        return setUniform(this.gl, activeUniform.type, location.location, textureUnit);\n      }\n\n      if (value instanceof Matrix || value instanceof Vector) {\n        value = uniform.value.toArray();\n      } else if (value instanceof Color) {\n        value = uniform.value.toArray();\n      }\n\n      if (value && value.length > 0 && value[0] instanceof Texture) {\n        const units: number[] = [];\n        for (let i = 0; i < uniform.value.length; i++) {\n          const v = value[i];\n          textureUnit += 1;\n          v.update(textureUnit);\n          units.push(textureUnit);\n        }\n        return setUniform(this.gl, activeUniform.type, location.location, units);\n      }\n\n      setUniform(this.gl, activeUniform.type, location.location, value);\n    });\n\n    this.applyState();\n  }\n\n  /**\n   * 设置 Program 的 render state\n   * @param states\n   * @param merge 是否使用合并模式，如果为 `false` 则直接替换\n   */\n  setStates(states: Partial<ProgramRenderState>, merge = true) {\n    if (!merge) {\n      this.#renderState = states;\n    } else {\n      this.#renderState = {\n        ...this.#renderState,\n        ...omit(states, ['blendFunc', 'blendEquation']),\n      } as ProgramRenderState;\n      if (states.blendFunc) {\n        this.#renderState.blendFunc = {\n          ...this.#renderState.blendFunc,\n          ...states.blendFunc,\n        };\n      }\n      if (states.blendEquation) {\n        this.#renderState.blendEquation = {\n          ...this.#renderState.blendEquation,\n          ...states.blendEquation,\n        };\n      }\n    }\n  }\n\n  applyState() {\n    this.rendererState.apply(this.#renderState);\n  }\n\n  /**\n   * 设置对应的 Uniform 值\n   * @param key\n   * @param value\n   */\n  setUniform(key, value) {\n    if (this.uniforms[key]) {\n      this.uniforms[key].value = value;\n    }\n  }\n\n  /**\n   * 使用此 Program\n   */\n  bind() {\n    this.gl.useProgram(this.handle);\n  }\n\n  /**\n   * 取消使用此 `Program`\n   */\n  unbind() {\n    this.gl.useProgram(null);\n  }\n\n  createHandle() {\n    return this.gl.createProgram();\n  }\n\n  deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  #assignUniforms(uniforms = {}) {\n    const numUniforms = this.gl.getProgramParameter(this.handle, this.gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < numUniforms; i++) {\n      const uniformInfo = this.gl.getActiveUniform(this.handle, i);\n      if (!uniformInfo) break;\n      const name = uniformInfo.name;\n      const split = name.match(/(\\w+)/g) as string[];\n      const uniformData: UniformData = {\n        location: this.gl.getUniformLocation(this.handle, name),\n        type: uniformInfo.type,\n        name: split[0],\n        isStruct: false,\n      };\n      if (split.length === 3) {\n        uniformData.isStructArray = true;\n        uniformData.structIndex = Number(split[1]);\n        uniformData.structProperty = split[2];\n      } else if (split.length === 2 && isNaN(Number(split[1]))){\n        uniformData.isStruct = true;\n        uniformData.structProperty = split[1];\n      }\n      const v = uniforms[name]?.value;\n      if (!isUndef(v) && !isNull(v)) {\n        uniformData.value = uniforms[name].value;\n      }\n      this.uniforms[name] = uniformData;\n      this.#uniformLocations.set(uniformInfo, uniformData);\n    }\n  }\n\n  #assignAttributes() {\n    const numAttribs = this.gl.getProgramParameter(this.handle, this.gl.ACTIVE_ATTRIBUTES);\n    const locations: string[] = [];\n    for (let i = 0; i < numAttribs; i++) {\n      const attribInfo = this.gl.getActiveAttrib(this.handle, i);\n      if (!attribInfo) break;\n      const location = this.gl.getAttribLocation(this.handle, attribInfo.name);\n      locations[location] = attribInfo.name;\n      this.#attributeLocations.set(attribInfo, location);\n    }\n    this.attributeOrder = locations.join('');\n  }\n\n  /**\n   * 销毁此`Program`\n   */\n  destroy() {\n    this.unbind();\n    this.deleteHandle();\n  }\n}\n","import { isPowerOfTwo } from '../utils/math';\nimport Texture, { emptyPixel, TextureState, TextureOptions } from './Texture';\nimport Renderer from './Renderer';\nimport { isNumber } from '../utils';\n\nexport interface Texture3DOptions extends TextureOptions {\n  /**\n   * 默认为 `gl.TEXTURE_3D`\n   */\n  target: GLenum;\n\n  /**\n   * 深度采样纹理时使用的行为, 仅在 `Texture3D` 时可用。\n   * 可能的值：`gl.REPEAT`，`gl.MIRRORED_REPEAT`，`gl.CLAMP_TO_EDGE`\n   */\n  wrapR: number;\n\n  /**\n   * [GLenum](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Types) 制定纹素的版本。正确的 内部格式 组合被列举在 [这个列表](https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE)。\n   */\n  format: number;\n\n  /**\n   * 用于指定纹理图像的内部格式\n   * 可能的值：`gl.RGBA`，`gl.RGB`，`gl.ALPHA` 等等\n   */\n  internalFormat: number;\n\n  /**\n   * 指定纹理数据的数据类型。\n   * 可能的值：`gl.UNSIGNED_BYTE`，`gl.FLOAT`，`gl.UNSIGNED_SHORT`，`gl.UNSIGNED_INT` 等等\n   * 可以查看[texImage3D](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL2RenderingContext/texImage3D) 来\n   * 获取更多信息\n   */\n  type: number;\n\n  /**\n   * 指定纹理深度，默认为`0`\n   */\n  depth: number;\n\n  /**\n   * 纹理数据\n   */\n  image: any;\n}\n\ninterface Texture3DState extends TextureState {\n  wrapR: GLenum;\n}\n\n/**\n * 纹理\n * 一般在 `webgl` 中会将纹理用于贴图，或者作为 `renderTarget`\n * 代码示例：\n * ```ts\n * const texture = new ve.Texture3D(renderer, {\n *   generateMipmaps: true,\n *   flipY: true,\n * });\n *\n * const image = new Image();\n *\n * image.onload = () => {\n *   texture.setData(image, image.width, image.height);\n * };\n *\n * image.src = './assets/posx.jpg';\n * ```\n */\nexport default class Texture3D extends Texture<Texture3DOptions> {\n  /**\n   * 设置纹理是否需要更新，一般我们会在纹理数据或者配置变更时将此配置项设置为 `true`\n   * 这样会在下一次渲染时应用对应的纹理数据和配置。\n   */\n  public needsUpdate = false;\n\n  /**\n   * 设置纹理单位\n   */\n  public textureUnit = 0;\n\n  /**\n   * 纹理深度\n   */\n  public depth: number;\n\n  #state: Texture3DState = {} as Texture3DState;\n\n  /**\n   * @param renderer Renderer 对象\n   * @param options 配置项\n   */\n  constructor(renderer: Renderer, options: Partial<Texture3DOptions> = {}) {\n    const gl = renderer.gl as WebGL2RenderingContext;\n    const defaultOptions = {\n      target: gl.TEXTURE_3D,\n      type: gl.UNSIGNED_BYTE,\n      format: gl.RGBA,\n      internalFormat: options.format || gl.RGBA,\n      wrapS: gl.CLAMP_TO_EDGE,\n      wrapT: gl.CLAMP_TO_EDGE,\n      wrapR: gl.CLAMP_TO_EDGE,\n      generateMipmaps: true,\n      minFilter: gl.LINEAR,\n      magFilter: gl.LINEAR,\n      premultiplyAlpha: false,\n      unpackAlignment: 4,\n      flipY: false,\n      level: 0,\n      depth: 0,\n    };\n\n    const opt = Object.assign({}, defaultOptions, options);\n    super(renderer, opt, false);\n\n    this.needsUpdate = true;\n    this.depth = this.options.depth as number;\n    this.#state.version = -1;\n    this.update();\n  }\n\n  /**\n   * 获取 `webgl` 实例\n   */\n  get gl(): WebGL2RenderingContext {\n    return this.renderer.gl as WebGL2RenderingContext;\n  }\n\n  /**\n   * 设置纹理数据\n   * @param image 纹理数据\n   * @param width 纹理宽度，默认为原始宽度\n   * @param height 纹理高度，默认为原始高度\n   * @param depth\n   */\n  setData(image, width = this.width, height = this.height, depth = this.depth) {\n    this.image = image;\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.needsUpdate = true;\n  }\n\n  /**\n   * 设置纹理配置（默认进行合并）\n   * @param options 配置项\n   */\n  setOptions(options: Partial<Texture3DOptions>) {\n    this.options = Object.assign(this.options, options);\n    this.width = this.options.width as number;\n    this.height = this.options.height as number;\n    this.depth = this.options.depth as number;\n    this.needsUpdate = true;\n  }\n\n  /**\n   * 更新纹理数据或者纹理相关配置\n   * @param units 纹理单位，默认为 0\n   */\n  update(units = 0) {\n    const needUpdate = !(this.image === this.#state.image && !this.needsUpdate);\n    const checked =\n      needUpdate ||\n      this.rendererState.textureUnits[units] !== this.id ||\n      this.rendererState.activeTextureUnit !== units;\n    if (checked) {\n      this.rendererState.setActiveTexture(units);\n      this.bind(units);\n    }\n    if (!needUpdate) return;\n    this.needsUpdate = false;\n    if (this.options.wrapS !== this.#state.wrapS) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.options.wrapS as GLenum);\n      this.#state.wrapS = this.options.wrapS as GLenum;\n    }\n    if (this.options.wrapT !== this.#state.wrapT) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.options.wrapT as GLenum);\n      this.#state.wrapT = this.options.wrapT as GLenum;\n    }\n    if (this.options.wrapR !== this.#state.wrapR) {\n      this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_R, this.options.wrapR as GLenum);\n      this.#state.wrapR = this.options.wrapR as GLenum;\n    }\n    if (this.options.minFilter !== this.#state.minFilter) {\n      this.gl.texParameteri(\n        this.target,\n        this.gl.TEXTURE_MIN_FILTER,\n        this.options.minFilter as GLenum,\n      );\n      this.#state.minFilter = this.options.minFilter as GLenum;\n    }\n    if (this.options.magFilter !== this.#state.magFilter) {\n      this.gl.texParameteri(\n        this.target,\n        this.gl.TEXTURE_MAG_FILTER,\n        this.options.magFilter as GLenum,\n      );\n      this.#state.magFilter = this.options.magFilter as GLenum;\n    }\n    if (this.options.flipY !== this.rendererState.flipY) {\n      this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.options.flipY as boolean);\n      this.rendererState.flipY = this.options.flipY as boolean;\n    }\n    if (this.options.premultiplyAlpha !== this.rendererState.premultiplyAlpha) {\n      this.gl.pixelStorei(\n        this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,\n        this.options.premultiplyAlpha as boolean,\n      );\n      this.rendererState.premultiplyAlpha = this.options.premultiplyAlpha as boolean;\n    }\n    if (this.options.unpackAlignment !== this.rendererState.unpackAlignment) {\n      this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.options.unpackAlignment as GLenum);\n      this.rendererState.unpackAlignment = this.options.unpackAlignment as number;\n    }\n\n    if (this.options.anisotropy && this.options.anisotropy !== this.rendererState.anisotropy) {\n      const extTextureFilterAnisotropic =\n        this.gl.getExtension('EXT_texture_filter_anisotropic') ||\n        this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic') ||\n        this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n      if (extTextureFilterAnisotropic) {\n        const max = this.gl.getParameter(\n          extTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT,\n        );\n        let v = this.options.anisotropy;\n        if (this.options.anisotropy > max) {\n          v = max;\n          console.warn(\n            `[Texture]: Texture.anisotropy option exceeded the maximum allowed value ${max} of the device`,\n          );\n        }\n        this.gl.texParameterf(\n          this.target,\n          extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,\n          v,\n        );\n      }\n      this.rendererState.anisotropy = this.options.anisotropy;\n    }\n\n    if (this.image) {\n      if (this.image.width) {\n        this.width = this.image.width;\n        this.height = this.image.height;\n      }\n\n      if (this.renderer.isWebGL2 && isNumber(this.options.offset)) {\n        this.gl.texImage3D(\n          this.target,\n          this.options.level as GLenum,\n          this.options.internalFormat as GLenum,\n          this.width,\n          this.height,\n          this.depth,\n          0,\n          this.options.format as GLenum,\n          this.options.type as GLenum,\n          this.image,\n          this.options.offset,\n        );\n      } else {\n        if (ArrayBuffer.isView(this.image)) {\n          this.gl.texImage3D(\n            this.target,\n            this.options.level as GLenum,\n            this.options.internalFormat as GLenum,\n            this.width,\n            this.height,\n            this.depth,\n            0,\n            this.options.format as GLenum,\n            this.options.type as GLenum,\n            this.image,\n          );\n        } else {\n          this.gl.texImage3D(\n            this.target,\n            this.options.level as GLenum,\n            this.options.internalFormat as GLenum,\n            this.width,\n            this.height,\n            this.depth,\n            0,\n            this.options.format as GLenum,\n            this.options.type as GLenum,\n            this.image,\n          );\n        }\n      }\n\n      if (this.options.generateMipmaps) {\n        if (\n          this.renderer.isWebGL2 ||\n          (isPowerOfTwo(this.image.width) && isPowerOfTwo(this.image.height))\n        ) {\n          this.gl.generateMipmap(this.target);\n        } else {\n          this.options.generateMipmaps = false;\n          this.options.wrapS = this.gl.CLAMP_TO_EDGE;\n          this.options.wrapT = this.options.wrapS;\n          this.options.minFilter = this.gl.LINEAR;\n        }\n      }\n    } else {\n      if (this.width > 0) {\n        this.gl.texImage3D(\n          this.target,\n          this.options.level as GLenum,\n          this.options.internalFormat as GLenum,\n          this.width,\n          this.height,\n          this.depth,\n          0,\n          this.options.format as GLenum,\n          this.options.type as GLenum,\n          null,\n        );\n      } else {\n        this.gl.texImage3D(\n          this.target,\n          0,\n          this.gl.RGBA,\n          1,\n          1,\n          this.depth,\n          0,\n          this.gl.RGBA,\n          this.gl.UNSIGNED_BYTE,\n          emptyPixel,\n        );\n      }\n    }\n    this.#state.image = this.image;\n    this.#state.version += 1;\n  }\n\n  /**\n   * 移除相关状态\n   */\n  removeStats() {\n    this.#state = {\n      version: -1,\n    } as Texture3DState;\n  }\n\n  /**\n   * 获取字符串数据\n   */\n  toString(): string {\n    return `Texture3D(${this.id},${this.width}x${this.height})`;\n  }\n}\n","import Object3D from '../objects/Object3D';\nimport ProjectionMatrix from '../math/ProjectionMatrix';\nimport Matrix4 from '../math/Matrix4';\nimport Vector3 from '../math/Vector3';\nimport type { WithUndef } from '../types';\n\n/**\n * 相机类型，默认有两种：`perspective` 透视相机和`orthographic`平面相机。\n */\nexport type CameraType = 'perspective' | 'orthographic';\n\nexport type Bounds = {\n  /**\n   * 像机视锥体左侧面\n   */\n  left: number;\n  /**\n   * 像机视锥体右侧面\n   */\n  right: number;\n  /**\n   * 像机视锥体上侧面\n   */\n  top: number;\n  /**\n   * 像机视锥体下侧面\n   */\n  bottom: number;\n};\n\nexport interface CameraOptions {\n  /**\n   * 像机的近端面，默认值是0.1\n   */\n  near: number;\n\n  /**\n   * 像机的远端面，默认值是 100\n   */\n  far: number;\n\n  /**\n   * 摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示，默认为 `45`\n   */\n  fov?: number;\n\n  /**\n   * 相机视锥体的纵横比\n   */\n  aspect?: number;\n\n  /**\n   * 像机视锥体配置\n   */\n  bounds?: Bounds;\n\n  /**\n   * 相机缩放倍数\n   */\n  zoom?: number;\n}\n\nconst tempMat4 = new Matrix4();\nconst tempVec3a = new Vector3();\nconst tempVec3b = new Vector3();\n\nconst ERR_CAMERA_METHOD_UNDEFINED = 'Camera subclass must define virtual methods';\n\n/**\n * 相机基类\n */\nexport default class Camera extends Object3D {\n  /**\n   * 相机类型（默认有两种相机：perspective和orthographic）\n   */\n  public cameraType: CameraType;\n\n  /**\n   * 投影矩阵\n   */\n  public projectionMatrix: ProjectionMatrix;\n\n  /**\n   * 视图矩阵\n   */\n  public viewMatrix: Matrix4;\n\n  /**\n   * pv矩阵，它是 `projectionMatrix`和`viewMatrix` 的乘积\n   */\n  public projectionViewMatrix: ProjectionMatrix;\n\n  /**\n   * 世界位置坐标\n   */\n  public worldPosition: Vector3;\n\n  /**\n   * 像机的近端面，默认值是0.1\n   */\n  #near: number;\n\n  /**\n   * 像机的远端面，默认值是 100\n   */\n  #far: number;\n\n  /**\n   * 摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示\n   */\n  #fov: number;\n\n  /**\n   * 相机视锥体的纵横比\n   */\n  #aspect: number;\n\n  /**\n   * 相机缩放倍数\n   */\n  #zoom: number;\n\n  /**\n   * 像机视锥体配置\n   */\n  #bounds: WithUndef<Bounds>;\n\n  public frustum: Matrix4;\n\n  constructor({\n    near = 0.1,\n    far = 100,\n    fov = 45,\n    aspect = 1,\n    bounds,\n    zoom = 1,\n  }: CameraOptions = {} as CameraOptions) {\n    super();\n\n    /**\n     * 相机类型\n     */\n    this.cameraType = 'perspective';\n    this.projectionMatrix = new ProjectionMatrix();\n    this.viewMatrix = new Matrix4();\n    this.projectionViewMatrix = new ProjectionMatrix();\n    this.worldPosition = new Vector3();\n    this.frustum = new Matrix4();\n    this.#near = near;\n    this.#far = far;\n    this.#fov = fov;\n    this.#aspect = aspect;\n    this.#bounds = bounds;\n    this.#zoom = zoom;\n    const {\n      left,\n      right,\n      top,\n      bottom,\n    } = bounds || {};\n    this.cameraType = left || right ? 'orthographic' : 'perspective';\n    if (this.cameraType === 'orthographic') {\n      this.orthographic(left, right, top, bottom, near, far, zoom);\n    } else {\n      this.perspective(fov, aspect, near, far);\n    }\n  }\n\n  /**\n   * 获取像机的近端面\n   */\n  get near() {\n    return this.#near;\n  }\n\n  /**\n   * 设置像机的近端面，并更新摄像机投影矩阵\n   * @param n near\n   */\n  set near(n: number) {\n    this.#near = n;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * 获取像机的远端面\n   */\n  get far() {\n    return this.#far;\n  }\n\n  /**\n   * 设置像机的远端面，并更新摄像机投影矩阵\n   * @param f\n   */\n  set far(f: number) {\n    this.#far = f;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * 获取摄像机视锥体垂直视野角度\n   */\n  get fov() {\n    return this.#fov;\n  }\n\n  /**\n   * 设置摄像机视锥体垂直视野角度，并更新摄像机投影矩阵\n   * @param f 角度值\n   */\n  set fov(f: number) {\n    this.#fov = f;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * 获取相机视锥体的纵横比\n   */\n  get aspect() {\n    return this.#aspect;\n  }\n\n  /**\n   * 设置相机视锥体的纵横比，并更新摄像机投影矩阵\n   * @param aspect\n   */\n  set aspect(aspect: number) {\n    this.#aspect = aspect;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * 获取相机的缩放倍数\n   */\n  get zoom() {\n    return this.#zoom;\n  }\n\n  /**\n   * 设置相机的缩放倍数，并更新摄像机投影矩阵\n   * @param zoom\n   */\n  set zoom(zoom: number) {\n    this.#zoom = zoom;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * 获取像机视锥体的范围\n   */\n  get bounds() {\n    return this.#bounds;\n  }\n\n  /**\n   * 设置相机像机视锥体的范围，并更新摄像机投影矩阵\n   * @param bounds\n   */\n  set bounds(bounds: WithUndef<Bounds>) {\n    this.#bounds = bounds;\n    this.updateProjectionMatrix();\n  }\n\n  /**\n   * 创建或者更新 `projectionMatrix` 透视相机矩阵\n   * @param fov\n   * @param aspect\n   * @param near\n   * @param far\n   */\n  perspective(fov = this.fov, aspect = this.aspect, near = this.near, far = this.far) {\n    this.#fov = fov;\n    this.#aspect = aspect;\n    this.#near = near;\n    this.#far = far;\n    this.projectionMatrix.fromPerspective(fov, aspect, near, far);\n    this.cameraType = 'perspective';\n    // this.projectionMatrix.frustum(this.frustum, this.bounds.left, this.bounds.right, this.bounds.top, this.bounds.bottom, this.near, this.far);\n  }\n\n  /**\n   * 创建或者更新 `projectionMatrix` 平面相机矩阵\n   * @param left\n   * @param right\n   * @param top\n   * @param bottom\n   * @param near\n   * @param far\n   * @param zoom\n   */\n  orthographic(left, right, top, bottom, near = this.near, far = this.far, zoom = 1) {\n    this.#bounds = {\n      left,\n      right,\n      top,\n      bottom,\n    };\n    this.near = near;\n    this.far = far;\n    this.projectionMatrix.orthographic(\n      left / zoom,\n      right / zoom,\n      top / zoom,\n      bottom / zoom,\n      near,\n      far,\n    );\n    this.cameraType = 'orthographic';\n    this.projectionMatrix.frustum(this.frustum, this.#bounds.left, this.#bounds.right, this.#bounds.top, this.#bounds.bottom, this.#near, this.#far);\n  }\n\n  /**\n   * 设置相机的朝向\n   * @param t 朝向位置，是一个三维向量\n   */\n  lookAt(t) {\n    super.lookAt(t, true);\n    return this;\n  }\n\n  /**\n   * 用于更新一个对象的世界矩阵。\n   * 每个可视对象都有一个叫做 `worldMatrix` 的矩阵，表示这个对象在世界坐标系中的位置和方向。\n   * 当您修改对象的位置、旋转或缩放时，对象的 `worldMatrix` 矩阵会发生变化。如果您希望将这些变化反映到场景中，就需要调用 `updateMatrixWorld` 函数。\n   */\n  updateMatrixWorld() {\n    super.updateMatrixWorld();\n    this.viewMatrix.invert(this.worldMatrix);\n    this.worldMatrix.getTranslation(this.worldPosition);\n    this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n    return this;\n  }\n\n  /**\n   * 判断 mesh 是否在相机视椎体内\n   * @param node\n   * @param worldMatrix\n   */\n  frustumIntersectsMesh(node, worldMatrix = node.worldMatrix) {\n    if (!node.geometry.attributes.position) return true;\n\n    if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n\n    if (!node.geometry.bounds) return true;\n\n    const center = tempVec3a;\n    center.copy(node.geometry.bounds.center);\n    center.applyMatrix4(worldMatrix);\n\n    const radius = node.geometry.bounds.radius * worldMatrix.getMaxScaleOnAxis();\n\n    return this.frustumIntersectsSphere(center, radius);\n  }\n\n  /**\n   * @private\n   * @param center\n   * @param radius\n   */\n  frustumIntersectsSphere(center, radius) {\n    const normal = tempVec3b;\n\n    for (let i = 0; i < 6; i++) {\n      const plane = this.frustum[i];\n      const distance = normal.copy(plane).dot(center) + plane.constant;\n      if (distance < -radius) return false;\n    }\n    return true;\n  }\n\n  /**\n   * 转换到世界坐标\n   * @param v\n   */\n  project(v) {\n    v.applyMatrix4(this.viewMatrix);\n    v.applyMatrix4(this.projectionMatrix);\n    return this;\n  }\n\n  unproject(v) {\n    v.applyMatrix4(tempMat4.invert(this.projectionMatrix));\n    v.applyMatrix4(this.worldMatrix);\n    return this;\n  }\n\n  /**\n   * 更新摄像机投影矩阵，必须由子类实现\n   */\n  updateProjectionMatrix() {\n    throw new Error(ERR_CAMERA_METHOD_UNDEFINED);\n  }\n}\n","import Camera from './Camera';\n\n/**\n * 透视相机\n *\n * 代码示例：\n * ```ts\n * const camera = new PerspectiveCamera(45, width / height, 1, 1000)\n * scene.add(camera);\n * ```\n */\nexport default class PerspectiveCamera extends Camera {\n  constructor(fov, aspect, near, far) {\n    super({\n      fov,\n      aspect,\n      near,\n      far,\n    });\n  }\n\n  /**\n   * 更新投影矩阵\n   */\n  updateProjectionMatrix() {\n    this.projectionMatrix.fromPerspective(this.fov, this.aspect, this.near, this.far);\n  }\n}\n","import Camera from './Camera';\nimport type { Bounds } from './Camera';\n\n/**\n * 正交相机（在这种投影模式下，无论物体距离相机距离远或者近，在最终渲染的图片中物体的大小都保持不变）\n *\n * 代码示例：\n * ```ts\n * const camera = new OrthographicCamera(width / - 2, width / 2, height / 2, height / - 2, 1, 1000);\n * scene.add(camera);\n * ```\n */\nexport default class OrthographicCamera extends Camera {\n  constructor(left, right, top, bottom, near, far, zoom = 1) {\n    super({\n      bounds: {\n        left,\n        right,\n        top,\n        bottom,\n      },\n      near,\n      far,\n      zoom,\n    });\n  }\n\n  /**\n   * 更新投影矩阵\n   */\n  updateProjectionMatrix() {\n    const {\n      left,\n      right,\n      top,\n      bottom,\n    } = this.bounds as Bounds;\n    const { zoom } = this;\n    this.projectionMatrix.orthographic(\n      left / zoom,\n      right / zoom,\n      top / zoom,\n      bottom / zoom,\n      this.near,\n      this.far,\n    );\n  }\n}\n"],"names":["normalize","tempArray","length","multiply","dot","equals","set","add","subtract","divide","scale","distance","squaredDistance","angle","cross","negate","inverse","lerp","transformMat3","transformMat4","scaleAndAdd","transformQuat","invert","copy","identity","transpose","adjoint","determinant","translate","rotate","fromTranslation","fromRotation","fromScaling","fromQuat","BlendType"],"mappings":";;;;;;;;;AAEO,SAAS,YAAY,MAAQ,EAAA,OAAA,GAAoB,EAAI,EAAA,QAAA,GAAW,EAAI,EAAA;AACzE,EAAA,OAAO,MAAO,CAAA,OAAA,CAAQ,UAAY,EAAA,OAAA,CAAQ,IAAK,CAAA,IAAI,CAAC,CAAA,CAAE,OAAQ,CAAA,WAAA,EAAa,QAAS,CAAA,IAAA,CAAK,IAAI,CAAC,CAAA,CAAA;AAChG,CAAA;AAEO,SAAS,YAAa,CAAA,MAAA,EAAQ,OAAU,GAAA,EAAI,EAAA;AACjD,EAAA,OAAO,MAAO,CAAA,IAAA,CAAK,OAAO,CAAA,CAAE,MAAO,CAAA,CAAC,GAAK,EAAA,GAAA,KAAS,OAAQ,CAAA,GAAA,CAAA,GAAO,CAAW,QAAA,EAAA,GAAA,CAAA,CAAA,EAAO,OAAQ,CAAA,GAAA,CAAA,CAAA;AAAA,EAAS,GAAA,CAAA,CAAA,GAAQ,KAAM,MAAM,CAAA,CAAA;AAC1H,CAAA;AAGgB,SAAA,aAAA,CAAc,MAAgB,EAAA,WAAA,GAAsB,SAAmB,EAAA;AACrF,EAAA,MAAM,kBAAqB,GAAA,6CAAA,CAAA;AAC3B,EAAM,MAAA,KAAA,GAAQ,MAAO,CAAA,KAAA,CAAM,kBAAkB,CAAA,CAAA;AAC7C,EAAO,OAAA,KAAA,GAAQ,MAAM,CAAK,CAAA,GAAA,WAAA,CAAA;AAC5B,CAAA;AASO,SAAS,iBAAkB,CAAA,QAAA,EAAoB,OAAmB,EAAA,UAAA,EAAoB,IAAkC,EAAA;AAC7H,EAAM,MAAA,KAAA,uBAAY,GAAI,EAAA,CAAA;AACtB,EAAA,IAAI,IAAM,EAAA;AACR,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,YAAY,CAAI,GAAA,CAAA,EAAG,KAAK,CAAG,EAAA;AAC7C,MAAA,MAAM,IAAI,IAAK,CAAA,CAAA,CAAA,CAAA;AACf,MAAM,MAAA,CAAA,GAAI,KAAK,CAAI,GAAA,CAAA,CAAA,CAAA;AACnB,MAAM,MAAA,CAAA,GAAI,KAAK,CAAI,GAAA,CAAA,CAAA,CAAA;AAEnB,MAAA,MAAM,QAAQ,CAAC,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAE/B,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,MAAA,EAAQ,KAAK,CAAG,EAAA;AACxC,QAAI,IAAA,YAAA,CAAa,KAAM,CAAA,CAAA,CAAA,GAAK,CAAG,EAAA,KAAA,CAAM,IAAI,CAAK,CAAA,GAAA,CAAA,EAAG,QAAU,EAAA,KAAK,CAAG,EAAA;AACjE,UAAA,OAAA,CAAQ,IAAK,CAAA,KAAA,CAAM,CAAI,CAAA,EAAA,KAAA,CAAM,IAAI,CAAE,CAAA,CAAA,CAAA;AAAA,SACrC;AAAA,OACF;AAAA,KACF;AAAA,GACK,MAAA;AACL,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,YAAY,CAAI,GAAA,CAAA,EAAG,KAAK,CAAG,EAAA;AAC7C,MAAA,MAAM,CAAI,GAAA,CAAA,CAAA;AACV,MAAA,MAAM,IAAI,CAAI,GAAA,CAAA,CAAA;AACd,MAAA,MAAM,IAAI,CAAI,GAAA,CAAA,CAAA;AAEd,MAAA,MAAM,QAAQ,CAAC,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAE/B,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,MAAA,EAAQ,KAAK,CAAG,EAAA;AACxC,QAAI,IAAA,YAAA,CAAa,KAAM,CAAA,CAAA,CAAA,GAAK,CAAG,EAAA,KAAA,CAAM,IAAI,CAAK,CAAA,GAAA,CAAA,EAAG,QAAU,EAAA,KAAK,CAAG,EAAA;AACjE,UAAA,OAAA,CAAQ,IAAK,CAAA,KAAA,CAAM,CAAI,CAAA,EAAA,KAAA,CAAM,IAAI,CAAE,CAAA,CAAA,CAAA;AAAA,SACrC;AAAA,OACF;AAAA,KACF;AAAA,GACF;AAEA,EAAO,OAAA,OAAA,CAAA;AACT,CAAA;AASO,SAAS,YAAa,CAAA,KAAA,EAAO,GAAK,EAAA,QAAA,EAAU,KAAO,EAAA;AACxD,EAAA,MAAM,QAAQ,CAAG,EAAA,QAAA,CAAS,KAAU,CAAA,CAAA,CAAA,EAAA,QAAA,CAAS,QAAQ,CAAM,CAAA,CAAA,CAAA,EAAA,QAAA,CAAS,KAAQ,GAAA,CAAA,CAAA,CAAA,CAAA,EAAM,SAAS,GAAQ,CAAA,CAAA,CAAA,EAAA,QAAA,CAAS,GAAM,GAAA,CAAA,CAAA,CAAA,CAAA,EAAM,SAAS,GAAM,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACvI,EAAA,MAAM,QAAQ,CAAG,EAAA,QAAA,CAAS,GAAQ,CAAA,CAAA,CAAA,EAAA,QAAA,CAAS,MAAM,CAAM,CAAA,CAAA,CAAA,EAAA,QAAA,CAAS,GAAM,GAAA,CAAA,CAAA,CAAA,CAAA,EAAM,SAAS,KAAU,CAAA,CAAA,CAAA,EAAA,QAAA,CAAS,KAAQ,GAAA,CAAA,CAAA,CAAA,CAAA,EAAM,SAAS,KAAQ,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACvI,EAAI,IAAA,KAAA,CAAM,IAAI,KAAK,CAAA,KAAM,QAAQ,KAAM,CAAA,GAAA,CAAI,KAAK,CAAA,KAAM,IAAM,EAAA;AAC1D,IAAO,OAAA,KAAA,CAAA;AAAA,GACF,MAAA;AACL,IAAA,KAAA,CAAM,IAAI,KAAK,CAAA,CAAA;AACf,IAAA,KAAA,CAAM,IAAI,KAAK,CAAA,CAAA;AACf,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AACF;;AC1Ea,MAAA,UAAA,GAAa,KAAK,EAAK,GAAA,GAAA,CAAA;AACvB,MAAA,UAAA,GAAa,MAAM,IAAK,CAAA,EAAA,CAAA;AAM9B,SAAS,SAAS,GAAa,EAAA;AACpC,EAAA,OAAO,GAAM,GAAA,UAAA,CAAA;AACf,CAAA;AAMO,SAAS,SAAS,CAAW,EAAA;AAClC,EAAA,OAAO,CAAI,GAAA,UAAA,CAAA;AACb,CAAA;AAQgB,SAAA,KAAA,CAAM,GAAa,EAAA,GAAA,EAAa,GAAa,EAAA;AAC3D,EAAA,OAAO,KAAK,GAAI,CAAA,IAAA,CAAK,IAAI,GAAK,EAAA,GAAG,GAAG,GAAG,CAAA,CAAA;AACzC,CAAA;AAMO,SAAS,aAAa,KAAO,EAAA;AAClC,EAAA,OAAQ,KAAK,GAAI,CAAA,KAAK,CAAI,GAAA,IAAA,CAAK,MAAO,CAAM,KAAA,CAAA,CAAA;AAC9C,CAAA;AAEA,IAAI,UAAgE,GAAA,YAAA,CAAA;AAQpD,SAAA,aAAA,CAAc,CAAY,EAAA,cAAA,GAAiB,IAAM,EAAA;AAC/D,EAAA,IAAI,CAAG,EAAA;AACL,IAAa,UAAA,GAAA,YAAA,CAAA;AAAA,GACR,MAAA;AACL,IAAa,UAAA,GAAA,YAAA,CAAA;AAAA,GACf;AAEA,EAAA,IAAI,cAAgB,EAAA;AAClB,IAAA,QAAA,CAAS,mBAAmB,UAA4B,CAAA,CAAA;AAAA,GAC1D;AACF,CAAA;AAKO,SAAS,wBAA2B,GAAA;AACzC,EAAO,OAAA,UAAA,CAAA;AACT;;AC5DO,SAAS,QAAQ,EAAkB,EAAA;AACxC,EAAA,IAAI,OAAO,qBAAA,KAA0B,WAAe,IAAA,EAAA,YAAc,qBAAuB,EAAA;AACvF,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AACA,EAAA,IAAI,OAAO,sBAAA,KAA2B,WAAe,IAAA,EAAA,YAAc,sBAAwB,EAAA;AACzF,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAEA,EAAA,IACE,IAAI,EACH,KAAA,EAAA,CAAG,cAAc,qBAAyB,IAAA,EAAA,CAAG,cAAc,sBAC5D,CAAA,EAAA;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAEA,EAAA,OAAO,QAAQ,EAAM,IAAA,MAAA,CAAO,QAAS,CAAA,EAAA,CAAG,QAAQ,CAAC,CAAA,CAAA;AACnD,CAAA;AAMO,SAAS,SAAS,EAAkB,EAAA;AACzC,EAAA,IAAI,OAAO,sBAAA,KAA2B,WAAe,IAAA,EAAA,YAAc,sBAAwB,EAAA;AACzF,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAEA,EAAA,IAAI,EAAI,EAAA,EAAA,IAAM,EAAG,CAAA,EAAA,YAAc,sBAAwB,EAAA;AACrD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAEA,EAAA,OAAO,OAAQ,CAAA,EAAA,IAAM,EAAG,CAAA,QAAA,KAAa,CAAC,CAAA,CAAA;AACxC,CAAA;AAgDO,SAAS,WACd,MACA,EAAA,SAAA,GAAgC,EAAC,EACjC,gBAAgB,KAChB,EAAA;AACA,EAAA,MAAM,KAAQ,GAAA,CAAC,QAAU,EAAA,OAAA,EAAS,oBAAoB,CAAA,CAAA;AACtD,EAAA,IAAI,CAAC,aAAe,EAAA;AAClB,IAAA,KAAA,CAAM,KAAM,EAAA,CAAA;AAAA,GACd;AACA,EAAA,IAAI,OAAwC,GAAA,IAAA,CAAA;AAE5C,EAAA,SAAS,uBAAuB,KAAY,EAAA;AAC1C,IAAQ,OAAA,CAAA,KAAA,CAAM,MAAM,aAAa,CAAA,CAAA;AAAA,GACnC;AAEA,EAAQ,MAAA,EAAA,gBAAA,GAAmB,2BAA6B,EAAA,sBAAA,EAAwB,KAAK,CAAA,CAAA;AACrF,EAAA,KAAA,IAAS,KAAK,CAAG,EAAA,EAAA,GAAK,KAAM,CAAA,MAAA,EAAQ,EAAE,EAAI,EAAA;AACxC,IAAI,IAAA;AACF,MAAA,OAAA,GAAU,MAAO,CAAA,UAAA,CAAW,KAAM,CAAA,EAAA,CAAA,EAAK,SAAS,CAAA,CAAA;AAAA,aACzC,CAAP,EAAA;AAAA,KAAW;AACb,IAAA,IAAI,OAAS,EAAA;AACX,MAAA,MAAA;AAAA,KACF;AAAA,GACF;AAEA,EAAQ,MAAA,EAAA,mBAAA,GAAsB,2BAA6B,EAAA,sBAAA,EAAwB,KAAK,CAAA,CAAA;AAExF,EAAO,OAAA,OAAA,CAAA;AACT;;ACxGO,MAAM,MAAM,MAAO,CAAA,WAAA,IAAe,OAAO,WAAc,GAAA,IAAA,GAAO,aAAa,GAAI,EAAA,CAAA;AAO/E,SAAS,OAAO,KAAoB,EAAA;AACzC,EAAO,OAAA,MAAA,CAAO,SAAU,CAAA,QAAA,CAAS,IAAK,CAAA,KAAK,EAAE,KAAM,CAAA,CAAA,EAAG,CAAE,CAAA,CAAA,CAAE,WAAY,EAAA,CAAA;AACxE,CAAA;AAOO,SAAS,SAAS,CAAqB,EAAA;AAC5C,EAAO,OAAA,MAAA,CAAO,CAAC,CAAM,KAAA,QAAA,CAAA;AACvB,CAAA;AAOO,SAAS,QAAQ,CAAwB,EAAA;AAC9C,EAAO,OAAA,MAAA,CAAO,CAAC,CAAM,KAAA,WAAA,CAAA;AACvB,CAAA;AAMO,SAAS,MAAM,MAAQ,EAAA;AAC5B,EAAA,OAAO,QAAS,CAAA,MAAM,CAAK,IAAA,MAAA,CAAO,SAAS,GAAG,CAAA,CAAA;AAChD,CAAA;AAOO,SAAS,SAAS,CAAqB,EAAA;AAC5C,EAAO,OAAA,MAAA,CAAO,CAAC,CAAM,KAAA,QAAA,CAAA;AACvB,CAAA;AAMO,SAAS,SAAS,GAAyB,EAAA;AAChD,EAAO,OAAA,MAAA,CAAO,GAAG,CAAM,KAAA,QAAA,CAAA;AACzB,CAAA;AAMO,SAAS,OAAO,KAAO,EAAA;AAC5B,EAAA,OAAO,KAAS,IAAA,IAAA,CAAA;AAClB,CAAA;AAMO,SAAS,SAAS,KAAO,EAAA;AAC9B,EAAA,MAAM,OAAO,OAAO,KAAA,CAAA;AACpB,EAAA,OAAO,KAAU,KAAA,IAAA,KAAS,IAAS,KAAA,QAAA,IAAY,IAAS,KAAA,UAAA,CAAA,CAAA;AAC1D,CAAA;AAEgB,SAAA,QAAA,CAAS,GAAG,KAAO,EAAA;AACjC,EAAI,IAAA,QAAA,CAAS,CAAC,CAAG,EAAA;AACf,IAAO,OAAA,CAAC,OAAO,CAAE,CAAA,KAAK,MAAM,MAAO,CAAA,KAAK,CAAK,IAAA,CAAA,CAAE,KAAU,KAAA,KAAA,CAAA,CAAA;AAAA,GACpD,MAAA;AACL,IAAA,OAAO,CAAC,MAAO,CAAA,CAAC,MAAM,MAAO,CAAA,KAAK,KAAK,CAAM,KAAA,KAAA,CAAA,CAAA;AAAA,GAC/C;AACF,CAAA;AAEA,MAAM,cAAsC,EAAC,CAAA;AAO7B,SAAA,GAAA,CAAI,KAAK,IAAc,EAAA;AACrC,EAAY,WAAA,CAAA,EAAA,CAAA,GAAM,YAAY,EAAO,CAAA,IAAA,CAAA,CAAA;AACrC,EAAA,MAAM,QAAQ,WAAY,CAAA,EAAA,CAAA,EAAA,CAAA;AAC1B,EAAA,OAAO,GAAG,EAAM,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AAClB,CAAA;AAOO,SAAS,IAA2B,CAAA,GAAA,EAAQ,IAAY,GAAA,EAAgB,EAAA;AAC7E,EAAA,OAAO,MAAO,CAAA,IAAA,CAAK,GAAU,CAAA,CAC1B,MAAO,CAAA,CAAC,GAAa,KAAA,IAAA,CAAK,OAAQ,CAAA,GAAG,CAAI,GAAA,CAAC,CAC1C,CAAA,MAAA;AAAA,IACC,CAAC,MAAA,EAAoB,GACnB,KAAA,MAAA,CAAO,OAAO,MAAQ,EAAA;AAAA,MACpB,CAAC,MAAM,GAAI,CAAA,GAAA,CAAA;AAAA,KACZ,CAAA;AAAA,IACH,EAAC;AAAA,GACH,CAAA;AACJ,CAAA;AAOO,SAAS,IAA2B,CAAA,GAAA,EAAQ,IAAY,GAAA,EAAgB,EAAA;AAC7E,EAAA,OAAO,MAAO,CAAA,IAAA,CAAK,GAAU,CAAA,CAC1B,MAAO,CAAA,CAAC,GAAa,KAAA,IAAA,CAAK,OAAQ,CAAA,GAAG,CAAI,GAAA,CAAA,CAAE,CAC3C,CAAA,MAAA;AAAA,IACC,CAAC,MAAA,EAAoB,GACnB,KAAA,MAAA,CAAO,OAAO,MAAQ,EAAA;AAAA,MACpB,CAAC,MAAM,GAAI,CAAA,GAAA,CAAA;AAAA,KACZ,CAAA;AAAA,IACH,EAAC;AAAA,GACH,CAAA;AACJ,CAAA;AAEA,MAAM,YAAmB,EAAC,CAAA;AAC1B,MAAM,cAAc,GAAO,GAAA,EAAA,CAAA;AAC3B,IAAI,IAAA,GAAO,YAAY,GAAI,EAAA,CAAA;AAE3B,SAAS,yBAA4B,GAAA;AACnC,EAAA,MAAM,UAAU,GAAI,EAAA,CAAA;AACpB,EAAA,MAAM,QAAQ,OAAU,GAAA,IAAA,CAAA;AACxB,EAAA,IAAI,SAAS,WAAa,EAAA;AAExB,IAAA,IAAA,GAAO,UAAW,KAAQ,GAAA,WAAA,CAAA;AAE1B,IAAM,MAAA,KAAA,GAAQ,UAAU,KAAM,EAAA,CAAA;AAC9B,IAAA,SAAA,CAAU,MAAS,GAAA,CAAA,CAAA;AACnB,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,QAAQ,CAAK,EAAA,EAAA;AACrC,MAAA,KAAA,CAAM,CAAM,CAAA,IAAA,KAAA,CAAM,CAAG,CAAA,CAAA,OAAA,EAAS,KAAK,CAAA,CAAA;AAAA,KACrC;AAAA,GACK,MAAA;AACL,IAAA,YAAA,CAAa,yBAAyB,CAAA,CAAA;AAAA,GACxC;AACF,CAAA;AAEA,SAAS,IAAI,IAAM,EAAA;AACjB,EAAA,SAAA,CAAU,KAAK,IAAI,CAAA,CAAA;AACnB,EAAI,IAAA,SAAA,CAAU,WAAW,CAAG,EAAA;AAC1B,IAAA,YAAA,CAAa,yBAAyB,CAAA,CAAA;AAAA,GACxC;AACA,EAAA,OAAO,UAAU,MAAS,GAAA,CAAA,CAAA;AAC5B,CAAA;AAEA,SAAS,IAAI,EAAS,EAAA;AACpB,EAAA,SAAA,CAAU,EAAM,CAAA,GAAA,KAAA,CAAA,CAAA;AAClB,CAAA;AAEO,SAAS,sBAAsB,EAAI,EAAA;AACxC,EAAA,IAAI,OAAO,MAAA,KAAW,WAAe,IAAA,MAAA,CAAO,qBAAuB,EAAA;AACjE,IAAO,OAAA,MAAA,CAAO,sBAAsB,EAAE,CAAA,CAAA;AAAA,GACxC;AAEA,EAAA,OAAO,IAAI,EAAE,CAAA,CAAA;AACf,CAAA;AAEO,SAAS,qBAAqB,EAAI,EAAA;AACvC,EAAA,IAAI,OAAO,MAAA,KAAW,WAAe,IAAA,MAAA,CAAO,oBAAsB,EAAA;AAChE,IAAO,OAAA,MAAA,CAAO,qBAAqB,EAAE,CAAA,CAAA;AAAA,GACvC;AAEA,EAAA,OAAO,IAAI,EAAE,CAAA,CAAA;AACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5KA,MAAqB,KAAM,CAAA;AAAA,EAKzB,SAAY,GAAA,CAAA,CAAA;AAAA,EAMZ,YAAe,GAAA,CAAA,CAAA;AAAA,EAMf,MAAS,GAAA,KAAA,CAAA;AAAA,EAEF,OAAA,CAAA;AAAA,EAMP,WAAA,CAAa,UAAU,IAAM,EAAA;AAC3B,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AAAA,GACjB;AAAA,EAKA,KAAS,GAAA;AACP,IAAI,IAAA,CAAC,KAAK,MAAQ,EAAA;AAChB,MAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AACX,MAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AAAA,KAChB;AAAA,GACF;AAAA,EAKA,IAAQ,GAAA;AACN,IAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AACpB,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AACd,IAAA,IAAA,CAAK,OAAU,GAAA,KAAA,CAAA;AAAA,GACjB;AAAA,EAKA,KAAS,GAAA;AACP,IAAA,IAAA,CAAK,YAAY,GAAI,EAAA,CAAA;AACrB,IAAA,IAAA,CAAK,YAAe,GAAA,CAAA,CAAA;AAAA,GACtB;AAAA,EAKA,cAAkB,GAAA;AAChB,IAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AACd,IAAA,OAAO,IAAK,CAAA,YAAA,CAAA;AAAA,GACd;AAAA,EAKA,QAAY,GAAA;AACV,IAAA,IAAI,SAAY,GAAA,CAAA,CAAA;AAChB,IAAA,IAAI,IAAK,CAAA,OAAA,IAAW,CAAC,IAAA,CAAK,MAAQ,EAAA;AAChC,MAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AACX,MAAO,OAAA,CAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,KAAK,MAAQ,EAAA;AACf,MAAA,MAAM,OAAO,GAAI,EAAA,CAAA;AACjB,MAAa,SAAA,GAAA,CAAA,IAAA,GAAO,KAAK,SAAa,IAAA,GAAA,CAAA;AACtC,MAAA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;AACjB,MAAK,IAAA,CAAA,YAAA,GAAe,KAAK,YAAe,GAAA,SAAA,CAAA;AAAA,KAC1C;AACA,IAAO,OAAA,SAAA,CAAA;AAAA,GACT;AACF;;AC7EA,MAAM,cAAsC,GAAA;AAAA,EAC1C,SAAW,EAAA,IAAA;AACb,CAAA,CAAA;AAQA,MAAqB,GAAI,CAAA;AAAA,EAChB,OAAA,CAAA;AAAA,EACP,IAAA,CAAA;AAAA,EACA,UAAA,CAAA;AAAA,EACA,UAAA,CAAA;AAAA,EAEA,MAAA,CAAA;AAAA,EAEA,SAAA,CAAA;AAAA,EAEA,WAAY,CAAA,EAAA,EAAI,OAA+B,GAAA,EAAI,EAAA;AACjD,IAAA,IAAA,CAAK,OAAU,GAAA;AAAA,MACb,GAAG,OAAA;AAAA,MACH,GAAG,cAAA;AAAA,KACL,CAAA;AACA,IAAK,IAAA,CAAA,MAAA,GAAS,IAAI,KAAM,EAAA,CAAA;AAExB,IAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AAEX,IAAA,IAAA,CAAK,kBAAqB,GAAA,IAAA,CAAK,kBAAmB,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAE3D,IAAA,IAAA,CAAK,YAAY,MAAM;AACrB,MAAM,MAAA,IAAA,GAAO,IAAK,CAAA,MAAA,CAAO,cAAe,EAAA,CAAA;AACxC,MAAA,EAAA,IAAM,GAAG,IAAI,CAAA,CAAA;AAAA,KACf,CAAA;AACA,IAAI,IAAA,IAAA,CAAK,QAAQ,SAAW,EAAA;AAC1B,MAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AAAA,KACb;AAAA,GACF;AAAA,EAKA,IAAW,OAAU,GAAA;AACnB,IAAA,OAAO,IAAK,CAAA,UAAA,CAAA;AAAA,GACd;AAAA,EAKA,IAAW,SAAY,GAAA;AACrB,IAAA,OAAO,IAAK,CAAA,UAAA,CAAA;AAAA,GACd;AAAA,EAKO,KAAQ,GAAA;AACb,IAAA,IAAA,CAAK,UAAa,GAAA,KAAA,CAAA;AAClB,IAAA,IAAA,CAAK,UAAa,GAAA,IAAA,CAAA;AAClB,IAAI,IAAA,IAAA,CAAK,SAAS,KAAW,CAAA,EAAA;AAC3B,MAAA,oBAAA,CAAqB,KAAK,IAAI,CAAA,CAAA;AAAA,KAChC;AAAA,GACF;AAAA,EAKA,IAAW,WAAc,GAAA;AACvB,IAAO,OAAA,IAAA,CAAK,OAAO,cAAe,EAAA,CAAA;AAAA,GACpC;AAAA,EAKO,KAAQ,GAAA;AAEb,IAAA,IAAI,IAAK,CAAA,UAAA;AAAY,MAAA,OAAA;AAErB,IAAA,IAAA,CAAK,UAAa,GAAA,IAAA,CAAA;AAClB,IAAA,IAAA,CAAK,OAAO,KAAM,EAAA,CAAA;AAClB,IAAA,IAAA,CAAK,IAAK,EAAA,CAAA;AAEV,IAAA,IAAI,OAAO,MAAA,KAAW,WAAe,IAAA,MAAA,CAAO,QAAU,EAAA;AACpD,MAAA,MAAA,CAAO,QAAS,CAAA,gBAAA,CAAiB,kBAAoB,EAAA,IAAA,CAAK,oBAAoB,KAAK,CAAA,CAAA;AAAA,KACrF;AAAA,GACF;AAAA,EAKO,IAAO,GAAA;AACZ,IAAA,IAAA,CAAK,OAAO,IAAK,EAAA,CAAA;AACjB,IAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AACX,IAAA,IAAI,OAAO,MAAA,KAAW,WAAe,IAAA,MAAA,CAAO,QAAU,EAAA;AACpD,MAAA,MAAA,CAAO,QAAS,CAAA,mBAAA,CAAoB,kBAAoB,EAAA,IAAA,CAAK,oBAAoB,KAAK,CAAA,CAAA;AAAA,KACxF;AAAA,GACF;AAAA,EAEO,IAAO,GAAA;AACZ,IAAA,IAAI,CAAC,IAAA,CAAK,UAAc,IAAA,CAAC,IAAK,CAAA,UAAA;AAAY,MAAA,OAAA;AAE1C,IAAK,IAAA,CAAA,IAAA,GAAO,sBAAsB,MAAM;AACtC,MAAA,IAAA,CAAK,IAAK,EAAA,CAAA;AAAA,KACX,CAAA,CAAA;AACD,IAAA,IAAA,CAAK,SAAU,EAAA,CAAA;AAAA,GACjB;AAAA,EAMQ,kBAAqB,GAAA;AAC3B,IAAA,IAAI,OAAO,MAAA,KAAW,WAAe,IAAA,MAAA,CAAO,QAAU,EAAA;AACpD,MAAK,IAAA,CAAA,UAAA,GAAa,CAAC,MAAA,CAAO,QAAS,CAAA,MAAA,CAAA;AAAA,KACrC;AAEA,IAAA,IAAI,KAAK,UAAY,EAAA;AACnB,MAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AACX,MAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AAAA,KACb;AAAA,GACF;AACF;;AC5HA,MAAM,KAAM,CAAA;AAAA,EACM,IAAA,CAAA;AAAA,EAEhB,WAAY,CAAA,IAAA,EAAc,MAAS,GAAA,EAAI,EAAA;AACrC,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAC,CAAA,MAAA,CAAO,oBAAoB,MAAM,CAAA,IAAK,EAAI,EAAA,OAAA,CAAQ,CAAC,GAAQ,KAAA;AAC1D,MAAA,IAAA,CAAK,OAAO,MAAO,CAAA,GAAA,CAAA,CAAA;AAAA,KACpB,CAAA,CAAA;AAAA,GACH;AACF,CAAA;AAwBA,MAAqB,YAA4D,CAAA;AAAA,EACvE,GAAA,CAAA;AAAA,EACS,kBAAA,CAAA;AAAA,EAEjB,WAAA,CAAY,EAAE,eAAkB,GAAA,CAAC,IAAI,CAAE,EAAA,GAAc,EAAI,EAAA;AACvD,IAAK,IAAA,CAAA,GAAA,uBAAU,GAAI,EAAA,CAAA;AACnB,IAAA,IAAA,CAAK,kBAAqB,GAAA,eAAA,CAAA;AAAA,GAC5B;AAAA,EAOQ,kBAAkB,IAAM,EAAA;AAC9B,IAAA,IAAI,KAAK,IAAK,CAAA,kBAAA,CAAA;AACd,IAAA,IAAI,CAAC,KAAA,CAAM,OAAQ,CAAA,IAAA,CAAK,kBAAkB,CAAG,EAAA;AAC3C,MAAK,EAAA,GAAA,CAAC,KAAK,kBAAkB,CAAA,CAAA;AAAA,KAC/B;AACA,IAAA,IAAI,OAAU,GAAA,IAAA,CAAA;AACd,IAAG,EAAA,CAAA,OAAA,CAAQ,CAAC,CAAM,KAAA;AAChB,MAAA,IAAI,SAAS,CAAC,CAAA,IAAK,CAAC,CAAE,CAAA,IAAA,CAAK,IAAI,CAAG,EAAA;AAChC,QAAU,OAAA,GAAA,KAAA,CAAA;AAAA,OACZ;AAAA,KACD,CAAA,CAAA;AAED,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAM,MAAA,IAAI,MAAM,CAAwB,qBAAA,EAAA,IAAA,CAAA;AAAA,6BAAA,EAAwC,EAAK,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,KACvF;AAAA,GACF;AAAA,EAQA,EAAA,CAAG,IAAM,EAAA,OAAA,EAAS,OAAe,EAAA;AAC/B,IAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA,CAAA;AAC3B,IAAI,IAAA,QAAA,CAAS,IAAI,CAAG,EAAA;AAClB,MAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;AAC5B,MAAI,IAAA,KAAA,CAAM,SAAS,CAAG,EAAA;AACpB,QAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,CAAM,KAAA;AACnB,UAAK,IAAA,CAAA,EAAA,CAAG,CAAG,EAAA,OAAA,EAAS,OAAO,CAAA,CAAA;AAAA,SAC5B,CAAA,CAAA;AACD,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,KACF;AACA,IAAA,IAAI,CAAC,IAAA,CAAK,GAAI,CAAA,IAAI,CAAG,EAAA;AACnB,MAAA,IAAA,CAAK,GAAI,CAAA,GAAA,CAAI,IAAM,EAAA,EAAE,CAAA,CAAA;AAAA,KACvB;AACA,IAAA,IAAA,CAAK,GAAI,CAAA,GAAA,CAAI,IAAI,CAAA,CAAE,KAAK,OAAO,CAAA,CAAA;AAC/B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAQA,IAAA,CAAK,IAAM,EAAA,OAAA,EAAS,OAAe,EAAA;AACjC,IAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA,CAAA;AAC3B,IAAI,IAAA,QAAA,CAAS,IAAI,CAAG,EAAA;AAClB,MAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;AAC5B,MAAI,IAAA,KAAA,CAAM,SAAS,CAAG,EAAA;AACpB,QAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,CAAM,KAAA;AACnB,UAAK,IAAA,CAAA,IAAA,CAAK,CAAG,EAAA,OAAA,EAAS,OAAO,CAAA,CAAA;AAAA,SAC9B,CAAA,CAAA;AACD,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,KACF;AACA,IAAM,MAAA,WAAA,GAAc,IAAI,IAAS,KAAA;AAC/B,MAAK,IAAA,CAAA,GAAA,CAAI,MAAM,WAAW,CAAA,CAAA;AAC1B,MAAA,OAAA,CAAQ,IAAK,CAAA,OAAA,IAAW,IAAM,EAAA,GAAG,IAAI,CAAA,CAAA;AAAA,KACvC,CAAA;AACA,IAAA,OAAO,IAAK,CAAA,EAAA,CAAG,IAAM,EAAA,WAAA,EAAa,OAAO,CAAA,CAAA;AAAA,GAC3C;AAAA,EAQA,GAAA,CAAI,IAAM,EAAA,OAAA,EAAe,OAAe,EAAA;AACtC,IAAA,IAAA,CAAK,kBAAkB,IAAI,CAAA,CAAA;AAC3B,IAAI,IAAA,QAAA,CAAS,IAAI,CAAG,EAAA;AAClB,MAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;AAC5B,MAAI,IAAA,KAAA,CAAM,SAAS,CAAG,EAAA;AACpB,QAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,CAAM,KAAA;AACnB,UAAK,IAAA,CAAA,GAAA,CAAI,CAAG,EAAA,OAAA,EAAS,OAAO,CAAA,CAAA;AAAA,SAC7B,CAAA,CAAA;AACD,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,KACF;AACA,IAAM,MAAA,QAAA,GAAW,IAAK,CAAA,GAAA,CAAI,IAAI,CAAA,CAAA;AAC9B,IAAA,IAAI,QAAU,EAAA;AACZ,MAAA,IAAI,OAAS,EAAA;AACX,QAAA,MAAM,MAAM,QAAS,CAAA,MAAA,CAAO,CAAC,CAAA,KAAM,MAAM,OAAO,CAAA,CAAA;AAChD,QAAK,IAAA,CAAA,GAAA,CAAI,GAAI,CAAA,IAAA,EAAM,GAAG,CAAA,CAAA;AAAA,OACjB,MAAA;AACL,QAAK,IAAA,CAAA,GAAA,CAAI,OAAO,IAAI,CAAA,CAAA;AAAA,OACtB;AAAA,KACF;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,IAAA,CAAK,MAAM,IAAY,EAAA;AACrB,IAAA,MAAM,cAAc,IAAgB,YAAA,KAAA,GAAQ,OAAO,IAAI,KAAA,CAAM,MAAM,IAAI,CAAA,CAAA;AACvE,IAAK,IAAA,CAAA,iBAAA,CAAkB,YAAY,IAAI,CAAA,CAAA;AACvC,IAAA,MAAM,GAAM,GAAA,IAAA,CAAK,GAAI,CAAA,WAAA,CAAY,IAAI,CAAA,CAAA;AACrC,IAAA,IAAI,GAAK,EAAA;AACP,MAAO,OAAA,GAAA,CAAI,IAAI,CAAC,EAAA,KAAO,GAAG,IAAK,CAAA,IAAA,EAAM,WAAW,CAAC,CAAA,CAAA;AAAA,KACnD;AAAA,GACF;AAAA,EAEA,IAAI,IAAM,EAAA;AACR,IAAO,OAAA,IAAA,CAAK,GAAI,CAAA,GAAA,CAAI,IAAI,CAAA,CAAA;AAAA,GAC1B;AAAA,EAKA,KAAQ,GAAA;AACN,IAAA,IAAA,CAAK,IAAI,KAAM,EAAA,CAAA;AACf,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AACF;;AC/KA,MAAqB,MAAO,CAAA;AAAA,EAK1B,QAAW,GAAA,KAAK,wBAAyB,EAAA,EAAG,CAAC,CAAA,CAAA;AAAA,EAO7C,SAAA,CAAU,KAAO,EAAA,MAAA,GAAS,CAAG,EAAA;AAC3B,IAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,OAAO,CAAI,GAAA,IAAA,CAAK,QAAS,CAAA,MAAA,EAAQ,CAAK,EAAA,EAAA;AACpC,MAAK,IAAA,CAAA,QAAA,CAAS,CAAK,CAAA,GAAA,KAAA,CAAM,MAAS,GAAA,CAAA,CAAA,CAAA;AAAA,KACpC;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,OAAQ,CAAA,GAAA,GAA8C,EAAC,EAAG,SAAS,CAAG,EAAA;AACpE,IAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,OAAO,CAAI,GAAA,IAAA,CAAK,QAAS,CAAA,MAAA,EAAQ,CAAK,EAAA,EAAA;AACpC,MAAI,GAAA,CAAA,MAAA,GAAS,CAAK,CAAA,GAAA,IAAA,CAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,KAClC;AACA,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AACF;;ACIA,MAAqB,gBAAgB,MAAO,CAAA;AAAA,EAC1C,QAAW,GAAA,KAAK,wBAAyB,EAAA,EAAG,CAAC,CAAA,CAAA;AAAA,EAM7C,WAAY,CAAA,CAAA,GAAI,CAAG,EAAA,CAAA,GAAI,CAAG,EAAA;AACxB,IAAM,KAAA,EAAA,CAAA;AACN,IAAA,MAAM,IAAI,IAAK,CAAA,QAAA,CAAA;AACf,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACT;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAG,EAAA;AACP,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAG,EAAA;AACP,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACrB;AAAA,EAMA,WAAW,MAAQ,EAAA;AACjB,IAAM,MAAA,EAAE,CAAG,EAAA,CAAA,EAAM,GAAA,MAAA,CAAA;AACjB,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,QAAW,GAAA;AACT,IAAO,OAAA;AAAA,MACL,GAAG,IAAK,CAAA,CAAA;AAAA,MACR,GAAG,IAAK,CAAA,CAAA;AAAA,KACV,CAAA;AAAA,GACF;AAAA,EAOA,GAAA,CAAI,GAAG,CAAG,EAAA;AACR,IAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AACT,IAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AACT,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,UAAU,CAAG,EAAA;AACX,IAAO,OAAA,IAAA,CAAK,GAAI,CAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAAA,GACtB;AAAA,EAMA,IAAI,GAAc,EAAA;AAChB,IAAA,GAAA,CAAI,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AAC9C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,UAAU,CAAW,EAAA;AACnB,IAAA,GAAA,CAAI,KAAK,QAAU,EAAA,IAAA,CAAK,UAAU,CAAC,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AACxC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,SAAS,GAAc,EAAA;AACrB,IAAA,QAAA,CAAS,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AACnD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,eAAe,CAAW,EAAA;AACxB,IAAA,QAAA,CAAS,KAAK,QAAU,EAAA,IAAA,CAAK,UAAU,CAAC,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAC7C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,SAAS,GAAc,EAAA;AACrB,IAAA,QAAA,CAAS,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AACnD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,eAAe,CAAW,EAAA;AACxB,IAAA,QAAA,CAAS,KAAK,QAAU,EAAA,IAAA,CAAK,UAAU,CAAC,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAC7C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,OAAO,GAAc,EAAA;AACnB,IAAA,MAAA,CAAO,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AACjD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,aAAa,CAAW,EAAA;AACtB,IAAA,MAAA,CAAO,KAAK,QAAU,EAAA,IAAA,CAAK,UAAU,CAAC,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAC3C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,MAAM,CAAW,EAAA;AACf,IAAA,KAAA,CAAM,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,CAAC,CAAA,CAAA;AACrC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,WAAW,GAAc,EAAA;AACvB,IAAA,OAAO,QAAS,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAAA,GAC7C;AAAA,EAKA,MAAS,GAAA;AACP,IAAO,OAAA,MAAA,CAAO,KAAK,QAAQ,CAAA,CAAA;AAAA,GAC7B;AAAA,EAMA,kBAAkB,CAAY,EAAA;AAC5B,IAAA,OAAO,eAAgB,CAAA,CAAA,CAAE,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAAA,GAClD;AAAA,EAKA,KAAQ,GAAA;AACN,IAAA,OAAO,MAAM,IAAK,CAAA,QAAA,EAAU,CAAC,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAAA,GACpC;AAAA,EAKA,QAAQ,CAAY,EAAA;AAClB,IAAA,OAAO,KAAM,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAAA,GACxC;AAAA,EAMA,IAAI,GAAc,EAAA;AAChB,IAAA,OAAO,GAAI,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAAA,GACxC;AAAA,EAMA,OAAO,GAAc,EAAA;AACnB,IAAA,OAAO,MAAO,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAAA,GAC3C;AAAA,EAMA,MAAM,GAAc,EAAA;AAClB,IAAA,KAAA,CAAM,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AAChD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,MAAS,GAAA;AACP,IAAO,MAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACnC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,OAAU,GAAA;AACR,IAAQ,OAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACpC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,IAAA,CAAK,KAAc,CAAW,EAAA;AAC5B,IAAA,IAAA,CAAK,KAAK,QAAU,EAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,UAAU,CAAC,CAAA,CAAA;AAClD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,SAAY,GAAA;AACV,IAAUA,WAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACtC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,aAAa,MAAiB,EAAA;AAC5B,IAAA,aAAA,CAAc,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,OAAO,QAAQ,CAAA,CAAA;AAC3D,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,aAAa,MAAiB,EAAA;AAC5B,IAAA,aAAA,CAAc,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,OAAO,QAAQ,CAAA,CAAA;AAC3D,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,KAAK,IAAe,EAAA;AAClB,IAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,IAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,KAAQ,GAAA;AACN,IAAA,OAAO,IAAI,OAAA,CAAQ,IAAK,CAAA,CAAA,EAAG,KAAK,CAAC,CAAA,CAAA;AAAA,GACnC;AAAA,EAKA,QAAW,GAAA;AACT,IAAA,OAAO,GAAG,IAAK,CAAA,WAAA,CAAY,QAAQ,IAAK,CAAA,QAAA,CAAS,KAAK,IAAI,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAC5D;AACF;;AC7TA,MAAMC,cAAsB,EAAC,CAAA;AAQ7B,MAAqB,mBAAmB,MAAO,CAAA;AAAA,EAC7C,QAAW,GAAA,KAAK,wBAAyB,EAAA,EAAG,CAAC,CAAA,CAAA;AAAA,EAE7C,mBAAgC,EAAC,CAAA;AAAA,EAQjC,WAAA,CAAY,IAAI,CAAG,EAAA,CAAA,GAAI,GAAG,CAAI,GAAA,CAAA,EAAG,IAAI,CAAG,EAAA;AACtC,IAAM,KAAA,EAAA,CAAA;AACN,IAAA,MAAM,IAAI,IAAK,CAAA,QAAA,CAAA;AACf,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACT;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAW,EAAA;AACf,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAG,EAAA;AACP,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAW,EAAA;AACf,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAG,EAAA;AACP,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAAA,GACrB;AAAA,EAMA,WAAW,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAK,EAAA;AACzB,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,QAAW,GAAA;AACT,IAAO,OAAA;AAAA,MACL,GAAG,IAAK,CAAA,CAAA;AAAA,MACR,GAAG,IAAK,CAAA,CAAA;AAAA,MACR,GAAG,IAAK,CAAA,CAAA;AAAA,MACR,GAAG,IAAK,CAAA,CAAA;AAAA,KACV,CAAA;AAAA,GACF;AAAA,EAOA,aAAA,CAAc,MAAe,GAAa,EAAA;AACxC,IAAA,YAAA,CAAa,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,GAAG,CAAA,CAAA;AAC9C,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,YAAa,CAAA,IAAA,GAAO,IAAI,OAAA,EAAW,EAAA;AACjC,IAAA,MAAM,GAAM,GAAA,YAAA,CAAaA,WAAW,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACjD,IAAA,IAAA,CAAK,IAAIA,WAAU,CAAA,CAAA,CAAA,EAAIA,WAAU,CAAA,CAAA,CAAA,EAAIA,YAAU,CAAE,CAAA,CAAA,CAAA;AACjD,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AAAA,EAMA,UAAU,CAAU,EAAA;AAClB,IAAA,SAAA,CAAU,IAAK,CAAA,QAAA,EAAU,QAAS,CAAA,CAAA,CAAE,CAAC,CAAA,EAAG,QAAS,CAAA,CAAA,CAAE,CAAC,CAAA,EAAG,QAAS,CAAA,CAAA,CAAE,CAAC,CAAC,CAAA,CAAA;AACpE,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,SAAS,CAAY,EAAA;AACnB,IAAS,QAAA,CAAA,IAAA,CAAK,UAAU,CAAC,CAAA,CAAA;AACzB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAEA,GAAI,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA;AACd,IAAA,GAAA,CAAI,IAAK,CAAA,QAAA,EAAU,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAC7B,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,MAAS,GAAA;AACP,IAAO,OAAAC,QAAA,CAAO,KAAK,QAAQ,CAAA,CAAA;AAAA,GAC7B;AAAA,EAOA,QAAA,CAAS,GAAe,CAAgB,EAAA;AACtC,IAAA,IAAI,CAAG,EAAA;AACL,MAAAC,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACzC,MAAA;AACL,MAAAA,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACnD;AAEA,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,KAAA,CAAM,GAAe,CAAW,EAAA;AAC9B,IAAA,KAAA,CAAM,KAAK,QAAU,EAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,UAAU,CAAC,CAAA,CAAA;AACjD,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,MAAS,GAAA;AACP,IAAO,MAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACnC,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,SAAY,GAAA;AACV,IAAU,SAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACtC,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,SAAY,GAAA;AACV,IAAUH,WAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACtC,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,IAAI,CAAe,EAAA;AACjB,IAAA,OAAOI,KAAI,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAAA,GACtC;AAAA,EAMA,QAAQ,CAAe,EAAA;AACrB,IAAA,OAAO,QAAS,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAAA,GAC3C;AAAA,EAKA,KAAQ,GAAA;AACN,IAAA,OAAO,IAAI,UAAA,EAAa,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAAA,GACnC;AAAA,EAMA,KAAK,CAAe,EAAA;AAClB,IAAK,IAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAC9B,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,OAAO,CAAe,EAAA;AACpB,IAAA,OAAOC,QAAO,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAAA,GACzC;AAAA,EAMA,SAAS,EAAe,EAAA;AACtB,IAAA,IAAI,CAAC,IAAA,CAAK,gBAAiB,CAAA,QAAA,CAAS,EAAE,CAAG,EAAA;AACvC,MAAK,IAAA,CAAA,gBAAA,CAAiB,KAAK,EAAE,CAAA,CAAA;AAAA,KAC/B;AAAA,GACF;AAAA,EAKA,aAAgB,GAAA;AACd,IAAA,IAAA,CAAK,gBAAiB,CAAA,OAAA,CAAQ,CAAC,EAAA,KAAO,IAAI,CAAA,CAAA;AAAA,GAC5C;AAAA,EAKA,QAAW,GAAA;AACT,IAAA,OAAO,GAAG,IAAK,CAAA,WAAA,CAAY,QAAQ,IAAK,CAAA,QAAA,CAAS,KAAK,IAAI,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAC5D;AACF;;AClRA,MAAqB,gBAAgB,MAAO,CAAA;AAAA,EAC1C,QAAW,GAAA,KAAK,wBAAyB,EAAA,EAAG,CAAC,CAAA,CAAA;AAAA,EAO7C,YAAY,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,IAAI,CAAG,EAAA;AAC/B,IAAM,KAAA,EAAA,CAAA;AACN,IAAA,MAAM,IAAI,IAAK,CAAA,QAAA,CAAA;AACf,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACT;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAW,EAAA;AACf,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAW,EAAA;AACf,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAOA,IAAI,EAAE,CAAW,EAAA;AACf,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACrB;AAAA,EAMA,WAAW,MAAQ,EAAA;AACjB,IAAA,MAAM,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAM,GAAA,MAAA,CAAA;AACpB,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,QAAW,GAAA;AACT,IAAO,OAAA;AAAA,MACL,GAAG,IAAK,CAAA,CAAA;AAAA,MACR,GAAG,IAAK,CAAA,CAAA;AAAA,MACR,GAAG,IAAK,CAAA,CAAA;AAAA,KACV,CAAA;AAAA,GACF;AAAA,EAQA,GAAA,CAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA;AACX,IAAAC,KAAA,CAAI,IAAK,CAAA,QAAA,EAAU,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAC1B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,UAAU,CAAG,EAAA;AACX,IAAA,OAAO,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAAA,GACzB;AAAA,EAKA,MAAS,GAAA;AACP,IAAO,OAAAJ,QAAA,CAAO,KAAK,QAAQ,CAAA,CAAA;AAAA,GAC7B;AAAA,EAMA,IAAI,GAAc,EAAA;AAChB,IAAAK,KAAA,CAAI,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AAC9C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,UAAU,CAAW,EAAA;AACnB,IAAIA,KAAA,CAAA,IAAA,CAAK,UAAU,IAAK,CAAA,QAAA,EAAU,CAAC,CAAG,EAAA,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAC3C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,SAAS,GAAc,EAAA;AACrB,IAAAC,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AACnD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,eAAe,CAAW,EAAA;AACxB,IAASA,UAAA,CAAA,IAAA,CAAK,UAAU,IAAK,CAAA,QAAA,EAAU,CAAC,CAAG,EAAA,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAChD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,UAAA,CAAW,GAAY,CAAY,EAAA;AACjC,IAAAA,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAC9C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,SAAS,GAAc,EAAA;AACrB,IAAAL,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AACnD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,eAAe,CAAW,EAAA;AACxB,IAASA,UAAA,CAAA,IAAA,CAAK,UAAU,IAAK,CAAA,QAAA,EAAU,CAAC,CAAG,EAAA,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAChD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,OAAO,GAAK,EAAA;AACV,IAAAM,QAAA,CAAO,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AACjD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,aAAa,CAAG,EAAA;AACd,IAAOA,QAAA,CAAA,IAAA,CAAK,UAAU,IAAK,CAAA,QAAA,EAAU,CAAC,CAAG,EAAA,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAC9C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,MAAM,CAAW,EAAA;AACf,IAAAC,OAAA,CAAM,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,CAAC,CAAA,CAAA;AACrC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,WAAA,CAAY,GAAY,CAAW,EAAA;AACjC,IAAA,WAAA,CAAY,KAAK,QAAU,EAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,UAAU,CAAC,CAAA,CAAA;AACvD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,WAAW,GAAc,EAAA;AACvB,IAAA,OAAOC,UAAS,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAAA,GAC7C;AAAA,EAMA,kBAAkB,GAAc,EAAA;AAC9B,IAAA,OAAOC,iBAAgB,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAAA,GACpD;AAAA,EAMA,MAAM,MAAiB,EAAA;AACrB,IAAA,OAAOC,QAAM,IAAK,CAAA,QAAA,EAAU,CAAC,CAAG,EAAA,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAAA,GACvC;AAAA,EAKA,QAAQ,MAAiB,EAAA;AACvB,IAAA,OAAOA,OAAM,CAAA,IAAA,CAAK,QAAU,EAAA,MAAA,CAAO,QAAQ,CAAA,CAAA;AAAA,GAC7C;AAAA,EAMA,IAAI,GAAc,EAAA;AAChB,IAAA,OAAOT,KAAI,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAAA,GACxC;AAAA,EAMA,OAAO,GAAc,EAAA;AACnB,IAAA,OAAOC,QAAO,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAAA,GAC3C;AAAA,EAMA,MAAM,GAAc,EAAA;AAClB,IAAAS,OAAA,CAAM,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AAChD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,MAAS,GAAA;AACP,IAAOC,QAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACnC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,OAAU,GAAA;AACR,IAAQC,SAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACpC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,IAAA,CAAK,KAAc,CAAW,EAAA;AAC5B,IAAAC,MAAA,CAAK,KAAK,QAAU,EAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,UAAU,CAAC,CAAA,CAAA;AAClD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,SAAY,GAAA;AACV,IAAUjB,WAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACtC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,WAAW,KAAO,EAAA;AAChB,IAAA,MAAM,CAAI,GAAA,IAAI,UAAW,EAAA,CAAE,UAAU,KAAK,CAAA,CAAA;AAC1C,IAAO,OAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA,CAAA;AAAA,GAC/B;AAAA,EAMA,aAAa,MAAiB,EAAA;AAC5B,IAAAkB,eAAA,CAAc,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,OAAO,QAAQ,CAAA,CAAA;AAC3D,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,aAAa,MAAiB,EAAA;AAC5B,IAAAC,eAAA,CAAc,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,OAAO,QAAQ,CAAA,CAAA;AAC3D,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,gBAAgB,UAAwB,EAAA;AACtC,IAAA,aAAA,CAAc,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,WAAW,QAAQ,CAAA,CAAA;AAC/D,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,KAAK,IAAe,EAAA;AAClB,IAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,IAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,IAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,KAAQ,GAAA;AACN,IAAA,OAAO,IAAI,OAAQ,CAAA,IAAA,CAAK,GAAG,IAAK,CAAA,CAAA,EAAG,KAAK,CAAC,CAAA,CAAA;AAAA,GAC3C;AAAA,EAKA,QAAW,GAAA;AACT,IAAA,OAAO,GAAG,IAAK,CAAA,WAAA,CAAY,QAAQ,IAAK,CAAA,QAAA,CAAS,KAAK,IAAI,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAC5D;AACF;;ACjXA,MAAqB,gBAAgB,MAAO,CAAA;AAAA,EAC1C,QAAW,GAAA,KAAK,wBAAyB,EAAA,EAAG,CAAC,CAAA,CAAA;AAAA,EAQ7C,WAAA,CAAY,IAAI,CAAG,EAAA,CAAA,GAAI,GAAG,CAAI,GAAA,CAAA,EAAG,IAAI,CAAG,EAAA;AACtC,IAAM,KAAA,EAAA,CAAA;AACN,IAAA,MAAM,IAAI,IAAK,CAAA,QAAA,CAAA;AACf,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACT;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAW,EAAA;AACf,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAW,EAAA;AACf,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAW,EAAA;AACf,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAW,EAAA;AACf,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AAAA,GACrB;AAAA,EAMA,WAAW,MAAQ,EAAA;AACjB,IAAA,MAAM,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAM,GAAA,MAAA,CAAA;AACvB,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAA,IAAI,CAAM,KAAA,KAAA,CAAA;AAAW,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,QAAW,GAAA;AACT,IAAO,OAAA;AAAA,MACL,GAAG,IAAK,CAAA,CAAA;AAAA,MACR,GAAG,IAAK,CAAA,CAAA;AAAA,MACR,GAAG,IAAK,CAAA,CAAA;AAAA,MACR,GAAG,IAAK,CAAA,CAAA;AAAA,KACV,CAAA;AAAA,GACF;AAAA,EASA,GAAI,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA;AACd,IAAAb,KAAA,CAAI,IAAK,CAAA,QAAA,EAAU,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAC7B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,UAAU,CAAG,EAAA;AACX,IAAA,OAAO,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAAA,GAC5B;AAAA,EAMA,IAAI,GAAc,EAAA;AAChB,IAAAC,KAAA,CAAI,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AAC9C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,UAAU,CAAG,EAAA;AACX,IAAIA,KAAA,CAAA,IAAA,CAAK,UAAU,IAAK,CAAA,QAAA,EAAU,CAAC,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,CAAC,CAAA,CAAA;AAC9C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,SAAS,GAAc,EAAA;AACrB,IAAAC,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AACnD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,eAAe,CAAG,EAAA;AAChB,IAASA,UAAA,CAAA,IAAA,CAAK,UAAU,IAAK,CAAA,QAAA,EAAU,CAAC,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,CAAC,CAAA,CAAA;AACnD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,UAAA,CAAW,GAAY,CAAY,EAAA;AACjC,IAAAA,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAC9C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,SAAS,GAAc,EAAA;AACrB,IAAAL,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AACnD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,eAAe,CAAW,EAAA;AACxB,IAASA,UAAA,CAAA,IAAA,CAAK,UAAU,IAAK,CAAA,QAAA,EAAU,CAAC,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,CAAC,CAAA,CAAA;AACnD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,OAAO,GAAc,EAAA;AACnB,IAAAM,QAAA,CAAO,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AACjD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,aAAa,CAAG,EAAA;AACd,IAAOA,QAAA,CAAA,IAAA,CAAK,UAAU,IAAK,CAAA,QAAA,EAAU,CAAC,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,CAAC,CAAA,CAAA;AACjD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,MAAM,CAAW,EAAA;AACf,IAAAC,OAAA,CAAM,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,CAAC,CAAA,CAAA;AACrC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,WAAA,CAAY,GAAY,CAAW,EAAA;AACjC,IAAAU,aAAA,CAAY,KAAK,QAAU,EAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,UAAU,CAAC,CAAA,CAAA;AACvD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,WAAW,GAAc,EAAA;AACvB,IAAA,OAAOT,UAAS,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAAA,GAC7C;AAAA,EAMA,kBAAkB,GAAc,EAAA;AAC9B,IAAA,OAAOC,iBAAgB,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAAA,GACpD;AAAA,EAKA,MAAS,GAAA;AACP,IAAO,OAAAV,QAAA,CAAO,KAAK,QAAQ,CAAA,CAAA;AAAA,GAC7B;AAAA,EAMA,IAAI,GAAc,EAAA;AAChB,IAAA,OAAOE,KAAI,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAAA,GACxC;AAAA,EAMA,OAAO,GAAc,EAAA;AACnB,IAAA,OAAOC,QAAO,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAAA,GAC3C;AAAA,EAMA,MAAM,GAAc,EAAA;AAClB,IAAAS,OAAA,CAAM,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,IAAI,QAAQ,CAAA,CAAA;AAChD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,MAAS,GAAA;AACP,IAAOC,QAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACnC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,OAAU,GAAA;AACR,IAAQC,SAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACpC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,IAAA,CAAK,KAAc,CAAW,EAAA;AAC5B,IAAAC,MAAA,CAAK,KAAK,QAAU,EAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,UAAU,CAAC,CAAA,CAAA;AAClD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,SAAY,GAAA;AACV,IAAUjB,WAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACtC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,aAAa,MAAiB,EAAA;AAC5B,IAAAmB,eAAA,CAAc,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,OAAO,QAAQ,CAAA,CAAA;AAC3D,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,gBAAgB,UAAwB,EAAA;AACtC,IAAAE,eAAA,CAAc,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,WAAW,QAAQ,CAAA,CAAA;AAC/D,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,KAAK,IAAe,EAAA;AAClB,IAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,IAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,IAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,IAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,KAAQ,GAAA;AACN,IAAO,OAAA,IAAI,QAAQ,IAAK,CAAA,CAAA,EAAG,KAAK,CAAG,EAAA,IAAA,CAAK,CAAG,EAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AAAA,GACnD;AAAA,EAKA,QAAW,GAAA;AACT,IAAA,OAAO,GAAG,IAAK,CAAA,WAAA,CAAY,QAAQ,IAAK,CAAA,QAAA,CAAS,KAAK,IAAI,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAC5D;AACF;;ACtYA,MAAqB,MAAO,CAAA;AAAA,EAK1B,QAAW,GAAA,KAAK,wBAAyB,EAAA,EAAG,EAAE,CAAA,CAAA;AAAA,EAO9C,SAAA,CAAU,KAAO,EAAA,MAAA,GAAS,CAAG,EAAA;AAC3B,IAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,OAAO,CAAI,GAAA,IAAA,CAAK,QAAS,CAAA,MAAA,EAAQ,CAAK,EAAA,EAAA;AACpC,MAAK,IAAA,CAAA,QAAA,CAAS,CAAK,CAAA,GAAA,KAAA,CAAM,MAAS,GAAA,CAAA,CAAA,CAAA;AAAA,KACpC;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,OAAQ,CAAA,GAAA,GAA8C,EAAC,EAAG,SAAS,CAAG,EAAA;AACpE,IAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,OAAO,CAAI,GAAA,IAAA,CAAK,QAAS,CAAA,MAAA,EAAQ,CAAK,EAAA,EAAA;AACpC,MAAI,GAAA,CAAA,MAAA,GAAS,CAAK,CAAA,GAAA,IAAA,CAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,KAClC;AACA,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AACF;;ACOA,MAAqB,gBAAgB,MAAO,CAAA;AAAA,EAC1C,QAAW,GAAA,KAAK,wBAAyB,EAAA,EAAG,CAAC,CAAA,CAAA;AAAA,EAa7C,YAAY,GAAM,GAAA,CAAA,EAAG,MAAM,CAAG,EAAA,GAAA,GAAM,GAAG,GAAM,GAAA,CAAA,EAAG,GAAM,GAAA,CAAA,EAAG,MAAM,CAAG,EAAA,GAAA,GAAM,GAAG,GAAM,GAAA,CAAA,EAAG,MAAM,CAAG,EAAA;AAC3F,IAAM,KAAA,EAAA,CAAA;AACN,IAAA,MAAM,IAAiC,IAAK,CAAA,QAAA,CAAA;AAE5C,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AAEP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AAEP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AAAA,GACT;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAKA,WAAW,QAAW,GAAA;AACpB,IAAA,OAAO,IAAI,OAAQ,EAAA,CAAE,UAAU,QAAS,CAAA,EAAE,CAAC,CAAA,CAAA;AAAA,GAC7C;AAAA,EAeA,GAAA,CAAI,KAAK,GAAK,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA;AAC/C,IAAIf,KAAA,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,EAAK,GAAK,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AAC9D,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,SAAY,GAAA;AACV,IAAU,SAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACtC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,MAAA,CAAO,IAAI,IAAM,EAAA;AACf,IAAOgB,QAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAChC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,OAAA,CAAQ,IAAI,IAAM,EAAA;AAChB,IAAQ,OAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AACjC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,WAAc,GAAA;AACZ,IAAO,OAAA,WAAA,CAAY,KAAK,QAAQ,CAAA,CAAA;AAAA,GAClC;AAAA,EAQA,QAAA,CAAS,GAAY,CAAa,EAAA;AAChC,IAAA,IAAI,CAAG,EAAA;AACL,MAAAnB,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACzC,MAAA;AACL,MAAAA,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACnD;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAQA,WAAA,CAAY,GAAY,CAAa,EAAA;AACnC,IAAA,IAAI,CAAG,EAAA;AACL,MAAAA,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACzC,MAAA;AACL,MAAAA,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,KAAK,QAAQ,CAAA,CAAA;AAAA,KACnD;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,UAAU,CAAY,EAAA;AACpB,IAAA,SAAA,CAAU,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAClD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,OAAO,GAAa,EAAA;AAClB,IAAA,MAAA,CAAO,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,GAAG,CAAA,CAAA;AACxC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,MAAM,CAAY,EAAA;AAChB,IAAAO,OAAA,CAAM,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAC9C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,gBAAgB,CAAY,EAAA;AAC1B,IAAgB,eAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AACzC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,aAAa,GAAa,EAAA;AACxB,IAAa,YAAA,CAAA,IAAA,CAAK,UAAU,GAAG,CAAA,CAAA;AAC/B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,YAAY,CAAG,EAAA;AACb,IAAY,WAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AACrC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,SAAS,CAAe,EAAA;AACtB,IAAS,QAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAClC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,eAAe,CAAG,EAAA;AAChB,IAAe,cAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AACxC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,SAAS,CAAG,EAAA;AACV,IAAS,QAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAClC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,IAAO,GAAA;AACL,IAAO,OAAA,IAAA,CAAK,KAAK,QAAQ,CAAA,CAAA;AAAA,GAC3B;AAAA,EAQA,GAAA,CAAI,GAAY,CAAa,EAAA;AAC3B,IAAA,IAAI,CAAG,EAAA;AACL,MAAAH,KAAA,CAAI,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACpC,MAAA;AACL,MAAAA,KAAA,CAAI,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KAC9C;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAQA,QAAA,CAAS,GAAY,CAAa,EAAA;AAChC,IAAA,IAAI,CAAG,EAAA;AACL,MAAAC,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACzC,MAAA;AACL,MAAAA,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACnD;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAQA,MAAA,CAAO,GAAY,CAAa,EAAA;AAC9B,IAAA,IAAI,CAAG,EAAA;AACL,MAAA,OAAOH,QAAO,CAAA,CAAA,CAAE,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAAA,KAC/B,MAAA;AACL,MAAA,OAAOA,QAAO,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAAA,KACzC;AAAA,GACF;AAAA,EAWA,4BAA6B,CAAA,QAAA,EAAU,CAAG,EAAA,CAAA,EAAG,QAAQ,MAAQ,EAAA;AAC3D,IAAM,MAAA,GAAA,GAAM,IAAK,CAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAC7B,IAAM,MAAA,GAAA,GAAM,IAAK,CAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAE7B,IAAA,IAAA,CAAK,GAAI,CAAA,MAAA,GAAS,GAAK,EAAA,CAAC,SAAS,GAAK,EAAA,CAAA,EAAG,MAAS,GAAA,GAAA,EAAK,MAAS,GAAA,GAAA,EAAK,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAC/E,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,gBAAgB,CAAY,EAAA;AAC1B,IAAe,cAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AACxC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,KAAK,CAAY,EAAA;AACf,IAAKkB,MAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAC9B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,KAAQ,GAAA;AACN,IAAA,OAAO,IAAI,OAAA,EAAU,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAAA,GAChC;AAAA,EAKA,QAAW,GAAA;AACT,IAAA,OAAO,GAAG,IAAK,CAAA,WAAA,CAAY,QAAQ,IAAK,CAAA,QAAA,CAAS,KAAK,IAAI,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAC5D;AACF;;ACvVA,MAAM,YAAsB,EAAC,CAAA;AAe7B,MAAqB,gBAAgB,MAAO,CAAA;AAAA,EAC1C,QAAW,GAAA,KAAK,wBAAyB,EAAA,EAAG,EAAE,CAAA,CAAA;AAAA,EAoB9C,WACE,CAAA,GAAA,GAAM,CACN,EAAA,GAAA,GAAM,GACN,GAAM,GAAA,CAAA,EACN,GAAM,GAAA,CAAA,EACN,GAAM,GAAA,CAAA,EACN,GAAM,GAAA,CAAA,EACN,MAAM,CACN,EAAA,GAAA,GAAM,CACN,EAAA,GAAA,GAAM,CACN,EAAA,GAAA,GAAM,CACN,EAAA,GAAA,GAAM,GACN,GAAM,GAAA,CAAA,EACN,GAAM,GAAA,CAAA,EACN,GAAM,GAAA,CAAA,EACN,GAAM,GAAA,CAAA,EACN,MAAM,CACN,EAAA;AACA,IAAM,KAAA,EAAA,CAAA;AACN,IAAA,MAAM,IAAiC,IAAK,CAAA,QAAA,CAAA;AAE5C,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AAEP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AAEP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,GAAA,CAAA;AACP,IAAA,CAAA,CAAE,EAAM,CAAA,GAAA,GAAA,CAAA;AACR,IAAA,CAAA,CAAE,EAAM,CAAA,GAAA,GAAA,CAAA;AAER,IAAA,CAAA,CAAE,EAAM,CAAA,GAAA,GAAA,CAAA;AACR,IAAA,CAAA,CAAE,EAAM,CAAA,GAAA,GAAA,CAAA;AACR,IAAA,CAAA,CAAE,EAAM,CAAA,GAAA,GAAA,CAAA;AACR,IAAA,CAAA,CAAE,EAAM,CAAA,GAAA,GAAA,CAAA;AAAA,GACV;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,EAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,EAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,EAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,EAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAKA,WAAW,QAAW,GAAA;AACpB,IAAA,OAAO,IAAI,OAAQ,EAAA,CAAE,UAAUC,UAAS,CAAA,EAAE,CAAC,CAAA,CAAA;AAAA,GAC7C;AAAA,EAqBA,IAAI,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA;AAClF,IAAAlB,KAAA,CAAI,KAAK,QAAU,EAAA,GAAA,EAAK,GAAK,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,EAAK,GAAK,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,EAAK,KAAK,GAAK,EAAA,GAAA,EAAK,KAAK,GAAG,CAAA,CAAA;AACjG,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,SAAY,GAAA;AACV,IAAUmB,WAAA,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACtC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,MAAA,CAAO,IAAI,IAAM,EAAA;AACf,IAAOH,QAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAChC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,OAAA,CAAQ,IAAI,IAAM,EAAA;AAChB,IAAQI,SAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AACjC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,WAAc,GAAA;AACZ,IAAO,OAAAC,aAAA,CAAY,KAAK,QAAQ,CAAA,CAAA;AAAA,GAClC;AAAA,EAQA,GAAA,CAAI,GAAY,CAAa,EAAA;AAC3B,IAAA,IAAI,CAAG,EAAA;AACL,MAAApB,KAAA,CAAI,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACpC,MAAA;AACL,MAAAA,KAAA,CAAI,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KAC9C;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAQA,QAAA,CAAS,GAAY,CAAa,EAAA;AAChC,IAAA,IAAI,CAAG,EAAA;AACL,MAAAC,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACzC,MAAA;AACL,MAAAA,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACnD;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAQA,QAAA,CAAS,GAAY,CAAa,EAAA;AAChC,IAAA,IAAI,CAAG,EAAA;AACL,MAAAL,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACzC,MAAA;AACL,MAAAA,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACnD;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,cAAA,CAAe,CAAa,GAAA,IAAA,EAAM,CAAY,EAAA;AAC5C,IAAA,cAAA,CAAe,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,CAAC,CAAA,CAAA;AAC3C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAQA,WAAA,CAAY,GAAY,CAAa,EAAA;AACnC,IAAA,IAAI,CAAG,EAAA;AACL,MAAAA,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAAA,KACzC,MAAA;AACL,MAAAA,UAAA,CAAS,IAAK,CAAA,QAAA,EAAU,CAAE,CAAA,QAAA,EAAU,KAAK,QAAQ,CAAA,CAAA;AAAA,KACnD;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,UAAU,CAAY,EAAA;AACpB,IAAAyB,WAAA,CAAU,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAClD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,OAAO,GAAa,EAAA;AAClB,IAAAC,QAAA,CAAO,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,GAAG,CAAA,CAAA;AACxC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,MAAM,IAAe,EAAA;AACnB,IAAAnB,OAAA,CAAM,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,KAAK,QAAQ,CAAA,CAAA;AACjD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,YAAY,CAAW,EAAA;AACrB,IAAMA,OAAA,CAAA,IAAA,CAAK,UAAU,IAAK,CAAA,QAAA,EAAU,CAAC,CAAG,EAAA,CAAA,EAAG,CAAC,CAAC,CAAA,CAAA;AAC7C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,gBAAgB,GAAc,EAAA;AAC5B,IAAgBoB,iBAAA,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AAC3C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,YAAA,CAAa,KAAa,IAAM,EAAA;AAC9B,IAAaC,cAAA,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,EAAK,IAAI,CAAA,CAAA;AACrC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,cAAc,GAAa,EAAA;AACzB,IAAc,aAAA,CAAA,IAAA,CAAK,UAAU,GAAG,CAAA,CAAA;AAChC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,cAAc,GAAa,EAAA;AACzB,IAAc,aAAA,CAAA,IAAA,CAAK,UAAU,GAAG,CAAA,CAAA;AAChC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,cAAc,GAAK,EAAA;AACjB,IAAc,aAAA,CAAA,IAAA,CAAK,UAAU,GAAG,CAAA,CAAA;AAChC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,UAAU,GAAc,EAAA;AACtB,IAAYC,aAAA,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AACvC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,uBAAA,CAAwB,MAAkB,CAAY,EAAA;AACpD,IAAA,uBAAA,CAAwB,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAChE,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EASA,eAAgB,CAAA,GAAA,EAAK,MAAQ,EAAA,IAAA,EAAM,GAAK,EAAA;AACtC,IAAA,WAAA,CAAY,KAAK,QAAU,EAAA,QAAA,CAAS,GAAG,CAAG,EAAA,MAAA,EAAQ,MAAM,GAAG,CAAA,CAAA;AAC3D,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAWA,eAAe,IAAM,EAAA,KAAA,EAAO,MAAQ,EAAA,GAAA,EAAK,MAAM,GAAK,EAAA;AAClD,IAAA,KAAA,CAAM,KAAK,QAAU,EAAA,IAAA,EAAM,OAAO,MAAQ,EAAA,GAAA,EAAK,MAAM,GAAG,CAAA,CAAA;AACxD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,SAAS,CAAe,EAAA;AACtB,IAASC,UAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAClC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,OAAO,IAAM,EAAA;AACX,IAAA,OAAO5B,QAAO,CAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAAA,GACzC;AAAA,EAMA,WAAY,CAAA,CAAA,GAAI,IAAI,UAAA,EAAc,EAAA;AAChC,IAAY,WAAA,CAAA,SAAA,EAAW,KAAK,QAAQ,CAAA,CAAA;AACpC,IAAE,CAAA,CAAA,GAAA,CAAI,UAAU,CAAI,CAAA,EAAA,SAAA,CAAU,IAAI,SAAU,CAAA,CAAA,CAAA,EAAI,UAAU,CAAE,CAAA,CAAA,CAAA;AAC5D,IAAO,OAAA,CAAA,CAAA;AAAA,GACT;AAAA,EAMA,QAAS,CAAA,CAAA,GAAI,IAAI,OAAA,EAAW,EAAA;AAC1B,IAAW,UAAA,CAAA,SAAA,EAAW,KAAK,QAAQ,CAAA,CAAA;AACnC,IAAA,CAAA,CAAE,IAAI,SAAU,CAAA,CAAA,CAAA,EAAI,SAAU,CAAA,CAAA,CAAA,EAAI,UAAU,CAAE,CAAA,CAAA,CAAA;AAC9C,IAAO,OAAA,CAAA,CAAA;AAAA,GACT;AAAA,EAMA,cAAe,CAAA,CAAA,GAAI,IAAI,OAAA,EAAW,EAAA;AAChC,IAAe,cAAA,CAAA,SAAA,EAAW,KAAK,QAAQ,CAAA,CAAA;AACvC,IAAA,CAAA,CAAE,IAAI,SAAU,CAAA,CAAA,CAAA,EAAI,SAAU,CAAA,CAAA,CAAA,EAAI,UAAU,CAAE,CAAA,CAAA,CAAA;AAC9C,IAAO,OAAA,CAAA,CAAA;AAAA,GACT;AAAA,EAMA,QAAQ,GAAK,EAAA;AACX,IAAA,OAAA,CAAQ,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,GAAG,CAAA,CAAA;AACzC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,QAAQ,GAAK,EAAA;AACX,IAAA,OAAA,CAAQ,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,GAAG,CAAA,CAAA;AACzC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,QAAQ,GAAK,EAAA;AACX,IAAA,OAAA,CAAQ,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,QAAA,EAAU,GAAG,CAAA,CAAA;AACzC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAQA,OAAA,CAAQ,CAAY,EAAA,CAAA,EAAe,CAAY,EAAA;AAC7C,IAAA,4BAAA,CAA6B,KAAK,QAAU,EAAA,CAAA,CAAE,UAAU,CAAE,CAAA,QAAA,EAAU,EAAE,QAAQ,CAAA,CAAA;AAC9E,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,SAAY,GAAA;AACV,IAAO,OAAA;AAAA,MACL,QAAA,EAAU,KAAK,WAAY,EAAA;AAAA,MAC3B,KAAA,EAAO,KAAK,QAAS,EAAA;AAAA,MACrB,WAAA,EAAa,KAAK,cAAe,EAAA;AAAA,KACnC,CAAA;AAAA,GACF;AAAA,EAOA,KAAK,CAAY,EAAA;AACf,IAAKkB,MAAA,CAAA,IAAA,CAAK,QAAU,EAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAC9B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,KAAQ,GAAA;AACN,IAAA,OAAO,IAAI,OAAA,EAAU,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAAA,GAChC;AAAA,EAKA,QAAW,GAAA;AACT,IAAA,OAAO,GAAG,IAAK,CAAA,WAAA,CAAY,QAAQ,IAAK,CAAA,QAAA,CAAS,KAAK,IAAI,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAC5D;AACF;;ACvgBA,MAAqB,cAAc,MAAO,CAAA;AAAA,EACxC,QAAW,GAAA,KAAK,wBAAyB,EAAA,EAAG,CAAC,CAAA,CAAA;AAAA,EAE7C,mBAAgC,EAAC,CAAA;AAAA,EAEjC,MAAsB,GAAA,KAAA,CAAA;AAAA,EAQtB,WAAA,CAAY,IAAI,CAAG,EAAA,CAAA,GAAI,GAAG,CAAI,GAAA,CAAA,EAAG,QAAqB,KAAO,EAAA;AAC3D,IAAM,KAAA,EAAA,CAAA;AACN,IAAA,MAAM,IAAI,IAAK,CAAA,QAAA,CAAA;AACf,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,CAAA,GAAA,CAAA,CAAA;AACP,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AAAA,GAChB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAW,EAAA;AACf,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAG,EAAA;AACP,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,CAAI,GAAA;AACN,IAAA,OAAO,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,GACvB;AAAA,EAMA,IAAI,EAAE,CAAW,EAAA;AACf,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAAA,GACrB;AAAA,EAKA,IAAI,KAAQ,GAAA;AACV,IAAA,OAAO,IAAK,CAAA,MAAA,CAAA;AAAA,GACd;AAAA,EAMA,IAAI,MAAM,KAAO,EAAA;AACf,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AACd,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAAA,GACrB;AAAA,EAEA,IAAI,IAAO,GAAA;AACT,IAAA,OAAO,IAAK,CAAA,CAAA,CAAA;AAAA,GACd;AAAA,EAEA,IAAI,KAAK,IAAM,EAAA;AACb,IAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAEA,IAAI,KAAQ,GAAA;AACV,IAAA,OAAO,IAAK,CAAA,CAAA,CAAA;AAAA,GACd;AAAA,EAEA,IAAI,MAAM,KAAO,EAAA;AACf,IAAA,IAAA,CAAK,CAAI,GAAA,KAAA,CAAA;AAAA,GACX;AAAA,EAEA,IAAI,GAAM,GAAA;AACR,IAAA,OAAO,IAAK,CAAA,CAAA,CAAA;AAAA,GACd;AAAA,EAEA,IAAI,IAAI,GAAK,EAAA;AACX,IAAA,IAAA,CAAK,CAAI,GAAA,GAAA,CAAA;AAAA,GACX;AAAA,EASA,WAAW,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,OAAS,EAAA;AAC7B,IAAA,IAAI,MAAM,KAAW,CAAA,EAAA;AACnB,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAAA,KACX;AACA,IAAA,IAAI,MAAM,KAAW,CAAA,EAAA;AACnB,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAAA,KACX;AACA,IAAA,IAAI,MAAM,KAAW,CAAA,EAAA;AACnB,MAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAAA,KACX;AACA,IAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,MAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AAAA,KACf;AACA,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,QAAW,GAAA;AACT,IAAO,OAAA;AAAA,MACL,GAAG,IAAK,CAAA,CAAA;AAAA,MACR,GAAG,IAAK,CAAA,CAAA;AAAA,MACR,GAAG,IAAK,CAAA,CAAA;AAAA,MACR,OAAO,IAAK,CAAA,KAAA;AAAA,KACd,CAAA;AAAA,GACF;AAAA,EAQA,mBAAmB,CAAY,EAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,EAAQ,SAAS,IAAM,EAAA;AACjE,IAAM,MAAA,EAAA,GAAK,EAAE,OAAQ,EAAA,CAAA;AACrB,IAAA,MAAM,MAAM,EAAG,CAAA,CAAA,CAAA,CAAA;AACf,IAAA,MAAM,MAAM,EAAG,CAAA,CAAA,CAAA,CAAA;AACf,IAAA,MAAM,MAAM,EAAG,CAAA,CAAA,CAAA,CAAA;AACf,IAAA,MAAM,MAAM,EAAG,CAAA,CAAA,CAAA,CAAA;AACf,IAAA,MAAM,MAAM,EAAG,CAAA,CAAA,CAAA,CAAA;AACf,IAAA,MAAM,MAAM,EAAG,CAAA,CAAA,CAAA,CAAA;AACf,IAAA,MAAM,MAAM,EAAG,CAAA,CAAA,CAAA,CAAA;AACf,IAAA,MAAM,MAAM,EAAG,CAAA,CAAA,CAAA,CAAA;AACf,IAAA,MAAM,MAAM,EAAG,CAAA,EAAA,CAAA,CAAA;AAEf,IAAA,QAAQ,KAAO;AAAA,MACb,KAAK,KAAA;AACH,QAAA,IAAA,CAAK,IAAI,IAAK,CAAA,IAAA,CAAK,MAAM,GAAK,EAAA,CAAA,CAAA,EAAI,CAAC,CAAC,CAAA,CAAA;AAEpC,QAAA,IAAI,IAAK,CAAA,GAAA,CAAI,GAAG,CAAA,GAAI,SAAW,EAAA;AAC7B,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,CAAC,KAAK,GAAG,CAAA,CAAA;AAC7B,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,CAAC,KAAK,GAAG,CAAA,CAAA;AAAA,SACxB,MAAA;AACL,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AAC5B,UAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAAA,SACX;AACA,QAAA,MAAA;AAAA,MACF,KAAK,KAAA;AACH,QAAK,IAAA,CAAA,CAAA,GAAI,KAAK,IAAK,CAAA,CAAC,MAAM,GAAK,EAAA,CAAA,CAAA,EAAI,CAAC,CAAC,CAAA,CAAA;AAErC,QAAA,IAAI,IAAK,CAAA,GAAA,CAAI,GAAG,CAAA,GAAI,SAAW,EAAA;AAC7B,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AAC5B,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AAAA,SACvB,MAAA;AACL,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,CAAC,KAAK,GAAG,CAAA,CAAA;AAC7B,UAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAAA,SACX;AAEA,QAAA,MAAA;AAAA,MACF,KAAK,KAAA;AACH,QAAA,IAAA,CAAK,IAAI,IAAK,CAAA,IAAA,CAAK,MAAM,GAAK,EAAA,CAAA,CAAA,EAAI,CAAC,CAAC,CAAA,CAAA;AAEpC,QAAA,IAAI,IAAK,CAAA,GAAA,CAAI,GAAG,CAAA,GAAI,SAAW,EAAA;AAC7B,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,CAAC,KAAK,GAAG,CAAA,CAAA;AAC7B,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,CAAC,KAAK,GAAG,CAAA,CAAA;AAAA,SACxB,MAAA;AACL,UAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AACT,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AAAA,SAC9B;AACA,QAAA,MAAA;AAAA,MACF,KAAK,KAAA;AACH,QAAK,IAAA,CAAA,CAAA,GAAI,KAAK,IAAK,CAAA,CAAC,MAAM,GAAK,EAAA,CAAA,CAAA,EAAI,CAAC,CAAC,CAAA,CAAA;AACrC,QAAA,IAAI,IAAK,CAAA,GAAA,CAAI,GAAG,CAAA,GAAI,SAAW,EAAA;AAC7B,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AAC5B,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AAAA,SACvB,MAAA;AACL,UAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AACT,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,CAAC,KAAK,GAAG,CAAA,CAAA;AAAA,SAC/B;AACA,QAAA,MAAA;AAAA,MACF,KAAK,KAAA;AACH,QAAA,IAAA,CAAK,IAAI,IAAK,CAAA,IAAA,CAAK,MAAM,GAAK,EAAA,CAAA,CAAA,EAAI,CAAC,CAAC,CAAA,CAAA;AAEpC,QAAA,IAAI,IAAK,CAAA,GAAA,CAAI,GAAG,CAAA,GAAI,SAAW,EAAA;AAC7B,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,CAAC,KAAK,GAAG,CAAA,CAAA;AAC7B,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,CAAC,KAAK,GAAG,CAAA,CAAA;AAAA,SACxB,MAAA;AACL,UAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AACT,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AAAA,SAC9B;AACA,QAAA,MAAA;AAAA,MACF,KAAK,KAAA;AACH,QAAK,IAAA,CAAA,CAAA,GAAI,KAAK,IAAK,CAAA,CAAC,MAAM,GAAK,EAAA,CAAA,CAAA,EAAI,CAAC,CAAC,CAAA,CAAA;AAErC,QAAA,IAAI,IAAK,CAAA,GAAA,CAAI,GAAG,CAAA,GAAI,SAAW,EAAA;AAC7B,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AAC5B,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AAAA,SACvB,MAAA;AACL,UAAA,IAAA,CAAK,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,CAAC,KAAK,GAAG,CAAA,CAAA;AAC7B,UAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAAA,SACX;AACA,QAAA,MAAA;AAAA,MACF;AACE,QAAM,MAAA,IAAI,MAAM,2BAA2B,CAAA,CAAA;AAAA,KAC/C;AACA,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AACd,IAAA,IAAI,MAAQ,EAAA;AACV,MAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAAA,KACrB;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,eAAe,CAAe,EAAA;AAC5B,IAAA,MAAM,CAAC,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,IAAI,CAAE,CAAA,QAAA,CAAA;AACvB,IAAA,MAAM,IAAI,CAAI,GAAA,CAAA,CAAA;AACd,IAAA,MAAM,CAAI,GAAA,CAAA,CAAA,IAAM,CAAI,GAAA,CAAA,GAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AAC7B,IAAA,MAAM,CAAI,GAAA,CAAA,IAAK,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA,CAAA;AAC3B,IAAA,IAAI,CAAI,GAAA,CAAA,CAAA,IAAM,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA,CAAA;AAC1B,IAAA,MAAM,CAAI,GAAA,CAAA,IAAK,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA,CAAA;AAC3B,IAAA,MAAM,CAAI,GAAA,CAAA,CAAA,IAAM,CAAI,GAAA,CAAA,GAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AAC7B,IAAI,CAAA,GAAA,CAAA,GAAI,IAAI,CAAI,GAAA,CAAA,CAAA;AAChB,IAAI,CAAA,GAAA,CAAA,GAAI,KAAK,CAAK,CAAA,GAAA,CAAA,CAAA;AAClB,IAAA,MAAM,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AACzB,IAAM,MAAA,CAAA,GAAI,IAAK,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACrB,IAAA,MAAM,CAAI,GAAA,IAAA,CAAK,KAAM,CAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AACzB,IAAA,OAAO,IAAI,KAAA,CAAM,CAAG,EAAA,CAAA,EAAG,GAAG,KAAK,CAAA,CAAA;AAAA,GACjC;AAAA,EAOA,WAAY,CAAA,IAAA,EAAM,KAAQ,GAAA,IAAA,CAAK,MAAQ,EAAA;AACrC,IAAO,OAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,EAAG,KAAK,CAAG,EAAA,IAAA,CAAK,GAAG,KAAK,CAAA,CAAA;AAAA,GAC/C;AAAA,EAKA,YAAe,GAAA;AACb,IAAA,MAAM,CAAI,GAAA,IAAA,CAAK,GAAI,CAAA,GAAA,GAAM,KAAK,GAAG,CAAA,CAAA;AACjC,IAAA,MAAM,CAAI,GAAA,IAAA,CAAK,GAAI,CAAA,GAAA,GAAM,KAAK,GAAG,CAAA,CAAA;AACjC,IAAA,MAAM,CAAI,GAAA,IAAA,CAAK,GAAI,CAAA,GAAA,GAAM,KAAK,IAAI,CAAA,CAAA;AAClC,IAAA,MAAM,CAAI,GAAA,IAAA,CAAK,GAAI,CAAA,GAAA,GAAM,KAAK,IAAI,CAAA,CAAA;AAClC,IAAA,MAAM,CAAI,GAAA,IAAA,CAAK,GAAI,CAAA,GAAA,GAAM,KAAK,KAAK,CAAA,CAAA;AACnC,IAAA,MAAM,CAAI,GAAA,IAAA,CAAK,GAAI,CAAA,GAAA,GAAM,KAAK,KAAK,CAAA,CAAA;AACnC,IAAA,OAAO,IAAI,UAAA;AAAA,MACT,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA;AAAA,MACpB,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA;AAAA,MACpB,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA;AAAA,MACpB,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA;AAAA,KACtB,CAAA;AAAA,GACF;AAAA,EAKA,SAAY,GAAA;AACV,IAAA,OAAO,IAAI,OAAQ,CAAA,IAAA,CAAK,GAAG,IAAK,CAAA,CAAA,EAAG,KAAK,CAAC,CAAA,CAAA;AAAA,GAC3C;AAAA,EASA,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,KAAA,GAAQ,KAAK,MAAQ,EAAA;AAChC,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,SAAS,CAAK,CAAA,GAAA,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;AACd,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,KAAQ,GAAA;AACN,IAAA,OAAO,IAAI,KAAA,EAAQ,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAAA,GAC9B;AAAA,EAMA,KAAK,KAAc,EAAA;AACjB,IAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,OAAO,CAAI,GAAA,IAAA,CAAK,QAAS,CAAA,MAAA,EAAQ,CAAK,EAAA,EAAA;AACpC,MAAK,IAAA,CAAA,QAAA,CAAS,CAAK,CAAA,GAAA,KAAA,CAAM,QAAS,CAAA,CAAA,CAAA,CAAA;AAAA,KACpC;AAEA,IAAA,IAAA,CAAK,SAAS,KAAM,CAAA,KAAA,CAAA;AAEpB,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,OAAO,CAAU,EAAA;AACf,IAAA,OAAO,IAAK,CAAA,CAAA,KAAM,CAAE,CAAA,CAAA,IAAK,KAAK,CAAM,KAAA,CAAA,CAAE,CAAK,IAAA,IAAA,CAAK,CAAM,KAAA,CAAA,CAAE,CAAK,IAAA,IAAA,CAAK,UAAU,CAAE,CAAA,KAAA,CAAA;AAAA,GAChF;AAAA,EAMA,SAAS,EAAe,EAAA;AACtB,IAAA,IAAI,CAAC,IAAA,CAAK,gBAAiB,CAAA,QAAA,CAAS,EAAE,CAAG,EAAA;AACvC,MAAK,IAAA,CAAA,gBAAA,CAAiB,KAAK,EAAE,CAAA,CAAA;AAAA,KAC/B;AAAA,GACF;AAAA,EAKA,aAAgB,GAAA;AACd,IAAA,IAAA,CAAK,gBAAiB,CAAA,OAAA,CAAQ,CAAC,CAAA,KAAM,GAAG,CAAA,CAAA;AAAA,GAC1C;AAAA,EAKA,QAAW,GAAA;AACT,IAAA,OAAO,GAAG,IAAK,CAAA,WAAA,CAAY,QAAQ,IAAK,CAAA,QAAA,CAAS,KAAK,IAAI,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAC5D;AACF;;ACnYe,oBAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,iBAAiB,CAAC,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAM,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,aAAa,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,EAAC;;ACO98G,MAAO,CAAA,CAAC,WAAW,CAAC,CAAA,CAAA;AAQpB,MAAM,SAAY,GAAA,CAAC,CAAG,EAAA,GAAA,EAAK,GAAQ,KAAA;AACjC,EAAM,MAAA,GAAA,GAAM,MAAM,CAAC,CAAA,CAAA;AACnB,EAAA,MAAM,OAAO,GAAM,GAAA,GAAA,CAAA;AACnB,EAAI,IAAA,CAAA,GAAI,MAAM,MAAO,CAAA,UAAA,CAAW,GAAG,CAAG,CAAA,CAAA,CAAA,EAAG,KAAK,GAAG,CAAA,CAAA;AACjD,EAAA,IAAI,GAAK,EAAA;AACP,IAAA,CAAA,GAAI,OAAO,QAAS,CAAA,EAAA,GAAK,CAAI,GAAA,GAAA,EAAK,EAAE,CAAI,GAAA,GAAA,CAAA;AAAA,GAC1C;AACA,EAAO,OAAA,IAAA,CAAK,IAAI,CAAI,GAAA,GAAG,IAAI,IAAO,GAAA,CAAA,GAAK,IAAI,IAAQ,GAAA,IAAA,CAAA;AACrD,CAAA,CAAA;AA8BA,MAAqB,KAAM,CAAA;AAAA,EAClB,CAAA,CAAA;AAAA,EACA,CAAA,CAAA;AAAA,EACA,CAAA,CAAA;AAAA,EACA,CAAA,CAAA;AAAA,EASP,WAAA,CAAY,IAAuB,GAAK,EAAA,CAAA,EAAY,GAAY,CAAI,GAAA,CAAA,EAAG,eAAe,KAAO,EAAA;AAC3F,IAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AACT,IAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AACT,IAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AACT,IAAA,IAAA,CAAK,CAAI,GAAA,CAAA,CAAA;AAKT,IAAA,IAAI,OAAQ,CAAA,CAAC,CAAK,IAAA,OAAA,CAAQ,CAAC,CAAG,EAAA;AAE5B,MAAA,IAAI,QAAS,CAAA,CAAC,CAAK,IAAA,CAAA,IAAK,GAAK,EAAA;AAC3B,QAAA,IAAA,CAAK,QAAQ,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,IAAA,CAAK,GAAG,YAAY,CAAA,CAAA;AAAA,OACrC,MAAA;AAEL,QAAA,MAAM,GAAM,GAAA,MAAA,CAAO,CAAa,CAAA,CAAE,KAAM,EAAA,CAAA;AACxC,QAAA,IAAI,GAAK,EAAA;AACP,UAAK,IAAA,CAAA,OAAA,CAAQ,IAAI,CAAG,EAAA,GAAA,CAAI,GAAG,GAAI,CAAA,CAAA,EAAG,IAAI,CAAC,CAAA,CAAA;AAAA,SAClC,MAAA;AACL,UAAA,OAAA,CAAQ,MAAM,2BAA4B,CAAA,MAAA,CAAO,OAAO,CAAC,CAAA,EAAG,YAAY,CAAC,CAAA,CAAA;AAAA,SAC3E;AAAA,OACF;AAAA,KACK,MAAA;AACL,MAAA,IAAA,CAAK,OAAQ,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAAA,KACzB;AAAA,GACF;AAAA,EAMA,UAAU,CAAa,EAAA;AACrB,IAAA,MAAM,KAAQ,GAAA,MAAA,CAAO,CAAC,CAAA,CAAE,KAAM,EAAA,CAAA;AAC9B,IAAO,OAAA,IAAA,CAAK,QAAQ,KAAM,CAAA,CAAA,EAAG,MAAM,CAAG,EAAA,KAAA,CAAM,CAAG,EAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AAAA,GACxD;AAAA,EASA,OAAQ,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA;AACtB,IAAA,MAAM,QAAQ,MAAO,CAAA;AAAA,MACnB,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,KACD,EAAE,KAAM,EAAA,CAAA;AACT,IAAO,OAAA,IAAA,CAAK,QAAQ,KAAM,CAAA,CAAA,EAAG,MAAM,CAAG,EAAA,KAAA,CAAM,CAAG,EAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AAAA,GACxD;AAAA,EASA,OAAQ,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,IAAI,CAAG,EAAA;AACtB,IAAA,MAAM,QAAQ,MAAO,CAAA;AAAA,MACnB,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,KACD,EAAE,KAAM,EAAA,CAAA;AACT,IAAO,OAAA,IAAA,CAAK,QAAQ,KAAM,CAAA,CAAA,EAAG,MAAM,CAAG,EAAA,KAAA,CAAM,CAAG,EAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AAAA,GACxD;AAAA,EAQA,MAAA,CAAO,CAAW,EAAA,CAAA,EAAW,CAAW,EAAA;AACtC,IAAA,IAAA,CAAK,OAAQ,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,KAAK,CAAC,CAAA,CAAA;AAC5B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAUA,OAAQ,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,YAAwB,EAAA;AAC1C,IAAA,IAAA,CAAK,IAAI,YAAe,GAAA,CAAA,GAAI,SAAU,CAAA,CAAA,EAAG,GAAG,GAAG,CAAA,CAAA;AAC/C,IAAA,IAAA,CAAK,IAAI,YAAe,GAAA,CAAA,GAAI,SAAU,CAAA,CAAA,EAAG,GAAG,GAAG,CAAA,CAAA;AAC/C,IAAA,IAAA,CAAK,IAAI,YAAe,GAAA,CAAA,GAAI,SAAU,CAAA,CAAA,EAAG,GAAG,GAAG,CAAA,CAAA;AAC/C,IAAA,IAAA,CAAK,SAAS,CAAC,CAAA,CAAA;AACf,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,SAAS,KAAO,EAAA;AACd,IAAA,IAAI,QAAQ,CAAG,EAAA;AACb,MAAA,IAAA,CAAK,CAAI,GAAA,SAAA,CAAU,KAAO,EAAA,CAAA,EAAG,GAAG,CAAA,CAAA;AAAA,KAC3B,MAAA;AACL,MAAA,IAAA,CAAK,CAAI,GAAA,KAAA,CAAA;AAAA,KACX;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,KAAQ,GAAA;AACN,IAAA,OAAO,MAAO,CAAA,IAAA,CAAK,QAAS,EAAC,EAAE,KAAM,EAAA,CAAA;AAAA,GACvC;AAAA,EAKA,KAAQ,GAAA;AACN,IAAA,OAAO,MAAO,CAAA,IAAA,CAAK,QAAS,EAAC,EAAE,KAAM,EAAA,CAAA;AAAA,GACvC;AAAA,EAKA,KAAQ,GAAA;AACN,IAAA,OAAO,MAAO,CAAA,IAAA,CAAK,QAAS,EAAC,EAAE,KAAM,EAAA,CAAA;AAAA,GACvC;AAAA,EAMA,QAAA,CAAS,eAAe,KAAO,EAAA;AAC7B,IAAM,MAAA,CAAA,GAAI,eAAe,CAAI,GAAA,GAAA,CAAA;AAC7B,IAAO,OAAA;AAAA,MACL,CAAA,EAAG,KAAK,CAAI,GAAA,CAAA;AAAA,MACZ,CAAA,EAAG,KAAK,CAAI,GAAA,CAAA;AAAA,MACZ,CAAA,EAAG,KAAK,CAAI,GAAA,CAAA;AAAA,MACZ,GAAG,IAAK,CAAA,CAAA;AAAA,KACV,CAAA;AAAA,GACF;AAAA,EAKA,OAAU,GAAA;AACR,IAAO,OAAA,CAAC,KAAK,CAAG,EAAA,IAAA,CAAK,GAAG,IAAK,CAAA,CAAA,EAAG,KAAK,CAAC,CAAA,CAAA;AAAA,GACxC;AAAA,EAKA,QAAW,GAAA;AACT,IAAA,OAAO,IAAI,OAAQ,EAAA,CAAE,SAAU,CAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AAAA,GAC/C;AAAA,EAKA,SAAY,GAAA;AACV,IAAA,OAAO,IAAI,OAAQ,EAAA,CAAE,SAAU,CAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AAAA,GAC/C;AAAA,EAKA,QAAW,GAAA;AACT,IAAO,OAAA,CAAA,EAAG,IAAK,CAAA,WAAA,CAAY,IAAQ,CAAA,CAAA,EAAA,IAAA,CAAK,MAAM,IAAK,CAAA,CAAA,CAAA,EAAA,EAAM,IAAK,CAAA,CAAA,CAAA,EAAA,EAAM,IAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAC3E;AACF;;ACzOA,MAAqB,yBAAyB,OAAQ,CAAA;AAAA,EAWpD,QAAQ,IAAM,EAAA,IAAA,EAAM,OAAO,GAAK,EAAA,MAAA,EAAQ,MAAM,GAAK,EAAA;AACjD,IAAA,OAAA,CAAQ,KAAK,QAAU,EAAA,IAAA,EAAM,OAAO,MAAQ,EAAA,GAAA,EAAK,MAAM,GAAG,CAAA,CAAA;AAC1D,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAWA,aAAa,IAAM,EAAA,KAAA,EAAO,GAAK,EAAA,MAAA,EAAQ,MAAM,GAAK,EAAA;AAChD,IAAA,KAAA,CAAM,KAAK,QAAU,EAAA,IAAA,EAAM,OAAO,MAAQ,EAAA,GAAA,EAAK,MAAM,GAAG,CAAA,CAAA;AACxD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EASA,WAAY,CAAA,IAAA,EAAM,MAAQ,EAAA,IAAA,EAAM,GAAK,EAAA;AACnC,IAAA,WAAA,CAAY,IAAK,CAAA,QAAA,EAAU,IAAM,EAAA,MAAA,EAAQ,MAAM,GAAG,CAAA,CAAA;AAClD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAQA,MAAO,CAAA,GAAA,EAAK,MAAS,GAAA,IAAI,QAAQ,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,EAAG,KAAK,IAAI,OAAA,CAAQ,CAAG,EAAA,CAAA,EAAG,CAAC,CAAG,EAAA;AACpE,IAAA,MAAA,CAAO,KAAK,QAAU,EAAA,GAAA,CAAI,UAAU,MAAO,CAAA,QAAA,EAAU,GAAG,QAAQ,CAAA,CAAA;AAChE,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,QAAmB,GAAA;AACjB,IAAA,OAAO,GAAG,IAAK,CAAA,WAAA,CAAY,QAAQ,IAAK,CAAA,QAAA,CAAS,KAAK,IAAI,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAC5D;AACF;;ACvDA,MAAqB,QAAS,CAAA;AAAA,EAIrB,OAAA,CAAA;AAAA,EAKA,WAAA,CAAA;AAAA,EAKA,WAAA,CAAA;AAAA,EAKA,gBAAA,CAAA;AAAA,EAKA,QAAA,CAAA;AAAA,EAKA,KAAA,CAAA;AAAA,EAKA,QAAA,CAAA;AAAA,EAKA,UAAA,CAAA;AAAA,EAKA,EAAA,CAAA;AAAA,EAKA,QAAA,CAAA;AAAA,EAKA,MAAA,CAAA;AAAA,EAKA,sBAAA,CAAA;AAAA,EAEP,WAAc,GAAA;AACZ,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AACf,IAAK,IAAA,CAAA,WAAA,GAAc,IAAI,gBAAiB,EAAA,CAAA;AACxC,IAAK,IAAA,CAAA,WAAA,GAAc,IAAI,gBAAiB,EAAA,CAAA;AACxC,IAAA,IAAA,CAAK,gBAAmB,GAAA,IAAA,CAAA;AACxB,IAAK,IAAA,CAAA,QAAA,GAAW,IAAI,OAAQ,EAAA,CAAA;AAC5B,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAI,OAAQ,CAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAChC,IAAK,IAAA,CAAA,QAAA,GAAW,IAAI,KAAM,EAAA,CAAA;AAC1B,IAAK,IAAA,CAAA,UAAA,GAAa,IAAI,UAAW,EAAA,CAAA;AACjC,IAAA,IAAA,CAAK,EAAK,GAAA,IAAI,OAAQ,CAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAC7B,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AACd,IAAA,IAAA,CAAK,WAAW,EAAC,CAAA;AACjB,IAAA,IAAA,CAAK,sBAAyB,GAAA,KAAA,CAAA;AAC9B,IAAK,IAAA,CAAA,QAAA,CAAS,SAAS,MAAM;AAC3B,MAAK,IAAA,CAAA,UAAA,CAAW,SAAU,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAAA,KACxC,CAAA,CAAA;AACD,IAAK,IAAA,CAAA,UAAA,CAAW,SAAS,MAAM;AAC7B,MAAK,IAAA,CAAA,QAAA,CAAS,cAAe,CAAA,IAAA,CAAK,UAAU,CAAA,CAAA;AAAA,KAC7C,CAAA,CAAA;AAAA,GACH;AAAA,EAOA,GAAA,CAAI,MAAkB,EAAA,WAAA,GAAc,IAAM,EAAA;AACxC,IAAA,IAAI,CAAC,IAAA,CAAK,QAAS,CAAA,MAAM,CAAG,EAAA;AAC1B,MAAK,IAAA,CAAA,QAAA,CAAS,KAAK,MAAM,CAAA,CAAA;AAAA,KAC3B;AACA,IAAA,IAAI,WAAa,EAAA;AACf,MAAO,MAAA,CAAA,SAAA,CAAU,MAAM,KAAK,CAAA,CAAA;AAAA,KAC9B;AAAA,GACF;AAAA,EAOA,MAAA,CAAO,MAAkB,EAAA,WAAA,GAAc,IAAM,EAAA;AAC3C,IAAI,IAAA,IAAA,CAAK,QAAS,CAAA,MAAM,CAAG,EAAA;AACzB,MAAA,IAAA,CAAK,SAAS,MAAO,CAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAM,GAAG,CAAC,CAAA,CAAA;AAAA,KACvD;AACA,IAAA,IAAI,WAAa,EAAA;AACf,MAAO,MAAA,CAAA,SAAA,CAAU,MAAM,KAAK,CAAA,CAAA;AAAA,KAC9B;AAAA,GACF;AAAA,EAMA,SAAS,MAAkB,EAAA;AACzB,IAAO,OAAA,IAAA,CAAK,QAAS,CAAA,QAAA,CAAS,MAAM,CAAA,CAAA;AAAA,GACtC;AAAA,EAOA,SAAA,CAAU,MAAQ,EAAA,YAAA,GAAe,IAAM,EAAA;AACrC,IAAA,IAAI,IAAK,CAAA,MAAA,IAAU,MAAW,KAAA,IAAA,CAAK,MAAQ,EAAA;AACzC,MAAK,IAAA,CAAA,MAAA,CAAO,MAAO,CAAA,IAAA,EAAM,KAAK,CAAA,CAAA;AAAA,KAChC;AACA,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAA,IAAI,gBAAgB,MAAQ,EAAA;AAC1B,MAAO,MAAA,CAAA,GAAA,CAAI,MAAM,KAAK,CAAA,CAAA;AAAA,KACxB;AAAA,GACF;AAAA,EAMA,SAAS,QAAU,EAAA;AACjB,IAAI,IAAA,CAAC,QAAS,CAAA,IAAI,CAAG,EAAA;AACnB,MAAS,KAAA,IAAA,CAAA,GAAI,GAAG,CAAI,GAAA,IAAA,CAAK,SAAS,MAAQ,EAAA,CAAA,GAAI,GAAG,CAAK,EAAA,EAAA;AACpD,QAAK,IAAA,CAAA,QAAA,CAAS,CAAG,CAAA,CAAA,QAAA,CAAS,QAAQ,CAAA,CAAA;AAAA,OACpC;AAAA,KACF;AAAA,GACF;AAAA,EAOA,MAAA,CAAO,KAAc,MAAkB,EAAA;AACrC,IAAA,IAAI,MAAQ,EAAA;AACV,MAAA,IAAA,CAAK,YAAY,MAAO,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,EAAK,KAAK,EAAE,CAAA,CAAA;AAAA,KAC9C,MAAA;AACL,MAAA,IAAA,CAAK,YAAY,MAAO,CAAA,GAAA,EAAK,IAAK,CAAA,QAAA,EAAU,KAAK,EAAE,CAAA,CAAA;AAAA,KACrD;AACA,IAAK,IAAA,CAAA,WAAA,CAAY,WAAY,CAAA,IAAA,CAAK,UAAU,CAAA,CAAA;AAC5C,IAAK,IAAA,CAAA,QAAA,CAAS,cAAe,CAAA,IAAA,CAAK,UAAU,CAAA,CAAA;AAAA,GAC9C;AAAA,EAMA,kBAAkB,KAAiB,EAAA;AACjC,IAAA,IAAI,CAAI,GAAA,KAAA,CAAA;AACR,IAAA,IAAI,KAAK,gBAAkB,EAAA;AACzB,MAAA,IAAA,CAAK,YAAa,EAAA,CAAA;AAAA,KACpB;AACA,IAAI,IAAA,IAAA,CAAK,0BAA0B,CAAG,EAAA;AACpC,MAAI,IAAA,IAAA,CAAK,WAAW,IAAM,EAAA;AACxB,QAAK,IAAA,CAAA,WAAA,CAAY,IAAK,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AAAA,OACjC,MAAA;AACL,QAAA,IAAA,CAAK,YAAY,QAAS,CAAA,IAAA,CAAK,MAAO,CAAA,WAAA,EAAa,KAAK,WAAW,CAAA,CAAA;AAAA,OACrE;AAEA,MAAA,IAAA,CAAK,sBAAyB,GAAA,KAAA,CAAA;AAC9B,MAAI,CAAA,GAAA,IAAA,CAAA;AAAA,KACN;AAEA,IAAS,KAAA,IAAA,CAAA,GAAI,GAAG,CAAI,GAAA,IAAA,CAAK,SAAS,MAAQ,EAAA,CAAA,GAAI,GAAG,CAAK,EAAA,EAAA;AACpD,MAAM,MAAA,KAAA,GAAQ,KAAK,QAAS,CAAA,CAAA,CAAA,CAAA;AAE5B,MAAA,KAAA,CAAM,kBAAkB,CAAC,CAAA,CAAA;AAAA,KAC3B;AAAA,GACF;AAAA,EAKA,YAAe,GAAA;AACb,IAAA,IAAA,CAAK,YAAY,OAAQ,CAAA,IAAA,CAAK,UAAU,IAAK,CAAA,UAAA,EAAY,KAAK,KAAK,CAAA,CAAA;AACnE,IAAA,IAAA,CAAK,sBAAyB,GAAA,IAAA,CAAA;AAAA,GAChC;AAAA,EAKA,SAAY,GAAA;AACV,IAAK,IAAA,CAAA,WAAA,CAAY,cAAe,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAC7C,IAAK,IAAA,CAAA,WAAA,CAAY,WAAY,CAAA,IAAA,CAAK,UAAU,CAAA,CAAA;AAC5C,IAAK,IAAA,CAAA,WAAA,CAAY,QAAS,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AACpC,IAAK,IAAA,CAAA,QAAA,CAAS,cAAe,CAAA,IAAA,CAAK,UAAU,CAAA,CAAA;AAAA,GAC9C;AAAA,EAKA,KAAQ,GAAA;AACN,IAAA,OAAO,IAAI,QAAA,EAAW,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA,CAAA;AAAA,GACxC;AAAA,EAOA,IAAA,CAAK,QAAkB,SAAqB,EAAA;AAC1C,IAAA,IAAA,CAAK,UAAU,MAAO,CAAA,OAAA,CAAA;AACtB,IAAK,IAAA,CAAA,QAAA,CAAS,IAAK,CAAA,MAAA,CAAO,QAAQ,CAAA,CAAA;AAClC,IAAK,IAAA,CAAA,KAAA,CAAM,IAAK,CAAA,MAAA,CAAO,KAAK,CAAA,CAAA;AAC5B,IAAK,IAAA,CAAA,QAAA,CAAS,IAAK,CAAA,MAAA,CAAO,QAAQ,CAAA,CAAA;AAClC,IAAK,IAAA,CAAA,UAAA,CAAW,IAAK,CAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AACtC,IAAK,IAAA,CAAA,EAAA,CAAG,IAAK,CAAA,MAAA,CAAO,EAAE,CAAA,CAAA;AACtB,IAAK,IAAA,CAAA,WAAA,CAAY,IAAK,CAAA,MAAA,CAAO,WAAW,CAAA,CAAA;AACxC,IAAK,IAAA,CAAA,WAAA,CAAY,IAAK,CAAA,MAAA,CAAO,WAAW,CAAA,CAAA;AACxC,IAAA,IAAA,CAAK,mBAAmB,MAAO,CAAA,gBAAA,CAAA;AAE/B,IAAA,IAAI,SAAW,EAAA;AACb,MAAS,KAAA,IAAA,CAAA,GAAI,GAAG,CAAI,GAAA,MAAA,CAAO,SAAS,MAAQ,EAAA,CAAA,GAAI,GAAG,CAAK,EAAA,EAAA;AACtD,QAAM,MAAA,QAAA,GAAW,OAAO,QAAS,CAAA,CAAA,CAAA,CAAA;AACjC,QAAK,IAAA,CAAA,GAAA,CAAI,QAAS,CAAA,KAAA,EAAO,CAAA,CAAA;AAAA,OAC3B;AAAA,KACF;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AACF;;AChPA,MAAqB,IAAK,CAAA;AAAA,EACjB,QAAA,CAAA;AAAA,EAEP,YAAY,QAAoB,EAAA;AAC9B,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAAA,GAClB;AAAA,EAKA,IAAI,EAAqD,GAAA;AACvD,IAAA,OAAO,KAAK,QAAS,CAAA,EAAA,CAAA;AAAA,GACvB;AAAA,EAKA,IAAI,aAAgB,GAAA;AAClB,IAAA,OAAO,KAAK,QAAS,CAAA,KAAA,CAAA;AAAA,GACvB;AACF;;ACiEA,MAAM,aAAA,GAAgB,CAAC,EAAA,EAAI,IAAS,KAAA;AAClC,EAAI,IAAA,IAAA,YAAgB,YAAgB,IAAA,IAAA,YAAgB,YAAc,EAAA;AAChE,IAAA,OAAO,EAAG,CAAA,KAAA,CAAA;AAAA,GACZ;AAEA,EAAA,IAAI,gBAAgB,WAAa,EAAA;AAC/B,IAAA,OAAO,EAAG,CAAA,cAAA,CAAA;AAAA,GACZ;AAEA,EAAI,IAAA,IAAA,YAAgB,UAAc,IAAA,IAAA,YAAgB,iBAAmB,EAAA;AACnE,IAAA,OAAO,EAAG,CAAA,aAAA,CAAA;AAAA,GACZ;AAEA,EAAA,IAAI,gBAAgB,WAAa,EAAA;AAC/B,IAAA,OAAO,EAAG,CAAA,YAAA,CAAA;AAAA,GACZ;AAEA,EAAA,IAAI,gBAAgB,SAAW,EAAA;AAC7B,IAAA,OAAO,EAAG,CAAA,IAAA,CAAA;AAAA,GACZ;AAEA,EAAA,IAAI,gBAAgB,UAAY,EAAA;AAC9B,IAAA,OAAO,EAAG,CAAA,KAAA,CAAA;AAAA,GACZ;AAEA,EAAA,IAAI,gBAAgB,UAAY,EAAA;AAC9B,IAAA,OAAO,EAAG,CAAA,GAAA,CAAA;AAAA,GACZ;AACF,CAAA,CAAA;AAKA,MAAqB,eAAgB,CAAA;AAAA,EAI5B,EAAA,CAAA;AAAA,EAKA,IAAA,CAAA;AAAA,EAKA,IAAA,CAAA;AAAA,EAKA,IAAA,CAAA;AAAA,EAKA,SAAA,CAAA;AAAA,EAKA,MAAA,CAAA;AAAA,EAKA,MAAA,CAAA;AAAA,EAKA,OAAA,CAAA;AAAA,EAKA,UAAA,CAAA;AAAA,EAKA,WAAA,CAAA;AAAA,EAKA,KAAA,CAAA;AAAA,EAMA,KAAA,CAAA;AAAA,EAKA,MAAA,CAAA;AAAA,EAKA,MAAA,CAAA;AAAA,EAEP,WAAA,CAAY,UAAoB,SAAsB,EAAA;AACpD,IAAA,MAAM,OAAO,MAAO,CAAA,MAAA;AAAA,MAClB,EAAC;AAAA,MACD;AAAA,QACE,IAAM,EAAA,CAAA;AAAA,QACN,UAAY,EAAA,IAAA;AAAA,QACZ,MAAQ,EAAA,CAAA;AAAA,QACR,MAAQ,EAAA,CAAA;AAAA,QACR,OAAS,EAAA,CAAA;AAAA,QACT,KAAA,EAAO,SAAS,EAAG,CAAA,WAAA;AAAA,OACrB;AAAA,MACA,SAAA;AAAA,KACF,CAAA;AACA,IAAK,IAAA,CAAA,EAAA,GAAK,IAAI,WAAW,CAAA,CAAA;AACzB,IAAA,IAAA,CAAK,WAAc,GAAA,KAAA,CAAA;AAEnB,IAAA,IAAI,CAAC,SAAU,CAAA,IAAA,IAAQ,MAAM,OAAQ,CAAA,SAAA,CAAU,IAAI,CAAG,EAAA;AACpD,MAAM,MAAA,IAAI,UAAU,+CAA+C,CAAA,CAAA;AAAA,KACrE;AAEA,IAAA,IAAA,CAAK,OAAO,IAAK,CAAA,IAAA,CAAA;AACjB,IAAK,IAAA,CAAA,IAAA,GAAO,KAAK,IAAQ,IAAA,CAAA,CAAA;AACzB,IAAA,IAAA,CAAK,OAAO,IAAK,CAAA,IAAA,IAAQ,cAAc,QAAS,CAAA,EAAA,EAAI,KAAK,IAAI,CAAA,CAAA;AAC7D,IAAK,IAAA,CAAA,UAAA,GAAa,KAAK,UAAc,IAAA,KAAA,CAAA;AACrC,IAAK,IAAA,CAAA,MAAA,GAAS,KAAK,MAAU,IAAA,CAAA,CAAA;AAC7B,IAAK,IAAA,CAAA,MAAA,GAAS,KAAK,MAAU,IAAA,CAAA,CAAA;AAC7B,IAAK,IAAA,CAAA,OAAA,GAAU,KAAK,OAAW,IAAA,CAAA,CAAA;AAC/B,IAAK,IAAA,CAAA,SAAA,GAAY,KAAK,OAAU,GAAA,CAAA,CAAA;AAChC,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,KAAS,IAAA,QAAA,CAAS,EAAG,CAAA,WAAA,CAAA;AAEvC,IAAA,IAAI,KAAK,MAAQ,EAAA;AACf,MAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAA;AAAA,KACrB;AAEA,IAAA,IAAI,QAAQ,IAAK,CAAA,KAAA,CAAA;AACjB,IAAA,IAAI,IAAK,CAAA,KAAA,KAAU,KAAa,CAAA,IAAA,IAAA,CAAK,UAAU,IAAM,EAAA;AACnD,MAAQ,KAAA,GAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,IAAK,CAAA,UAAA,GAAa,KAAK,MAAS,GAAA,IAAA,CAAK,IAAK,CAAA,MAAA,GAAS,IAAK,CAAA,IAAA,CAAA;AAAA,KACrF;AACA,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AAAA,GACf;AACF;;AClOA,MAAM,QAAA,GAAW,IAAI,OAAQ,EAAA,CAAA;AAkC7B,MAAqB,iBAAiB,IAAK,CAAA;AAAA,EACzC,GAAA,CAAA;AAAA,EAEA,WAAA,CAAA;AAAA,EAEA,KAAA,CAAA;AAAA,EAEA,OAAA,CAAA;AAAA,EAEA,SAAA,CAAA;AAAA,EAEA,cAAA,CAAA;AAAA,EAEA,WAAA,CAAA;AAAA,EAEA,QAAA,CAAA;AAAA,EAMA,WAAY,CAAA,QAAA,EAAoB,UAAyB,GAAA,EAAI,EAAA;AAC3D,IAAA,KAAA,CAAM,QAAQ,CAAA,CAAA;AACd,IAAA,IAAA,CAAK,SAAY,GAAA;AAAA,MACf,KAAO,EAAA,CAAA;AAAA,MACP,KAAO,EAAA,CAAA;AAAA,KACT,CAAA;AACA,IAAA,IAAA,CAAK,cAAiB,GAAA,CAAA,CAAA;AACtB,IAAA,IAAA,CAAK,WAAc,GAAA,KAAA,CAAA;AACnB,IAAK,IAAA,CAAA,WAAA,uBAAkB,GAAI,EAAA,CAAA;AAC3B,IAAK,IAAA,CAAA,KAAA,uBAAY,GAAI,EAAA,CAAA;AAErB,IAAK,IAAA,CAAA,GAAA,GAAM,IAAI,UAAU,CAAA,CAAA;AACzB,IAAK,IAAA,CAAA,QAAA,GAAW,KAAK,EAAG,CAAA,SAAA,CAAA;AACxB,IAAA,QAAA,CAAS,gBAAgB,IAAI,CAAA,CAAA;AAC7B,IAAS,QAAA,CAAA,KAAA,CAAM,kBAAkB,IAAI,CAAA,CAAA;AAErC,IAAA,KAAA,MAAW,QAAQ,UAAY,EAAA;AAC7B,MAAA,MAAM,YAAY,UAAW,CAAA,IAAA,CAAA,CAAA;AAC7B,MAAA,IAAI,qBAAqB,eAAiB,EAAA;AACxC,QAAA,IAAI,SAAS,OAAS,EAAA;AACpB,UAAA,IAAA,CAAK,SAAS,SAAS,CAAA,CAAA;AAAA,SAClB,MAAA;AACL,UAAK,IAAA,CAAA,YAAA,CAAa,MAAM,SAAS,CAAA,CAAA;AAAA,SACnC;AAAA,OACK,MAAA;AACL,QAAA,IAAI,UAAU,IAAM,EAAA;AAClB,UAAA,MAAM,CAAI,GAAA,IAAI,eAAgB,CAAA,IAAA,CAAK,UAAU,SAAS,CAAA,CAAA;AACtD,UAAA,IAAI,SAAS,OAAS,EAAA;AACpB,YAAA,IAAA,CAAK,SAAS,CAAC,CAAA,CAAA;AAAA,WACV,MAAA;AACL,YAAK,IAAA,CAAA,YAAA,CAAa,MAAM,CAAC,CAAA,CAAA;AAAA,WAC3B;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,GACF;AAAA,EAKA,IAAI,EAAK,GAAA;AACP,IAAA,OAAO,IAAK,CAAA,GAAA,CAAA;AAAA,GACd;AAAA,EAKA,IAAI,UAAa,GAAA;AACf,IAAA,OAAO,IAAK,CAAA,WAAA,CAAA;AAAA,GACd;AAAA,EAKA,IAAI,cAA6B,GAAA;AAC/B,IAAA,MAAM,aAAyB,EAAC,CAAA;AAChC,IAAM,MAAA,QAAA,GAAW,IAAK,CAAA,WAAA,CAAY,OAAQ,EAAA,CAAA;AAC1C,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,WAAA,CAAY,MAAM,CAAK,EAAA,EAAA;AAC9C,MAAM,MAAA,KAAA,GAAQ,QAAS,CAAA,IAAA,EAAO,CAAA,KAAA,CAAA;AAC9B,MAAA,UAAA,CAAW,KAAM,CAAA,CAAA,CAAA,CAAA,GAAM,IAAqD,CAAA,KAAA,CAAM,CAAI,CAAA,EAAA;AAAA,QACpF,IAAA;AAAA,QACA,QAAA;AAAA,OACD,CAAA,CAAA;AAAA,KACH;AAEA,IAAO,OAAA,UAAA,CAAA;AAAA,GACT;AAAA,EAKA,IAAI,KAAQ,GAAA;AACV,IAAO,OAAA,IAAA,CAAK,UAAW,CAAA,GAAA,CAAI,OAAO,CAAA,CAAA;AAAA,GACpC;AAAA,EAKA,IAAI,MAAS,GAAA;AACX,IAAA,OAAO,IAAK,CAAA,OAAA,CAAA;AAAA,GACd;AAAA,EAMA,IAAI,OAAO,MAAQ,EAAA;AACjB,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AAAA,GACjB;AAAA,EAOA,YAAA,CAAa,MAAc,SAA4B,EAAA;AACrD,IAAI,IAAA,CAAC,UAAU,MAAQ,EAAA;AACrB,MAAA,SAAA,CAAU,SAAS,IAAS,KAAA,OAAA,GAAU,KAAK,EAAG,CAAA,oBAAA,GAAuB,KAAK,EAAG,CAAA,YAAA,CAAA;AAAA,KAC/E;AACA,IAAA,SAAA,CAAU,WAAc,GAAA,KAAA,CAAA;AACxB,IAAK,IAAA,CAAA,UAAA,CAAW,GAAI,CAAA,IAAA,EAAM,SAAS,CAAA,CAAA;AACnC,IAAI,IAAA,CAAC,UAAU,MAAQ,EAAA;AACrB,MAAU,SAAA,CAAA,MAAA,GAAS,IAAK,CAAA,EAAA,CAAG,YAAa,EAAA,CAAA;AACxC,MAAA,IAAA,CAAK,gBAAgB,SAAS,CAAA,CAAA;AAAA,KAChC;AACA,IAAA,IAAI,UAAU,OAAS,EAAA;AACrB,MAAA,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;AACnB,MAAA,IAAI,KAAK,cAAkB,IAAA,IAAA,CAAK,mBAAmB,SAAU,CAAA,KAAA,GAAQ,UAAU,OAAS,EAAA;AACtF,QAAK,IAAA,CAAA,cAAA,GAAiB,KAAK,GAAI,CAAA,IAAA,CAAK,gBAAgB,SAAU,CAAA,KAAA,GAAQ,UAAU,OAAO,CAAA,CAAA;AAEvF,QAAA,OAAO,OAAQ,CAAA,IAAA;AAAA,UACb,iFAAiF,IAAK,CAAA,cAAA,CAAA,SAAA,EAA0B,SAAU,CAAA,KAAA,CAAA,WAAA,EAAmB,UAAU,OAAuB,CAAA,aAAA,EAAA,IAAA,CAAA,CAAA;AAAA,SAChL,CAAA;AAAA,OACF;AACA,MAAK,IAAA,CAAA,cAAA,GAAiB,SAAU,CAAA,KAAA,GAAQ,SAAU,CAAA,OAAA,CAAA;AAAA,KACpD,MAAA,IAAW,SAAS,OAAS,EAAA;AAC3B,MAAK,IAAA,CAAA,SAAA,CAAU,QAAQ,SAAU,CAAA,KAAA,CAAA;AAAA,KACnC,MAAA,IAAW,CAAC,IAAA,CAAK,KAAO,EAAA;AACtB,MAAK,IAAA,CAAA,SAAA,CAAU,QAAQ,IAAK,CAAA,GAAA,CAAI,KAAK,SAAU,CAAA,KAAA,EAAO,UAAU,KAAK,CAAA,CAAA;AAAA,KACvE;AAAA,GACF;AAAA,EAMA,aAAa,IAAM,EAAA;AACjB,IAAO,OAAA,IAAA,CAAK,UAAW,CAAA,GAAA,CAAI,IAAI,CAAA,CAAA;AAAA,GACjC;AAAA,EAOA,gBAAA,CAAiB,MAAM,IAAM,EAAA;AAC3B,IAAM,MAAA,SAAA,GAAY,IAAK,CAAA,YAAA,CAAa,IAAI,CAAA,CAAA;AACxC,IAAA,IAAI,SAAW,EAAA;AACb,MAAA,SAAA,CAAU,IAAO,GAAA,IAAA,CAAA;AACjB,MAAA,SAAA,CAAU,WAAc,GAAA,IAAA,CAAA;AAAA,KAC1B;AAAA,GACF;AAAA,EAMA,gBAAgB,SAAW,EAAA;AACzB,IAAM,MAAA,YAAA,GAAe,CAAC,SAAU,CAAA,MAAA,CAAA;AAChC,IAAA,IAAI,YAAc,EAAA;AAChB,MAAU,SAAA,CAAA,MAAA,GAAS,IAAK,CAAA,EAAA,CAAG,YAAa,EAAA,CAAA;AAAA,KAC1C;AACA,IAAA,IAAI,IAAK,CAAA,aAAA,CAAc,WAAgB,KAAA,SAAA,CAAU,MAAQ,EAAA;AACvD,MAAA,IAAA,CAAK,EAAG,CAAA,UAAA,CAAW,SAAU,CAAA,MAAA,EAAQ,UAAU,MAAM,CAAA,CAAA;AACrD,MAAK,IAAA,CAAA,aAAA,CAAc,cAAc,SAAU,CAAA,MAAA,CAAA;AAAA,KAC7C;AAOA,IAAA,IAAA,CAAK,GAAG,UAAW,CAAA,SAAA,CAAU,QAAQ,SAAU,CAAA,IAAA,EAAM,UAAU,KAAK,CAAA,CAAA;AACpE,IAAA,SAAA,CAAU,WAAc,GAAA,KAAA,CAAA;AAAA,GAC1B;AAAA,EAMA,gBAAgB,SAAW,EAAA;AACzB,IAAK,IAAA,CAAA,UAAA,CAAW,OAAO,SAAS,CAAA,CAAA;AAAA,GAClC;AAAA,EAMA,SAAS,KAAO,EAAA;AACd,IAAA,IAAI,iBAAiB,eAAiB,EAAA;AACpC,MAAA,KAAA,CAAM,IAAO,GAAA,CAAA,CAAA;AACb,MAAK,IAAA,CAAA,YAAA,CAAa,SAAS,KAAK,CAAA,CAAA;AAAA,KAC3B,MAAA;AAEL,MAAA,MAAM,MAAS,GAAA,IAAI,eAAgB,CAAA,IAAA,CAAK,QAAU,EAAA;AAAA,QAChD,IAAA,EAAM,KAAM,CAAA,MAAA,GAAS,KAAQ,GAAA,IAAI,YAAY,KAAK,CAAA,GAAI,IAAI,WAAA,CAAY,KAAK,CAAA;AAAA,QAC3E,IAAM,EAAA,CAAA;AAAA,OACP,CAAA,CAAA;AACD,MAAK,IAAA,CAAA,YAAA,CAAa,SAAS,MAAM,CAAA,CAAA;AAAA,KACnC;AACA,IAAK,IAAA,CAAA,SAAA,CAAU,KAAQ,GAAA,IAAA,CAAK,KAAO,EAAA,KAAA,CAAA;AAAA,GACrC;AAAA,EAMA,YAAY,IAAM,EAAA;AAChB,IAAA,MAAM,QAAkB,EAAC,CAAA;AACzB,IAAA,MAAM,MAAM,IAAK,CAAA,MAAA,CAAA;AACjB,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,GAAA,EAAK,CAAK,EAAA,EAAA;AAC5B,MAAA,MAAM,OAAiB,IAAK,CAAA,CAAA,CAAA,CAAA;AAC5B,MAAA,KAAA,CAAM,KAAK,IAAK,CAAA,CAAA,CAAA,EAAI,IAAK,CAAA,CAAA,CAAA,EAAI,KAAK,CAAE,CAAA,CAAA,CAAA;AAAA,KACtC;AACA,IAAK,IAAA,CAAA,YAAA;AAAA,MACH,UAAA;AAAA,MACA,IAAI,eAAgB,CAAA,IAAA,CAAK,QAAU,EAAA;AAAA,QACjC,IAAA,EAAM,IAAI,YAAA,CAAa,KAAK,CAAA;AAAA,QAC5B,IAAM,EAAA,CAAA;AAAA,OACP,CAAA;AAAA,KACH,CAAA;AAAA,GACF;AAAA,EAMA,WAAW,IAAM,EAAA;AACf,IAAK,IAAA,CAAA,YAAA;AAAA,MACH,QAAA;AAAA,MACA,IAAI,eAAgB,CAAA,IAAA,CAAK,QAAU,EAAA;AAAA,QACjC,IAAA,EAAM,IAAI,YAAA,CAAa,IAAI,CAAA;AAAA,QAC3B,IAAM,EAAA,CAAA;AAAA,OACP,CAAA;AAAA,KACH,CAAA;AAAA,GACF;AAAA,EAMA,OAAO,IAAM,EAAA;AACX,IAAK,IAAA,CAAA,YAAA;AAAA,MACH,IAAA;AAAA,MACA,IAAI,eAAgB,CAAA,IAAA,CAAK,QAAU,EAAA;AAAA,QACjC,IAAA,EAAM,IAAI,YAAA,CAAa,IAAI,CAAA;AAAA,QAC3B,IAAM,EAAA,CAAA;AAAA,OACP,CAAA;AAAA,KACH,CAAA;AAAA,GACF;AAAA,EAMA,UAAU,MAAwE,EAAA;AAChF,IAAA,MAAM,OAAiB,EAAC,CAAA;AACxB,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,CAAO,QAAQ,CAAK,EAAA,EAAA;AACtC,MAAA,IAAI,QAAQ,MAAO,CAAA,CAAA,CAAA,CAAA;AACnB,MAAA,IAAI,KAAU,KAAA,KAAA,YAAiB,OAAW,IAAA,KAAA,YAAiB,OAAU,CAAA,EAAA;AACnE,QAAA,KAAA,GAAQ,MAAM,OAAQ,EAAA,CAAA;AAAA,OACxB;AACA,MAAK,IAAA,CAAA,IAAA,CAAK,MAAM,CAAI,CAAA,EAAA,KAAA,CAAM,IAAI,KAAM,CAAA,CAAA,CAAA,EAAI,KAAM,CAAA,CAAA,CAAA,IAAM,CAAC,CAAA,CAAA;AAAA,KACvD;AACA,IAAK,IAAA,CAAA,YAAA;AAAA,MACH,OAAA;AAAA,MACA,IAAI,eAAgB,CAAA,IAAA,CAAK,QAAU,EAAA;AAAA,QACjC,IAAA,EAAM,IAAI,YAAA,CAAa,IAAI,CAAA;AAAA,QAC3B,IAAM,EAAA,CAAA;AAAA,OACP,CAAA;AAAA,KACH,CAAA;AAAA,GACF;AAAA,EAOA,YAAA,CAAa,OAAe,KAAe,EAAA;AACzC,IAAA,IAAA,CAAK,UAAU,KAAQ,GAAA,KAAA,CAAA;AACvB,IAAA,IAAA,CAAK,UAAU,KAAQ,GAAA,KAAA,CAAA;AAAA,GACzB;AAAA,EAMA,kBAAkB,KAAe,EAAA;AAC/B,IAAA,IAAA,CAAK,cAAiB,GAAA,KAAA,CAAA;AAAA,GACxB;AAAA,EAMA,UAAU,OAAkB,EAAA;AAC1B,IAAM,MAAA,EAAE,gBAAmB,GAAA,OAAA,CAAA;AAC3B,IAAM,MAAA,GAAA,GAAM,IAAK,CAAA,QAAA,CAAS,iBAAkB,EAAA,CAAA;AAC5C,IAAK,IAAA,CAAA,QAAA,CAAS,gBAAgB,GAAG,CAAA,CAAA;AACjC,IAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,cAAA,EAAgB,GAAG,CAAA,CAAA;AAClC,IAAA,IAAA,CAAK,eAAe,OAAO,CAAA,CAAA;AAAA,GAC7B;AAAA,EAOA,eAAe,OAAkB,EAAA;AAC/B,IAAA,OAAA,CAAQ,mBAAmB,OAAQ,CAAA,CAAC,UAAU,EAAE,IAAA,EAAM,MAAW,KAAA;AAC/D,MAAA,MAAM,UAAa,GAAA,IAAA,CAAK,UAAW,CAAA,GAAA,CAAI,IAAI,CAAA,CAAA;AAC3C,MAAA,IAAI,CAAC,UAAA;AAAY,QAAA,OAAA;AACjB,MAAA,IAAA,CAAK,EAAG,CAAA,UAAA,CAAW,UAAW,CAAA,MAAA,EAAQ,WAAW,MAAM,CAAA,CAAA;AACvD,MAAK,IAAA,CAAA,aAAA,CAAc,cAAc,UAAW,CAAA,MAAA,CAAA;AAC5C,MAAA,IAAI,MAAS,GAAA,CAAA,CAAA;AACb,MAAI,IAAA,IAAA,KAAS,KAAK,EAAG,CAAA,UAAA;AAAY,QAAS,MAAA,GAAA,CAAA,CAAA;AAC1C,MAAI,IAAA,IAAA,KAAS,KAAK,EAAG,CAAA,UAAA;AAAY,QAAS,MAAA,GAAA,CAAA,CAAA;AAC1C,MAAI,IAAA,IAAA,KAAS,KAAK,EAAG,CAAA,UAAA;AAAY,QAAS,MAAA,GAAA,CAAA,CAAA;AAE1C,MAAM,MAAA,IAAA,GAAO,WAAW,IAAO,GAAA,MAAA,CAAA;AAC/B,MAAA,MAAM,MAAS,GAAA,MAAA,KAAW,CAAI,GAAA,CAAA,GAAI,SAAS,MAAS,GAAA,MAAA,CAAA;AACpD,MAAA,MAAM,MAAS,GAAA,MAAA,KAAW,CAAI,GAAA,CAAA,GAAI,MAAS,GAAA,MAAA,CAAA;AAE3C,MAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,EAAQ,CAAK,EAAA,EAAA;AAC/B,QAAA,MAAM,cAAc,QAAW,GAAA,CAAA,CAAA;AAC/B,QAAA,IAAA,CAAK,EAAG,CAAA,mBAAA;AAAA,UACN,WAAA;AAAA,UACA,IAAA;AAAA,UACA,UAAW,CAAA,IAAA;AAAA,UACX,UAAW,CAAA,UAAA;AAAA,UACX,WAAW,MAAS,GAAA,MAAA;AAAA,UACpB,WAAW,MAAS,GAAA,MAAA;AAAA,SACtB,CAAA;AACA,QAAK,IAAA,CAAA,EAAA,CAAG,wBAAwB,WAAW,CAAA,CAAA;AAC3C,QAAA,IAAA,CAAK,QAAS,CAAA,mBAAA,CAAoB,WAAa,EAAA,UAAA,CAAW,OAAO,CAAA,CAAA;AAAA,OACnE;AAAA,KACD,CAAA,CAAA;AACD,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,UAAW,CAAA,GAAA,CAAI,OAAO,CAAA,CAAA;AACzC,IAAA,IAAI,KAAO,EAAA;AACT,MAAA,IAAA,CAAK,GAAG,UAAW,CAAA,IAAA,CAAK,EAAG,CAAA,oBAAA,EAAsB,MAAM,MAAM,CAAA,CAAA;AAAA,KAC/D;AAAA,GACF;AAAA,EAMA,mBAAmB,QAAgC,EAAA;AACjD,IAAM,MAAA,EAAE,IAAM,EAAA,MAAA,GAAS,CAAG,EAAA,MAAA,EAAQ,MAAS,GAAA,IAAA,CAAK,UAAW,CAAA,GAAA,CAAI,UAAU,CAAA,CAAA;AACzE,IAAI,IAAA,CAAC,KAAK,OAAS,EAAA;AACjB,MAAA,IAAA,CAAK,OAAU,GAAA;AAAA,QACb,GAAA,EAAK,IAAI,OAAQ,EAAA;AAAA,QACjB,GAAA,EAAK,IAAI,OAAQ,EAAA;AAAA,QACjB,MAAA,EAAQ,IAAI,OAAQ,EAAA;AAAA,QACpB,KAAA,EAAO,IAAI,OAAQ,EAAA;AAAA,QACnB,QAAQ,MAAO,CAAA,iBAAA;AAAA,OACjB,CAAA;AAAA,KACF;AACA,IAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,SAAU,CAAA,CAAC,OAAO,iBAAiB,CAAA,CAAA;AACpD,IAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,SAAU,CAAA,MAAA,CAAO,iBAAiB,CAAA,CAAA;AACnD,IAAA,MAAM,QAAQ,QAAY,IAAA,IAAA,CAAA;AAC1B,IAAA,MAAM,KAAK,MAAU,IAAA,IAAA,CAAA;AACrB,IAAA,KAAA,IAAS,IAAI,MAAQ,EAAA,CAAA,GAAI,KAAM,CAAA,MAAA,EAAQ,KAAK,EAAI,EAAA;AAC9C,MAAM,MAAA,CAAA,GAAI,MAAM,CAAI,GAAA,CAAA,CAAA,CAAA;AACpB,MAAM,MAAA,CAAA,GAAI,MAAM,CAAI,GAAA,CAAA,CAAA,CAAA;AACpB,MAAM,MAAA,CAAA,GAAI,MAAM,CAAI,GAAA,CAAA,CAAA,CAAA;AACpB,MAAK,IAAA,CAAA,OAAA,CAAQ,IAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAG,EAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,CAAC,CAAA,CAAA;AACnD,MAAK,IAAA,CAAA,OAAA,CAAQ,IAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAG,EAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,CAAC,CAAA,CAAA;AACnD,MAAK,IAAA,CAAA,OAAA,CAAQ,IAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAG,EAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,CAAC,CAAA,CAAA;AACnD,MAAK,IAAA,CAAA,OAAA,CAAQ,IAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAG,EAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,CAAC,CAAA,CAAA;AACnD,MAAK,IAAA,CAAA,OAAA,CAAQ,IAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAG,EAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,CAAC,CAAA,CAAA;AACnD,MAAK,IAAA,CAAA,OAAA,CAAQ,IAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAG,EAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,CAAC,CAAA,CAAA;AAAA,KACrD;AACA,IAAK,IAAA,CAAA,OAAA,CAAQ,MAAM,UAAW,CAAA,IAAA,CAAK,QAAQ,GAAK,EAAA,IAAA,CAAK,QAAQ,GAAG,CAAA,CAAA;AAChE,IAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,GAAI,CAAA,IAAA,CAAK,OAAQ,CAAA,GAAG,CAAE,CAAA,GAAA,CAAI,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAA,CAAE,aAAa,CAAC,CAAA,CAAA;AAC9E,IAAA,OAAO,IAAK,CAAA,OAAA,CAAA;AAAA,GACd;AAAA,EAMA,sBAAsB,QAAgC,EAAA;AACpD,IAAM,MAAA,EAAE,IAAM,EAAA,MAAA,GAAS,CAAG,EAAA,MAAA,EAAQ,MAAS,GAAA,IAAA,CAAK,UAAW,CAAA,GAAA,CAAI,UAAU,CAAA,CAAA;AACzE,IAAI,IAAA,CAAC,KAAK,OAAS,EAAA;AACjB,MAAA,IAAA,CAAK,mBAAmB,QAAQ,CAAA,CAAA;AAAA,KAClC;AACA,IAAA,MAAM,QAAQ,QAAY,IAAA,IAAA,CAAA;AAC1B,IAAA,IAAI,GAAM,GAAA,CAAA,CAAA;AACV,IAAA,MAAM,KAAK,MAAU,IAAA,IAAA,CAAA;AACrB,IAAA,MAAM,SAAS,KAAM,CAAA,MAAA,CAAA;AACrB,IAAA,KAAA,IAAS,CAAI,GAAA,MAAA,EAAQ,CAAI,GAAA,MAAA,EAAQ,KAAK,EAAI,EAAA;AACxC,MAAS,QAAA,CAAA,SAAA,CAAU,OAAO,CAAC,CAAA,CAAA;AAC3B,MAAM,GAAA,GAAA,IAAA,CAAK,IAAI,GAAK,EAAA,IAAA,CAAK,QAAQ,MAAO,CAAA,iBAAA,CAAkB,QAAQ,CAAC,CAAA,CAAA;AAAA,KACrE;AACA,IAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,GAAS,IAAK,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAAA,GACrC;AAAA,EAOA,IAAK,CAAA,OAAA,EAAS,QAAW,GAAA,IAAA,CAAK,QAAU,EAAA;AACtC,IAAA,MAAM,EAAE,KAAA,EAAO,KAAM,EAAA,GAAI,IAAK,CAAA,SAAA,CAAA;AAC9B,IAAA,MAAM,gBAAmB,GAAA,CAAA,EAAG,IAAK,CAAA,EAAA,CAAA,CAAA,EAAM,OAAQ,CAAA,cAAA,CAAA,CAAA,CAAA;AAC/C,IAAI,IAAA,IAAA,CAAK,aAAc,CAAA,gBAAA,KAAqB,gBAAkB,EAAA;AAC5D,MAAA,MAAM,GAAM,GAAA,IAAA,CAAK,KAAM,CAAA,GAAA,CAAI,QAAQ,cAAc,CAAA,CAAA;AACjD,MAAA,IAAI,CAAC,GAAK,EAAA;AACR,QAAA,IAAA,CAAK,UAAU,OAAO,CAAA,CAAA;AAAA,OACxB;AACA,MAAA,IAAA,CAAK,SAAS,eAAgB,CAAA,IAAA,CAAK,MAAM,GAAI,CAAA,OAAA,CAAQ,cAAc,CAAC,CAAA,CAAA;AACpE,MAAA,IAAA,CAAK,cAAc,gBAAmB,GAAA,gBAAA,CAAA;AAAA,KACxC;AAEA,IAAA,OAAA,CAAQ,mBAAmB,OAAQ,CAAA,CAAC,QAAU,EAAA,EAAE,MAAW,KAAA;AACzD,MAAM,MAAA,SAAA,GAAY,IAAK,CAAA,YAAA,CAAa,IAAI,CAAA,CAAA;AACxC,MAAI,IAAA,SAAA,IAAa,UAAU,WAAa,EAAA;AACtC,QAAA,IAAA,CAAK,gBAAgB,SAAS,CAAA,CAAA;AAAA,OAChC;AAAA,KACD,CAAA,CAAA;AAED,IAAA,IAAI,KAAK,WAAa,EAAA;AACpB,MAAA,IAAI,KAAK,KAAO,EAAA;AACd,QAAA,MAAM,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,GAAS,CAAI,GAAA,KAAA,CAAA;AACvC,QAAA,IAAA,CAAK,QAAS,CAAA,qBAAA;AAAA,UACZ,QAAA;AAAA,UACA,KAAA;AAAA,UACA,KAAK,KAAM,CAAA,IAAA;AAAA,UACX,MAAA;AAAA,UACA,IAAK,CAAA,cAAA;AAAA,SACP,CAAA;AAAA,OACK,MAAA;AACL,QAAA,IAAA,CAAK,SAAS,mBAAoB,CAAA,QAAA,EAAU,KAAO,EAAA,KAAA,EAAO,KAAK,cAAc,CAAA,CAAA;AAAA,OAC/E;AAAA,KACF,MAAA,IAAW,KAAK,KAAO,EAAA;AACrB,MAAA,MAAM,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,MAAA,GAAS,CAAI,GAAA,KAAA,CAAA;AACvC,MAAA,IAAA,CAAK,GAAG,YAAa,CAAA,QAAA,EAAU,OAAO,IAAK,CAAA,KAAA,CAAM,MAAM,MAAM,CAAA,CAAA;AAAA,KACxD,MAAA;AACL,MAAA,IAAA,CAAK,EAAG,CAAA,UAAA,CAAW,QAAU,EAAA,KAAA,EAAO,KAAK,CAAA,CAAA;AAAA,KAC3C;AAAA,GACF;AAAA,EAMA,KAAK,MAAkB,EAAA;AACrB,IAAA,MAAM,aAAa,MAAO,CAAA,cAAA,CAAA;AAC1B,IAAA,KAAA,MAAW,QAAQ,UAAY,EAAA;AAC7B,MAAA,MAAM,YAAY,UAAW,CAAA,IAAA,CAAA,CAAA;AAC7B,MAAA,IAAI,qBAAqB,eAAiB,EAAA;AACxC,QAAA,IAAI,SAAS,OAAS,EAAA;AACpB,UAAA,IAAA,CAAK,SAAS,SAAS,CAAA,CAAA;AAAA,SAClB,MAAA;AACL,UAAK,IAAA,CAAA,YAAA,CAAa,MAAM,SAAS,CAAA,CAAA;AAAA,SACnC;AAAA,OACK,MAAA;AACL,QAAA,IAAI,UAAU,IAAM,EAAA;AAClB,UAAA,MAAM,CAAI,GAAA,IAAI,eAAgB,CAAA,IAAA,CAAK,UAAU,SAAS,CAAA,CAAA;AACtD,UAAA,IAAI,SAAS,OAAS,EAAA;AACpB,YAAA,IAAA,CAAK,SAAS,CAAC,CAAA,CAAA;AAAA,WACV,MAAA;AACL,YAAK,IAAA,CAAA,YAAA,CAAa,MAAM,CAAC,CAAA,CAAA;AAAA,WAC3B;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAEA,IAAA,IAAI,OAAO,MAAQ,EAAA;AACjB,MAAA,IAAA,CAAK,MAAS,GAAA;AAAA,QACZ,KAAK,IAAI,OAAA,GAAU,IAAK,CAAA,MAAA,CAAO,OAAO,GAAG,CAAA;AAAA,QACzC,KAAK,IAAI,OAAA,GAAU,IAAK,CAAA,MAAA,CAAO,OAAO,GAAG,CAAA;AAAA,QACzC,QAAQ,IAAI,OAAA,GAAU,IAAK,CAAA,MAAA,CAAO,OAAO,MAAM,CAAA;AAAA,QAC/C,OAAO,IAAI,OAAA,GAAU,IAAK,CAAA,MAAA,CAAO,OAAO,KAAK,CAAA;AAAA,QAC7C,MAAA,EAAQ,OAAO,MAAO,CAAA,MAAA;AAAA,OACxB,CAAA;AAAA,KACF;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,KAAQ,GAAA;AACN,IAAM,MAAA,QAAA,GAAW,IAAI,QAAS,CAAA,IAAA,CAAK,UAAU,EAAE,CAAE,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAC1D,IAAA,QAAA,CAAS,WAAW,IAAK,CAAA,QAAA,CAAA;AACzB,IAAO,OAAA,QAAA,CAAA;AAAA,GACT;AAAA,EAKA,OAAU,GAAA;AACR,IAAK,IAAA,CAAA,KAAA,CAAM,OAAQ,CAAA,CAAC,CAAM,KAAA;AACxB,MAAK,IAAA,CAAA,QAAA,CAAS,kBAAkB,CAAC,CAAA,CAAA;AAAA,KAClC,CAAA,CAAA;AACD,IAAA,IAAA,CAAK,MAAM,KAAM,EAAA,CAAA;AACjB,IAAK,IAAA,CAAA,WAAA,CAAY,OAAQ,CAAA,CAAC,CAAM,KAAA;AAC9B,MAAK,IAAA,CAAA,EAAA,CAAG,YAAa,CAAA,CAAA,CAAE,MAAM,CAAA,CAAA;AAAA,KAC9B,CAAA,CAAA;AACD,IAAA,IAAA,CAAK,YAAY,KAAM,EAAA,CAAA;AAAA,GACzB;AACF;;ACvdA,MAAqB,aAAa,QAAS,CAAA;AAAA,EAClC,EAAA,CAAA;AAAA,EAEA,eAAA,CAAA;AAAA,EAEA,YAAA,CAAA;AAAA,EAEA,WAAA,CAAA;AAAA,EAEA,MAAA,CAAA;AAAA,EAEA,aAAA,CAAA;AAAA,EAEA,IAAA,CAAA;AAAA,EAEA,QAAA,CAAA;AAAA,EAEP,GAAA,CAAA;AAAA,EAEA,SAAA,CAAA;AAAA,EAEA,SAAA,CAAA;AAAA,EAEA,QAAA,CAAA;AAAA,EAEA,UAAA,CAAA;AAAA,EAEA,kBAAA,CAAA;AAAA,EAMA,WAAY,CAAA,QAAA,EAAU,OAAuB,GAAA,EAAmB,EAAA;AAC9D,IAAM,KAAA,EAAA,CAAA;AACN,IAAA,MAAM,IAAO,GAAA,MAAA,CAAO,MAAO,CAAA,EAAI,EAAA;AAAA,MAC7B,IAAA,EAAM,SAAS,EAAG,CAAA,SAAA;AAAA,MAClB,aAAe,EAAA,IAAA;AAAA,MACf,WAAa,EAAA,CAAA;AAAA,OACZ,OAAO,CAAA,CAAA;AACV,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAChB,IAAK,IAAA,CAAA,EAAA,GAAK,KAAK,QAAS,CAAA,EAAA,CAAA;AACxB,IAAK,IAAA,CAAA,eAAA,GAAkB,IAAI,OAAQ,EAAA,CAAA;AACnC,IAAK,IAAA,CAAA,YAAA,GAAe,IAAI,OAAQ,EAAA,CAAA;AAChC,IAAA,IAAA,CAAK,cAAc,IAAK,CAAA,WAAA,CAAA;AACxB,IAAA,IAAA,CAAK,gBAAgB,IAAK,CAAA,aAAA,CAAA;AAC1B,IAAA,IAAA,CAAK,MAAS,GAAA,CAAA,CAAA;AACd,IAAA,IAAA,CAAK,GAAM,GAAA,IAAA,CAAK,EAAM,IAAA,GAAA,CAAI,MAAM,CAAA,CAAA;AAChC,IAAA,IAAA,CAAK,YAAY,IAAK,CAAA,QAAA,CAAA;AACtB,IAAA,IAAA,CAAK,WAAW,IAAK,CAAA,OAAA,CAAA;AACrB,IAAK,IAAA,CAAA,UAAA,GAAa,OAAQ,CAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AACxC,IAAA,IAAA,CAAK,OAAO,IAAK,CAAA,IAAA,CAAA;AACjB,IAAA,IAAA,CAAK,YAAY,IAAK,CAAA,IAAA,CAAA;AAEtB,IAAA,IAAI,KAAK,UAAY,EAAA;AACnB,MAAK,IAAA,CAAA,IAAA,GAAO,KAAK,EAAG,CAAA,KAAA,CAAA;AACpB,MAAK,IAAA,CAAA,uBAAA,CAAwB,KAAK,UAAU,CAAA,CAAA;AAAA,KAC9C;AAAA,GACF;AAAA,EAKA,IAAI,EAAK,GAAA;AACP,IAAA,OAAO,IAAK,CAAA,GAAA,CAAA;AAAA,GACd;AAAA,EAKA,IAAI,QAAW,GAAA;AACb,IAAA,OAAO,IAAK,CAAA,UAAA,GAAa,IAAK,CAAA,kBAAA,GAAqB,IAAK,CAAA,SAAA,CAAA;AAAA,GAC1D;AAAA,EAKA,IAAI,OAAU,GAAA;AACZ,IAAA,OAAO,IAAK,CAAA,QAAA,CAAA;AAAA,GACd;AAAA,EAMA,IAAI,UAAU,SAAoB,EAAA;AAChC,IAAA,IAAA,CAAK,IAAO,GAAA,SAAA,GAAY,IAAK,CAAA,EAAA,CAAG,QAAQ,IAAK,CAAA,SAAA,CAAA;AAE7C,IAAA,IAAA,CAAK,UAAa,GAAA,SAAA,CAAA;AAElB,IAAK,IAAA,CAAA,uBAAA,CAAwB,KAAK,UAAU,CAAA,CAAA;AAAA,GAC9C;AAAA,EAKA,IAAI,SAAY,GAAA;AACd,IAAA,OAAO,IAAK,CAAA,UAAA,CAAA;AAAA,GACd;AAAA,EAMA,IAAA,CAAK,OAA2B,GAAA,EAAuB,EAAA;AACrD,IAAM,MAAA,EAAE,MAAQ,EAAA,MAAA,EAAW,GAAA,OAAA,CAAA;AAC3B,IAAA,MAAM,WAAW,EAAC,CAAA;AAClB,IAAA,IAAI,MAAQ,EAAA;AACV,MAAA,MAAA,CAAO,OAAO,QAAU,EAAA;AAAA,QACtB,kBAAkB,MAAO,CAAA,gBAAA;AAAA,QACzB,gBAAgB,MAAO,CAAA,aAAA;AAAA,QACvB,YAAY,MAAO,CAAA,UAAA;AAAA,OACpB,CAAA,CAAA;AACD,MAAA,IAAA,CAAK,eAAgB,CAAA,QAAA,CAAS,MAAO,CAAA,UAAA,EAAY,KAAK,WAAW,CAAA,CAAA;AACjE,MAAK,IAAA,CAAA,YAAA,CAAa,eAAgB,CAAA,IAAA,CAAK,eAAe,CAAA,CAAA;AAAA,KACjD,MAAA;AACL,MAAK,IAAA,CAAA,eAAA,CAAgB,IAAK,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AAAA,KAC5C;AAEA,IAAA,MAAA,CAAO,OAAO,QAAU,EAAA;AAAA,MACtB,YAAY,IAAI,OAAA;AAAA,QACd,IAAK,CAAA,QAAA,CAAS,KAAO,EAAA,QAAA,EAAU,KAAS,IAAA,CAAA;AAAA,QACxC,IAAK,CAAA,QAAA,CAAS,KAAO,EAAA,QAAA,EAAU,MAAU,IAAA,CAAA;AAAA,OAC3C;AAAA,MACA,aAAa,IAAK,CAAA,WAAA;AAAA,MAClB,iBAAiB,IAAK,CAAA,eAAA;AAAA,MACtB,cAAc,IAAK,CAAA,YAAA;AAAA,KACpB,CAAA,CAAA;AACD,IAAA,MAAA,CAAO,IAAK,CAAA,QAAQ,CAAE,CAAA,OAAA,CAAQ,CAAC,GAAQ,KAAA;AACrC,MAAA,IAAI,CAAC,MAAO,CAAA,MAAA,CAAO,KAAK,OAAQ,CAAA,QAAA,EAAU,GAAG,CAAG,EAAA;AAC9C,QAAA,IAAA,CAAK,OAAQ,CAAA,QAAA,CAAS,GAAO,CAAA,GAAA,EAAE,OAAO,IAAK,EAAA,CAAA;AAAA,OAC7C;AACA,MAAA,IAAA,CAAK,OAAQ,CAAA,QAAA,CAAS,GAAK,CAAA,CAAA,KAAA,GAAQ,QAAS,CAAA,GAAA,CAAA,CAAA;AAAA,KAC7C,CAAA,CAAA;AACD,IAAI,IAAA,MAAA;AAAQ,MAAA,MAAA,CAAO,IAAK,EAAA,CAAA;AACxB,IAAA,IAAA,CAAK,QAAQ,GAAI,EAAA,CAAA;AACjB,IAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,IAAK,CAAA,OAAA,EAAS,KAAK,IAAI,CAAA,CAAA;AAC1C,IAAI,IAAA,MAAA;AAAQ,MAAA,MAAA,CAAO,MAAO,EAAA,CAAA;AAAA,GAC5B;AAAA,EAOA,uBAAA,CAAwB,SAAW,EAAA,KAAA,GAAQ,KAAO,EAAA;AAChD,IAAA,IAAI,IAAK,CAAA,SAAA,KAAc,KAAS,IAAA,CAAC,KAAK,kBAAqB,CAAA,EAAA;AACzD,MAAA,IAAI,KAAK,kBAAoB,EAAA;AAC3B,QAAA,IAAA,CAAK,mBAAmB,OAAQ,EAAA,CAAA;AAAA,OAClC;AAEA,MAAM,MAAA,UAAA,GAAa,KAAK,SAAU,CAAA,UAAA,CAAA;AAElC,MAAA,MAAM,aAAgB,GAAA,UAAA,CAAW,GAAI,CAAA,UAAU,CAAG,EAAA,IAAA,CAAA;AAClD,MAAM,MAAA,cAAA,GAAiB,IAAK,CAAA,SAAA,CAAU,KAAO,EAAA,IAAA,CAAA;AAC7C,MAAM,MAAA,UAAA,GAAa,iBAAiB,cAAe,CAAA,MAAA,GAAS,KAAK,KAAM,CAAA,aAAA,CAAc,SAAS,CAAC,CAAA,CAAA;AAC/F,MAAA,MAAM,QAAQ,EAAC,CAAA;AAEf,MAAI,IAAA,IAAA,CAAK,UAAU,KAAO,EAAA;AACxB,QAAA,IAAI,cAAgB,EAAA;AAClB,UAAkB,iBAAA,CAAA,aAAA,EAAe,KAAO,EAAA,UAAA,EAAY,cAA6C,CAAA,CAAA;AAAA,SACnG;AAAA,OACK,MAAA;AACL,QAAkB,iBAAA,CAAA,aAAA,EAAe,OAAO,UAAU,CAAA,CAAA;AAAA,OACpD;AAEA,MAAM,MAAA,OAAA,GAAU,KAAM,CAAA,MAAA,GAAS,KAAQ,GAAA,IAAI,YAAY,KAAK,CAAA,GAAI,IAAI,WAAA,CAAY,KAAK,CAAA,CAAA;AAErF,MAAA,IAAA,CAAK,kBAAqB,GAAA,IAAI,QAAS,CAAA,IAAA,CAAK,QAAU,EAAA;AAAA,QACpD,GAAG,KAAK,SAAU,CAAA,cAAA;AAAA,QAClB,KAAO,EAAA;AAAA,UACL,IAAM,EAAA,OAAA;AAAA,SACR;AAAA,OACD,CAAA,CAAA;AAAA,KACH;AAAA,GACF;AAAA,EAOA,cAAA,CAAe,QAAU,EAAA,OAAA,GAAU,IAAM,EAAA;AACvC,IAAI,IAAA,OAAA,IAAW,KAAK,SAAW,EAAA;AAC7B,MAAA,IAAA,CAAK,UAAU,OAAQ,EAAA,CAAA;AAAA,KACzB;AACA,IAAA,IAAA,CAAK,SAAY,GAAA,QAAA,CAAA;AACjB,IAAK,IAAA,CAAA,uBAAA,CAAwB,IAAK,CAAA,UAAA,EAAY,IAAI,CAAA,CAAA;AAAA,GACpD;AAAA,EAOA,aAAA,CAAc,OAAS,EAAA,OAAA,GAAU,IAAM,EAAA;AACrC,IAAI,IAAA,OAAA,IAAW,KAAK,QAAU,EAAA;AAC5B,MAAA,IAAA,CAAK,SAAS,OAAQ,EAAA,CAAA;AAAA,KACxB;AACA,IAAA,IAAA,CAAK,QAAW,GAAA,OAAA,CAAA;AAAA,GAClB;AAAA,EAKA,OAAU,GAAA;AACR,IAAA,IAAA,CAAK,QAAQ,OAAQ,EAAA,CAAA;AACrB,IAAA,IAAA,CAAK,SAAS,OAAQ,EAAA,CAAA;AAAA,GACxB;AAAA,EAKA,KAAQ,GAAA;AACN,IAAO,OAAA,IAAI,IAAK,CAAA,IAAA,CAAK,EAAI,EAAA;AAAA,MACvB,UAAU,IAAK,CAAA,QAAA;AAAA,MACf,SAAS,IAAK,CAAA,OAAA;AAAA,MACd,eAAe,IAAK,CAAA,aAAA;AAAA,MACpB,MAAM,IAAK,CAAA,IAAA;AAAA,MACX,aAAa,IAAK,CAAA,WAAA;AAAA,KACnB,CAAE,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAAA,GACd;AAAA,EAOA,IAAA,CAAK,IAAM,EAAA,SAAA,GAAY,IAAM,EAAA;AAC3B,IAAM,KAAA,CAAA,IAAA,CAAK,MAAM,SAAS,CAAA,CAAA;AAC1B,IAAK,IAAA,CAAA,eAAA,CAAgB,IAAK,CAAA,IAAA,CAAK,eAAe,CAAA,CAAA;AAC9C,IAAK,IAAA,CAAA,YAAA,CAAa,IAAK,CAAA,IAAA,CAAK,YAAY,CAAA,CAAA;AACxC,IAAA,IAAA,CAAK,OAAO,IAAK,CAAA,IAAA,CAAA;AACjB,IAAA,IAAA,CAAK,cAAc,IAAK,CAAA,WAAA,CAAA;AACxB,IAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AACF;;ACpTA,MAAqB,cAAc,QAAS,CAAA;AAAA,EAI1C,KAAQ,GAAA;AACN,IAAA,OAAO,IAAI,KAAA,EAAQ,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA,CAAA;AAAA,GACrC;AAAA,EAOA,IAAA,CAAK,QAAQ,SAAW,EAAA;AACtB,IAAM,KAAA,CAAA,IAAA,CAAK,QAAQ,SAAS,CAAA,CAAA;AAC5B,IAAA,IAAA,CAAK,mBAAmB,MAAO,CAAA,gBAAA,CAAA;AAE/B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AACF;;AC7BY,IAAA,SAAA,qBAAAW,UAAL,KAAA;AACL,EAAAA,UAAAA,CAAAA,UAAAA,CAAA,gBAAa,CAAb,CAAA,GAAA,YAAA,CAAA;AACA,EAAAA,UAAAA,CAAAA,UAAAA,CAAA,oBAAiB,CAAjB,CAAA,GAAA,gBAAA,CAAA;AACA,EAAAA,UAAAA,CAAAA,UAAAA,CAAA,sBAAmB,CAAnB,CAAA,GAAA,kBAAA,CAAA;AACA,EAAAA,UAAAA,CAAAA,UAAAA,CAAA,yBAAsB,CAAtB,CAAA,GAAA,qBAAA,CAAA;AACA,EAAAA,UAAAA,CAAAA,UAAAA,CAAA,sBAAmB,CAAnB,CAAA,GAAA,kBAAA,CAAA;AACA,EAAAA,UAAAA,CAAAA,UAAAA,CAAA,oBAAiB,CAAjB,CAAA,GAAA,gBAAA,CAAA;AANU,EAAAA,OAAAA,UAAAA,CAAAA;AAAA,CAAA,EAAA,SAAA,IAAA,EAAA,EAAA;AAuGZ,MAAqB,cAAc,IAAK,CAAA;AAAA,EACtC,MAAA,CAAA;AAAA,EAEA,WAAA,CAAY,UAAoB,OAAiC,EAAA;AAC/D,IAAA,KAAA,CAAM,QAAQ,CAAA,CAAA;AACd,IAAM,MAAA,EAAE,IAAO,GAAA,QAAA,CAAA;AACf,IAAA,IAAA,CAAK,MAAS,GAAA;AAAA,MACZ,QAAU,EAAA;AAAA,QACR,CAAG,EAAA,CAAA;AAAA,QACH,CAAG,EAAA,CAAA;AAAA,QACH,KAAO,EAAA,CAAA;AAAA,QACP,MAAQ,EAAA,CAAA;AAAA,OACV;AAAA,KACF,CAAA;AACA,IAAK,IAAA,CAAA,KAAA;AAAA,MACH,OACG,IAAA;AAAA,QACC,WAAW,EAAG,CAAA,GAAA;AAAA,QACd,SAAW,EAAA,KAAA;AAAA,QACX,UAAY,EAAA,IAAA;AAAA,QACZ,SAAW,EAAA,IAAA;AAAA,QACX,WAAW,EAAG,CAAA,IAAA;AAAA,QACd,QAAU,EAAA,CAAA;AAAA,QACV,SAAW,EAAA;AAAA,UACT,KAAK,EAAG,CAAA,GAAA;AAAA,UACR,KAAK,EAAG,CAAA,IAAA;AAAA,SACV;AAAA,QACA,aAAe,EAAA;AAAA,UACb,SAAS,EAAG,CAAA,QAAA;AAAA,SACd;AAAA,QACA,gBAAkB,EAAA,KAAA;AAAA,QAClB,eAAiB,EAAA,CAAA;AAAA,QACjB,KAAO,EAAA,KAAA;AAAA,QACP,WAAa,EAAA,IAAA;AAAA,QACb,cAAc,EAAC;AAAA,QACf,iBAAmB,EAAA,CAAA,CAAA;AAAA,QACnB,gBAAkB,EAAA,CAAA,CAAA;AAAA,QAClB,gBAAkB,EAAA,CAAA,CAAA;AAAA,QAClB,UAAY,EAAA,CAAA;AAAA,QACZ,UAAA,EAAY,IAAI,KAAA,CAAM,CAAC,CAAA;AAAA,QACvB,OAAS,EAAA;AAAA,UACP,MAAM,EAAC;AAAA,UACP,SAAS,EAAC;AAAA,UACV,QAAQ,EAAC;AAAA,SACX;AAAA,OACF;AAAA,KACJ,CAAA;AAAA,GACF;AAAA,EAKA,IAAI,KAAQ,GAAA;AACV,IAAA,OAAO,IAAK,CAAA,MAAA,CAAA;AAAA,GACd;AAAA,EAKA,IAAI,QAAW,GAAA;AACb,IAAA,OAAO,KAAK,MAAO,CAAA,QAAA,CAAA;AAAA,GACrB;AAAA,EAKA,IAAI,YAAe,GAAA;AACjB,IAAA,OAAO,KAAK,MAAO,CAAA,YAAA,CAAA;AAAA,GACrB;AAAA,EAKA,IAAI,iBAAoB,GAAA;AACtB,IAAA,OAAO,KAAK,MAAO,CAAA,iBAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,kBAAkB,iBAAmB,EAAA;AACvC,IAAA,IAAA,CAAK,OAAO,iBAAoB,GAAA,iBAAA,CAAA;AAAA,GAClC;AAAA,EAKA,IAAI,gBAAmB,GAAA;AACrB,IAAA,OAAO,KAAK,MAAO,CAAA,gBAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,iBAAiB,EAAqB,EAAA;AACxC,IAAA,IAAA,CAAK,OAAO,gBAAmB,GAAA,EAAA,CAAA;AAAA,GACjC;AAAA,EAKA,IAAI,gBAAmB,GAAA;AACrB,IAAA,OAAO,KAAK,MAAO,CAAA,gBAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,iBAAiB,EAAqB,EAAA;AACxC,IAAA,IAAA,CAAK,OAAO,gBAAmB,GAAA,EAAA,CAAA;AAAA,GACjC;AAAA,EAMA,IAAI,MAAM,KAAgB,EAAA;AACxB,IAAA,IAAA,CAAK,OAAO,KAAQ,GAAA,KAAA,CAAA;AAAA,GACtB;AAAA,EAKA,IAAI,KAAiB,GAAA;AACnB,IAAA,OAAO,KAAK,MAAO,CAAA,KAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,gBAAgB,eAAyB,EAAA;AAC3C,IAAA,IAAA,CAAK,OAAO,eAAkB,GAAA,eAAA,CAAA;AAAA,GAChC;AAAA,EAKA,IAAI,eAA0B,GAAA;AAC5B,IAAA,OAAO,KAAK,MAAO,CAAA,eAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,iBAAiB,gBAA2B,EAAA;AAC9C,IAAA,IAAA,CAAK,OAAO,gBAAmB,GAAA,gBAAA,CAAA;AAAA,GACjC;AAAA,EAKA,IAAI,gBAA4B,GAAA;AAC9B,IAAA,OAAO,KAAK,MAAO,CAAA,gBAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,YAAY,WAAa,EAAA;AAC3B,IAAA,IAAA,CAAK,OAAO,WAAc,GAAA,WAAA,CAAA;AAAA,GAC5B;AAAA,EAKA,IAAI,WAAc,GAAA;AAChB,IAAA,OAAO,KAAK,MAAO,CAAA,WAAA,CAAA;AAAA,GACrB;AAAA,EAMA,IAAI,WAAW,UAAoB,EAAA;AACjC,IAAA,IAAA,CAAK,OAAO,UAAa,GAAA,UAAA,CAAA;AAAA,GAC3B;AAAA,EAKA,IAAI,UAAa,GAAA;AACf,IAAA,OAAO,KAAK,MAAO,CAAA,UAAA,CAAA;AAAA,GACrB;AAAA,EAMA,MAAM,OAAgC,EAAA;AACpC,IAAA,IAAI,OAAQ,CAAA,QAAA,KAAa,KAAa,CAAA,IAAA,OAAA,CAAQ,aAAa,IAAM,EAAA;AAC/D,MAAK,IAAA,CAAA,WAAA,CAAY,OAAQ,CAAA,QAAA,EAAU,OAAO,CAAA,CAAA;AAAA,KACrC,MAAA;AACL,MAAA,IAAI,QAAQ,SAAW,EAAA;AACrB,QAAA,MAAM,EAAE,GAAK,EAAA,GAAA,EAAK,QAAU,EAAA,QAAA,KAAa,OAAQ,CAAA,SAAA,CAAA;AACjD,QAAA,IAAA,CAAK,YAAa,CAAA,GAAA,EAAK,GAAK,EAAA,QAAA,EAAU,QAAQ,CAAA,CAAA;AAC9C,QAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,EAAA,CAAG,KAAK,CAAA,CAAA;AAAA,OACpB,MAAA;AACL,QAAK,IAAA,CAAA,OAAA,CAAQ,IAAK,CAAA,EAAA,CAAG,KAAK,CAAA,CAAA;AAAA,OAC5B;AACA,MAAA,IAAI,QAAQ,aAAe,EAAA;AACzB,QAAA,MAAM,EAAE,OAAA,EAAS,SAAU,EAAA,GAAI,OAAQ,CAAA,aAAA,CAAA;AACvC,QAAK,IAAA,CAAA,gBAAA,CAAiB,SAAS,SAAS,CAAA,CAAA;AAAA,OAC1C;AAAA,KACF;AAEA,IAAI,IAAA,CAAC,QAAQ,OAAQ,CAAA,QAAQ,KAAK,CAAC,MAAA,CAAO,OAAQ,CAAA,QAAQ,CAAG,EAAA;AAC3D,MAAK,IAAA,CAAA,WAAA,CAAY,QAAQ,QAAQ,CAAA,CAAA;AAAA,KACnC;AACA,IAAI,IAAA,CAAC,QAAQ,OAAQ,CAAA,SAAS,KAAK,CAAC,MAAA,CAAO,OAAQ,CAAA,SAAS,CAAG,EAAA;AAC7D,MAAK,IAAA,CAAA,YAAA,CAAa,QAAQ,SAAS,CAAA,CAAA;AAAA,KACrC;AAEA,IAAA,IAAI,QAAQ,SAAW,EAAA;AACrB,MAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,EAAA,CAAG,UAAU,CAAA,CAAA;AAAA,KACzB,MAAA;AACL,MAAK,IAAA,CAAA,OAAA,CAAQ,IAAK,CAAA,EAAA,CAAG,UAAU,CAAA,CAAA;AAAA,KACjC;AAEA,IAAI,IAAA,CAAC,QAAQ,OAAQ,CAAA,SAAS,KAAK,CAAC,MAAA,CAAO,OAAQ,CAAA,SAAS,CAAG,EAAA;AAC7D,MAAK,IAAA,CAAA,YAAA,CAAa,QAAQ,SAAS,CAAA,CAAA;AAAA,KACrC;AAEA,IAAI,IAAA,CAAC,QAAQ,OAAQ,CAAA,UAAU,KAAK,CAAC,MAAA,CAAO,OAAQ,CAAA,UAAU,CAAG,EAAA;AAC/D,MAAK,IAAA,CAAA,YAAA,CAAa,QAAQ,UAAU,CAAA,CAAA;AAAA,KACtC;AAEA,IAAI,IAAA,CAAC,QAAQ,OAAQ,CAAA,SAAS,KAAK,CAAC,MAAA,CAAO,OAAQ,CAAA,SAAS,CAAG,EAAA;AAC7D,MAAK,IAAA,CAAA,YAAA,CAAa,QAAQ,SAAS,CAAA,CAAA;AAAA,KACrC;AAEA,IAAI,IAAA,CAAC,QAAQ,OAAQ,CAAA,SAAS,KAAK,CAAC,MAAA,CAAO,OAAQ,CAAA,SAAS,CAAG,EAAA;AAC7D,MAAK,IAAA,CAAA,YAAA,CAAa,QAAQ,SAAS,CAAA,CAAA;AAAA,KACrC;AAEA,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,QAAQ,OAAO,CAAA,CAAA;AAAA,GAClD;AAAA,EAMA,OAAO,EAAI,EAAA;AACT,IAAI,IAAA,IAAA,CAAK,MAAO,CAAA,EAAA,CAAA,KAAQ,IAAM,EAAA;AAC5B,MAAK,IAAA,CAAA,EAAA,CAAG,OAAO,EAAE,CAAA,CAAA;AACjB,MAAA,IAAA,CAAK,OAAO,EAAM,CAAA,GAAA,IAAA,CAAA;AAAA,KACpB;AAAA,GACF;AAAA,EAMA,QAAQ,EAAI,EAAA;AACV,IAAI,IAAA,IAAA,CAAK,MAAO,CAAA,EAAA,CAAA,KAAQ,KAAO,EAAA;AAC7B,MAAK,IAAA,CAAA,EAAA,CAAG,QAAQ,EAAE,CAAA,CAAA;AAClB,MAAA,IAAA,CAAK,OAAO,EAAM,CAAA,GAAA,KAAA,CAAA;AAAA,KACpB;AAAA,GACF;AAAA,EASA,YAAY,KAAO,EAAA,MAAA,EAAQ,CAAI,GAAA,CAAA,EAAG,IAAI,CAAG,EAAA;AACvC,IAAI,IAAA,IAAA,CAAK,OAAO,QAAS,CAAA,KAAA,KAAU,SAAS,IAAK,CAAA,MAAA,CAAO,SAAS,MAAW,KAAA,MAAA;AAAQ,MAAA,OAAA;AACpF,IAAA,IAAA,CAAK,EAAG,CAAA,QAAA,CAAS,CAAG,EAAA,CAAA,EAAG,OAAO,MAAM,CAAA,CAAA;AACpC,IAAA,IAAA,CAAK,OAAO,QAAW,GAAA;AAAA,MACrB,KAAA;AAAA,MACA,MAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,KACF,CAAA;AAAA,GACF;AAAA,EASA,QAAQ,SAAoB,EAAA;AAC1B,IAAI,IAAA,IAAA,CAAK,MAAO,CAAA,SAAA,KAAc,SAAW,EAAA;AACvC,MAAA,IAAA,CAAK,EAAG,CAAA,SAAA,CAAU,SAAW,EAAA,SAAA,EAAW,WAAW,SAAS,CAAA,CAAA;AAC5D,MAAA,IAAA,CAAK,OAAO,SAAY,GAAA,SAAA,CAAA;AAAA,KAC1B;AAAA,GACF;AAAA,EAQA,WAAA,CAAY,UAAsB,OAAiC,EAAA;AACjE,IAAA,IAAA,CAAK,OAAO,QAAW,GAAA,QAAA,CAAA;AACvB,IAAA,IAAI,aAAa,CAAsB,mBAAA;AACrC,MAAK,IAAA,CAAA,OAAA,CAAQ,IAAK,CAAA,EAAA,CAAG,KAAK,CAAA,CAAA;AAC1B,MAAA,OAAA;AAAA,KACK,MAAA;AACL,MAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,EAAA,CAAG,KAAK,CAAA,CAAA;AAAA,KAC3B;AACA,IAAA,IAAI,aAAa,CAA4B,yBAAA;AAC3C,MAAI,IAAA,IAAA,CAAK,OAAO,gBAAkB,EAAA;AAChC,QAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,EAAA,CAAG,QAAU,EAAA,IAAA,CAAK,GAAG,QAAQ,CAAA,CAAA;AACxD,QAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,EAAG,CAAA,GAAA,EAAK,IAAK,CAAA,EAAA,CAAG,GAAK,EAAA,IAAA,CAAK,EAAG,CAAA,GAAA,EAAK,IAAK,CAAA,EAAA,CAAG,GAAG,CAAA,CAAA;AAAA,OAC/D,MAAA;AACL,QAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,EAAA,CAAG,QAAQ,CAAA,CAAA;AACtC,QAAA,IAAA,CAAK,aAAa,IAAK,CAAA,EAAA,CAAG,SAAW,EAAA,IAAA,CAAK,GAAG,GAAG,CAAA,CAAA;AAAA,OAClD;AAAA,KACF,MAAA,IAAW,aAAa,CAA+B,4BAAA;AACrD,MAAI,IAAA,IAAA,CAAK,OAAO,gBAAkB,EAAA;AAChC,QAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,EAAA,CAAG,QAAU,EAAA,IAAA,CAAK,GAAG,QAAQ,CAAA,CAAA;AACxD,QAAK,IAAA,CAAA,YAAA;AAAA,UACH,KAAK,EAAG,CAAA,IAAA;AAAA,UACR,KAAK,EAAG,CAAA,IAAA;AAAA,UACR,KAAK,EAAG,CAAA,mBAAA;AAAA,UACR,KAAK,EAAG,CAAA,mBAAA;AAAA,SACV,CAAA;AAAA,OACK,MAAA;AACL,QAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,EAAA,CAAG,QAAQ,CAAA,CAAA;AACtC,QAAA,IAAA,CAAK,aAAa,IAAK,CAAA,EAAA,CAAG,IAAM,EAAA,IAAA,CAAK,GAAG,mBAAmB,CAAA,CAAA;AAAA,OAC7D;AAAA,KACF,MAAA,IAAW,aAAa,CAA4B,yBAAA;AAClD,MAAI,IAAA,IAAA,CAAK,OAAO,gBAAkB,EAAA;AAChC,QAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,EAAA,CAAG,QAAU,EAAA,IAAA,CAAK,GAAG,QAAQ,CAAA,CAAA;AACxD,QAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,EAAG,CAAA,IAAA,EAAM,IAAK,CAAA,EAAA,CAAG,SAAW,EAAA,IAAA,CAAK,EAAG,CAAA,IAAA,EAAM,IAAK,CAAA,EAAA,CAAG,SAAS,CAAA,CAAA;AAAA,OAC7E,MAAA;AACL,QAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,EAAA,CAAG,QAAQ,CAAA,CAAA;AACtC,QAAA,IAAA,CAAK,aAAa,IAAK,CAAA,EAAA,CAAG,IAAM,EAAA,IAAA,CAAK,GAAG,SAAS,CAAA,CAAA;AAAA,OACnD;AAAA,KACF,MAAA,IAAW,aAAa,CAA0B,uBAAA;AAChD,MAAI,IAAA,IAAA,CAAK,OAAO,gBAAkB,EAAA;AAChC,QAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,EAAA,CAAG,QAAU,EAAA,IAAA,CAAK,GAAG,QAAQ,CAAA,CAAA;AACxD,QAAK,IAAA,CAAA,YAAA;AAAA,UACH,KAAK,EAAG,CAAA,GAAA;AAAA,UACR,KAAK,EAAG,CAAA,mBAAA;AAAA,UACR,KAAK,EAAG,CAAA,GAAA;AAAA,UACR,KAAK,EAAG,CAAA,mBAAA;AAAA,SACV,CAAA;AAAA,OACK,MAAA;AACL,QAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,EAAA,CAAG,QAAU,EAAA,IAAA,CAAK,GAAG,QAAQ,CAAA,CAAA;AACxD,QAAK,IAAA,CAAA,YAAA;AAAA,UACH,KAAK,EAAG,CAAA,SAAA;AAAA,UACR,KAAK,EAAG,CAAA,mBAAA;AAAA,UACR,KAAK,EAAG,CAAA,GAAA;AAAA,UACR,KAAK,EAAG,CAAA,mBAAA;AAAA,SACV,CAAA;AAAA,OACF;AAAA,KACF,MAAA,IAAW,aAAa,CAA0B,uBAAA;AAChD,MAAA,IAAI,SAAS,SAAW,EAAA;AACtB,QAAA,MAAM,EAAE,GAAK,EAAA,GAAA,EAAK,QAAU,EAAA,QAAA,KAAa,OAAQ,CAAA,SAAA,CAAA;AACjD,QAAA,IAAA,CAAK,YAAa,CAAA,GAAA,EAAK,GAAK,EAAA,QAAA,EAAU,QAAQ,CAAA,CAAA;AAC9C,QAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,EAAA,CAAG,KAAK,CAAA,CAAA;AAAA,OAC3B;AACA,MAAA,IAAI,SAAS,aAAe,EAAA;AAC1B,QAAA,MAAM,EAAE,OAAA,EAAS,SAAU,EAAA,GAAI,OAAQ,CAAA,aAAA,CAAA;AACvC,QAAK,IAAA,CAAA,gBAAA,CAAiB,SAAS,SAAS,CAAA,CAAA;AAAA,OAC1C;AAAA,KACK,MAAA;AACL,MAAQ,OAAA,CAAA,KAAA,CAAM,6BAA6B,QAAQ,CAAA,CAAA;AAAA,KACrD;AAAA,GACF;AAAA,EASA,YAAa,CAAA,GAAA,EAAa,GAAa,EAAA,QAAA,EAAmB,QAAmB,EAAA;AAC3E,IAAA,IACE,QAAQ,IAAK,CAAA,MAAA,CAAO,WAAW,GAC/B,IAAA,GAAA,KAAQ,KAAK,MAAO,CAAA,SAAA,EAAW,OAC/B,QAAa,KAAA,IAAA,CAAK,OAAO,SAAW,EAAA,QAAA,IACpC,aAAa,IAAK,CAAA,MAAA,CAAO,WAAW,QACpC,EAAA;AACA,MAAA,IAAA,CAAK,OAAO,SAAY,GAAA;AAAA,QACtB,GAAA;AAAA,QACA,GAAA;AAAA,QACA,QAAA;AAAA,QACA,QAAA;AAAA,OACF,CAAA;AACA,MAAA,IAAI,CAAC,OAAA,CAAQ,QAAQ,CAAA,IAAK,CAAC,MAAO,CAAA,QAAQ,CAAK,IAAA,CAAC,QAAQ,QAAQ,CAAA,IAAK,CAAC,MAAA,CAAO,QAAQ,CAAG,EAAA;AACtF,QAAA,IAAA,CAAK,EAAG,CAAA,iBAAA,CAAkB,GAAK,EAAA,GAAA,EAAK,UAAU,QAAQ,CAAA,CAAA;AAAA,OACjD,MAAA;AACL,QAAK,IAAA,CAAA,EAAA,CAAG,SAAU,CAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AAAA,OAC5B;AAAA,KACF;AAAA,GACF;AAAA,EAWA,gBAAA,CAAiB,SAAiB,SAAoB,EAAA;AACpD,IACE,IAAA,OAAA,KAAY,KAAK,MAAO,CAAA,aAAA,EAAe,WACvC,SAAc,KAAA,IAAA,CAAK,MAAO,CAAA,aAAA,EAAe,SACzC,EAAA;AACA,MAAA,IAAA,CAAK,OAAO,aAAgB,GAAA;AAAA,QAC1B,OAAA;AAAA,QACA,SAAA;AAAA,OACF,CAAA;AAEA,MAAA,IAAI,CAAC,OAAQ,CAAA,SAAS,KAAK,CAAC,MAAA,CAAO,SAAS,CAAG,EAAA;AAC7C,QAAK,IAAA,CAAA,EAAA,CAAG,qBAAsB,CAAA,OAAA,EAAS,SAAS,CAAA,CAAA;AAAA,OAC3C,MAAA;AACL,QAAK,IAAA,CAAA,EAAA,CAAG,cAAc,OAAO,CAAA,CAAA;AAAA,OAC/B;AAAA,KACF;AAAA,GACF;AAAA,EAMA,cAAc,KAAe,EAAA;AAC3B,IAAI,IAAA,IAAA,CAAK,MAAO,CAAA,UAAA,KAAe,KAAO,EAAA;AACpC,MAAA,IAAA,CAAK,OAAO,UAAa,GAAA,KAAA,CAAA;AAAA,KAC3B;AAAA,GACF;AAAA,EAOA,aAAA,CAAc,OAAkB,KAAgB,EAAA;AAC9C,IAAA,IAAI,KAAK,MAAO,CAAA,UAAA,KAAe,SAAS,IAAK,CAAA,MAAA,CAAO,eAAe,KAAO,EAAA;AACxE,MAAA,IAAA,CAAK,OAAO,UAAa,GAAA,KAAA,CAAA;AACzB,MAAA,IAAI,CAAC,OAAQ,CAAA,KAAK,KAAK,CAAC,MAAA,CAAO,KAAK,CAAG,EAAA;AACrC,QAAA,IAAA,CAAK,OAAO,UAAa,GAAA,KAAA,CAAA;AAAA,OACpB,MAAA;AACL,QAAK,IAAA,CAAA,MAAA,CAAO,aAAa,KAAM,CAAA,CAAA,CAAA;AAAA,OACjC;AACA,MAAK,IAAA,CAAA,EAAA,CAAG,UAAW,CAAA,KAAA,CAAM,CAAG,EAAA,KAAA,CAAM,GAAG,KAAM,CAAA,CAAA,EAAG,IAAK,CAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AAAA,KACtE;AAAA,GACF;AAAA,EAMA,YAAY,QAAkB,EAAA;AAC5B,IAAI,IAAA,IAAA,CAAK,MAAO,CAAA,QAAA,KAAa,QAAU,EAAA;AACrC,MAAA,IAAI,QAAU,EAAA;AACZ,QAAA,IAAA,CAAK,EAAG,CAAA,MAAA,CAAO,IAAK,CAAA,EAAA,CAAG,SAAS,CAAA,CAAA;AAAA,OAC3B,MAAA;AACL,QAAA,IAAA,CAAK,EAAG,CAAA,OAAA,CAAQ,IAAK,CAAA,EAAA,CAAG,SAAS,CAAA,CAAA;AAAA,OACnC;AAEA,MAAA,IAAA,CAAK,OAAO,QAAW,GAAA,QAAA,CAAA;AACvB,MAAK,IAAA,CAAA,EAAA,CAAG,SAAS,QAAQ,CAAA,CAAA;AAAA,KAC3B;AAAA,GACF;AAAA,EAOA,aAAa,SAAmB,EAAA;AAC9B,IAAI,IAAA,IAAA,CAAK,MAAO,CAAA,SAAA,KAAc,SAAW,EAAA;AACvC,MAAA,IAAA,CAAK,OAAO,SAAY,GAAA,SAAA,CAAA;AACxB,MAAK,IAAA,CAAA,EAAA,CAAG,UAAU,SAAS,CAAA,CAAA;AAAA,KAC7B;AAAA,GACF;AAAA,EAMA,aAAa,IAAe,EAAA;AAC1B,IAAI,IAAA,IAAA,CAAK,MAAO,CAAA,SAAA,KAAc,IAAM,EAAA;AAClC,MAAA,IAAA,CAAK,OAAO,SAAY,GAAA,IAAA,CAAA;AACxB,MAAK,IAAA,CAAA,EAAA,CAAG,UAAU,IAAI,CAAA,CAAA;AAAA,KACxB;AAAA,GACF;AAAA,EAMA,aAAa,IAAc,EAAA;AACzB,IAAI,IAAA,IAAA,CAAK,MAAO,CAAA,SAAA,KAAc,IAAM,EAAA;AAClC,MAAA,IAAA,CAAK,OAAO,SAAY,GAAA,IAAA,CAAA;AACxB,MAAK,IAAA,CAAA,EAAA,CAAG,UAAU,IAAI,CAAA,CAAA;AAAA,KACxB;AAAA,GACF;AAAA,EAMA,aAAa,KAAgB,EAAA;AAC3B,IAAI,IAAA,IAAA,CAAK,MAAO,CAAA,SAAA,KAAc,KAAO,EAAA;AACnC,MAAA,IAAA,CAAK,OAAO,SAAY,GAAA,KAAA,CAAA;AACxB,MAAA,IAAI,KAAO,EAAA;AACT,QAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,EAAA,CAAG,UAAU,CAAA,CAAA;AAAA,OACzB,MAAA;AACL,QAAK,IAAA,CAAA,OAAA,CAAQ,IAAK,CAAA,EAAA,CAAG,UAAU,CAAA,CAAA;AAAA,OACjC;AAAA,KACF;AAAA,GACF;AAAA,EASA,cAAe,CAAA,GAAA,EAAa,GAAa,EAAA,IAAA,EAAc,IAAe,EAAA;AACpE,IAAA,IACE,KAAK,MAAQ,EAAA,OAAA,EAAS,IAAM,EAAA,GAAA,KAAQ,OACpC,IAAK,CAAA,MAAA,EAAQ,OAAS,EAAA,IAAA,EAAM,QAAQ,GACpC,IAAA,IAAA,CAAK,QAAQ,OAAS,EAAA,IAAA,EAAM,SAAS,IACrC,EAAA;AACA,MAAI,IAAA,CAAC,IAAK,CAAA,MAAA,EAAQ,OAAS,EAAA;AACzB,QAAK,IAAA,CAAA,MAAA,CAAO,UAAU,EAAC,CAAA;AAAA,OACzB;AACA,MAAA,IAAI,CAAC,IAAA,CAAK,MAAQ,EAAA,OAAA,EAAS,IAAM,EAAA;AAC/B,QAAK,IAAA,CAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,GAAO,EAAC,CAAA;AAAA,OAC9B;AACA,MAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,IAAO,GAAA;AAAA,QACzB,GAAA;AAAA,QACA,IAAA;AAAA,QACA,GAAA;AAAA,OACF,CAAA;AACA,MAAA,IAAI,IAAM,EAAA;AACR,QAAA,IAAA,CAAK,EAAG,CAAA,mBAAA,CAAoB,IAAM,EAAA,GAAA,EAAK,KAAK,IAAI,CAAA,CAAA;AAAA,OAC3C,MAAA;AACL,QAAA,IAAA,CAAK,EAAG,CAAA,WAAA,CAAY,GAAK,EAAA,GAAA,EAAK,IAAI,CAAA,CAAA;AAAA,OACpC;AAAA,KACF;AAAA,GACF;AAAA,EASA,YAAa,CAAA,IAAA,EAAM,KAAO,EAAA,KAAA,EAAO,IAAe,EAAA;AAG9C,IAAI,IAAA,CAAC,IAAK,CAAA,MAAA,EAAQ,OAAS,EAAA;AACzB,MAAK,IAAA,CAAA,MAAA,CAAO,UAAU,EAAC,CAAA;AAAA,KACzB;AAEA,IAAA,IAAI,CAAC,IAAA,IAAQ,IAAS,KAAA,IAAA,CAAK,GAAG,cAAgB,EAAA;AAC5C,MAAA,OACE,IAAK,CAAA,MAAA,CAAO,OAAS,EAAA,OAAA,EAAS,SAAS,IACvC,IAAA,IAAA,CAAK,MAAO,CAAA,OAAA,EAAS,SAAS,KAAU,KAAA,KAAA,IACxC,IAAK,CAAA,MAAA,CAAO,SAAS,OAAS,EAAA,KAAA,KAAU,KACxC,IAAA,IAAA,CAAK,MAAO,CAAA,OAAA,EAAS,MAAQ,EAAA,IAAA,KAAS,QACtC,IAAK,CAAA,MAAA,CAAO,OAAS,EAAA,MAAA,EAAQ,UAAU,KACvC,IAAA,IAAA,CAAK,MAAO,CAAA,OAAA,EAAS,QAAQ,KAAU,KAAA,KAAA,CAAA;AAAA,KAEhC,MAAA,IAAA,IAAA,KAAS,IAAK,CAAA,EAAA,CAAG,KAAO,EAAA;AACjC,MAAA,OACE,KAAK,MAAO,CAAA,OAAA,EAAS,OAAS,EAAA,IAAA,KAAS,QACvC,IAAK,CAAA,MAAA,CAAO,OAAS,EAAA,OAAA,EAAS,UAAU,KACxC,IAAA,IAAA,CAAK,MAAO,CAAA,OAAA,EAAS,SAAS,KAAU,KAAA,KAAA,CAAA;AAAA,KAEjC,MAAA,IAAA,IAAA,KAAS,IAAK,CAAA,EAAA,CAAG,IAAM,EAAA;AAChC,MAAA,OACE,KAAK,MAAO,CAAA,OAAA,EAAS,MAAQ,EAAA,IAAA,KAAS,QACtC,IAAK,CAAA,MAAA,CAAO,OAAS,EAAA,MAAA,EAAQ,UAAU,KACvC,IAAA,IAAA,CAAK,MAAO,CAAA,OAAA,EAAS,QAAQ,KAAU,KAAA,KAAA,CAAA;AAAA,KAE3C;AAqCA,GACF;AAAA,EAOA,cAAA,CAAe,MAAM,IAAe,EAAA;AAClC,IAAA,IAAI,IAAK,CAAA,MAAA,CAAO,OAAS,EAAA,IAAA,KAAS,IAAM,EAAA;AACtC,MAAA,IAAA,CAAK,OAAO,OAAU,GAAA;AAAA,QACpB,GAAG,KAAK,MAAO,CAAA,OAAA;AAAA,QACf,IAAA;AAAA,OACF,CAAA;AACA,MAAA,IAAI,IAAM,EAAA;AACR,QAAK,IAAA,CAAA,EAAA,CAAG,mBAAoB,CAAA,IAAA,EAAM,IAAI,CAAA,CAAA;AAAA,OACjC,MAAA;AACL,QAAK,IAAA,CAAA,EAAA,CAAG,YAAY,IAAI,CAAA,CAAA;AAAA,OAC1B;AAAA,KACF;AAAA,GACF;AAAA,EAMA,iBAAiB,IAAM,EAAA;AACrB,IAAI,IAAA,IAAA,CAAK,MAAO,CAAA,iBAAA,KAAsB,IAAM,EAAA;AAC1C,MAAA,IAAA,CAAK,OAAO,iBAAoB,GAAA,IAAA,CAAA;AAChC,MAAA,IAAA,CAAK,EAAG,CAAA,aAAA,CAAc,IAAK,CAAA,EAAA,CAAG,WAAW,IAAI,CAAA,CAAA;AAAA,KAC/C;AAAA,GACF;AAAA,EAMA,aAAa,KAAO,EAAA;AAClB,IAAI,IAAA,IAAA,CAAK,MAAO,CAAA,SAAA,KAAc,KAAO,EAAA;AACnC,MAAA,IAAA,CAAK,OAAO,SAAY,GAAA,KAAA,CAAA;AACxB,MAAK,IAAA,CAAA,EAAA,CAAG,UAAU,KAAK,CAAA,CAAA;AAAA,KACzB;AAAA,GACF;AAAA,EAaA,gBAAA,CAAiB,aAAe,EAAA,MAAA,EAAQ,KAAO,EAAA;AAC7C,IAAA,IAAI,aAAe,EAAA;AACjB,MAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,EAAA,CAAG,mBAAmB,CAAA,CAAA;AACvC,MAAA,IAAI,KAAK,MAAO,CAAA,mBAAA,KAAwB,UAAU,IAAK,CAAA,MAAA,CAAO,uBAAuB,KAAO,EAAA;AAC1F,QAAK,IAAA,CAAA,EAAA,CAAG,aAAc,CAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAEnC,QAAA,IAAA,CAAK,OAAO,mBAAsB,GAAA,MAAA,CAAA;AAClC,QAAA,IAAA,CAAK,OAAO,kBAAqB,GAAA,KAAA,CAAA;AAAA,OACnC;AAAA,KACK,MAAA;AACL,MAAK,IAAA,CAAA,OAAA,CAAQ,IAAK,CAAA,EAAA,CAAG,mBAAmB,CAAA,CAAA;AAAA,KAC1C;AAAA,GACF;AAAA,EAMA,eAAA,CAAgB,CAAa,GAAA,EAAe,EAAA;AAC1C,IAAA,MAAM,EAAE,MAAS,GAAA,IAAA,CAAK,GAAG,WAAa,EAAA,MAAA,GAAS,MAAS,GAAA,CAAA,CAAA;AACxD,IAAI,IAAA,IAAA,CAAK,MAAO,CAAA,WAAA,KAAgB,MAAQ,EAAA;AACtC,MAAA,IAAA,CAAK,OAAO,WAAc,GAAA,MAAA,CAAA;AAC1B,MAAK,IAAA,CAAA,EAAA,CAAG,eAAgB,CAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;AAAA,KACxC;AAAA,GACF;AAAA,EAMA,kBAAkB,EAAI,EAAA;AACpB,IAAA,IAAA,CAAK,OAAO,gBAAmB,GAAA,EAAA,CAAA;AAAA,GACjC;AAAA,EAMA,KAAA,CAAM,QAAQ,IAAM,EAAA;AAClB,IAAA,MAAM,IAAO,GAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AACpC,IAAA,IAAI,KAAO,EAAA;AACT,MAAA,IAAA,CACG,MAAO,CAAA,CAAC,GAAQ,KAAA,CAAC,YAAY,kBAAkB,CAAA,CAAE,OAAQ,CAAA,GAAG,CAAI,GAAA,CAAC,CACjE,CAAA,OAAA,CAAQ,CAAC,GAAQ,KAAA;AAChB,QAAA,OAAO,KAAK,MAAO,CAAA,GAAA,CAAA,CAAA;AAAA,OACpB,CAAA,CAAA;AACH,MAAA,IAAA,CAAK,eAAgB,CAAA;AAAA,QACnB,MAAQ,EAAA,IAAA;AAAA,OACT,CAAA,CAAA;AACD,MAAA,IAAA,CAAK,KAAM,CAAA;AAAA,QACT,SAAA,EAAW,KAAK,EAAG,CAAA,GAAA;AAAA,QACnB,SAAW,EAAA,KAAA;AAAA,QACX,UAAY,EAAA,IAAA;AAAA,QACZ,SAAW,EAAA,IAAA;AAAA,QACX,SAAA,EAAW,KAAK,EAAG,CAAA,IAAA;AAAA,QACnB,QAAU,EAAA,CAAA;AAAA,QACV,SAAW,EAAA;AAAA,UACT,GAAA,EAAK,KAAK,EAAG,CAAA,GAAA;AAAA,UACb,GAAA,EAAK,KAAK,EAAG,CAAA,IAAA;AAAA,SACf;AAAA,QACA,aAAe,EAAA;AAAA,UACb,OAAA,EAAS,KAAK,EAAG,CAAA,QAAA;AAAA,SACnB;AAAA,QACA,gBAAkB,EAAA,KAAA;AAAA,QAClB,eAAiB,EAAA,CAAA;AAAA,QACjB,KAAO,EAAA,KAAA;AAAA,QACP,WAAa,EAAA,IAAA;AAAA,QACb,cAAc,EAAC;AAAA,QACf,iBAAmB,EAAA,CAAA,CAAA;AAAA,QACnB,gBAAkB,EAAA,CAAA,CAAA;AAAA,QAClB,gBAAkB,EAAA,CAAA,CAAA;AAAA,QAClB,UAAY,EAAA,CAAA;AAAA,QACZ,UAAA,EAAY,IAAI,KAAA,CAAM,CAAC,CAAA;AAAA,QACvB,OAAS,EAAA;AAAA,UACP,MAAM,EAAC;AAAA,UACP,SAAS,EAAC;AAAA,UACV,QAAQ,EAAC;AAAA,SACX;AAAA,OAC0B,CAAA,CAAA;AAAA,KACvB,MAAA;AACL,MACG,IAAA,CAAA,MAAA;AAAA,QACC,CAAC,GACC,KAAA;AAAA,UACE,OAAA;AAAA,UACA,aAAA;AAAA,UACA,cAAA;AAAA,UACA,mBAAA;AAAA,UACA,kBAAA;AAAA,UACA,kBAAA;AAAA,SACF,CAAE,OAAQ,CAAA,GAAG,CAAI,GAAA,CAAA,CAAA;AAAA,OACrB,CACC,OAAQ,CAAA,CAAC,GAAQ,KAAA;AAChB,QAAA,OAAO,KAAK,MAAO,CAAA,GAAA,CAAA,CAAA;AAAA,OACpB,CAAA,CAAA;AAEH,MAAA,IAAA,CAAK,eAAgB,CAAA;AAAA,QACnB,MAAQ,EAAA,IAAA;AAAA,OACT,CAAA,CAAA;AAED,MAAA,IAAA,CAAK,OAAO,KAAQ,GAAA,KAAA,CAAA;AACpB,MAAA,IAAA,CAAK,OAAO,gBAAmB,GAAA,CAAA,CAAA,CAAA;AAC/B,MAAA,IAAA,CAAK,OAAO,iBAAoB,GAAA,CAAA,CAAA,CAAA;AAChC,MAAA,IAAA,CAAK,OAAO,gBAAmB,GAAA,CAAA,CAAA,CAAA;AAC/B,MAAK,IAAA,CAAA,MAAA,CAAO,eAAe,EAAC,CAAA;AAC5B,MAAA,IAAA,CAAK,OAAO,WAAc,GAAA,IAAA,CAAA;AAAA,KAC5B;AAAA,GACF;AACF;;ACj3BA,MAAM,sBAAyB,GAAA;AAAA,EAC7B,qBAAA;AAAA,EACA,wBAAA;AAAA,EACA,mBAAA;AAAA,EACA,0BAAA;AAAA,EACA,wBAAA;AAAA,EACA,gBAAA;AAAA,EACA,kBAAA;AAAA,EACA,wBAAA;AAAA,EACA,oBAAA;AAAA,EACA,0BAAA;AACF,CAAA,CAAA;AAKA,MAAM,sBAAyB,GAAA;AAAA,EAC7B,wBAAA;AACF,CAAA,CAAA;AAKA,MAAM,uBAA0B,GAAA;AAAA,EAC9B,oBAAA;AAAA,EACA,+BAAA;AAAA,EACA,0BAAA;AAAA,EACA,6BAAA;AAAA,EACA,2BAAA;AAAA,EACA,gCAAA;AACF,CAAA,CAAA;AAiIA,MAAqB,QAAS,CAAA;AAAA,EACnB,GAAA,CAAA;AAAA,EAEA,MAAA,CAAA;AAAA,EAEA,WAAA,CAAA;AAAA,EAIA,UAAA,CAAA;AAAA,EAEA,MAAA,CAAA;AAAA,EAEA,MAAA,CAAA;AAAA,EAEA,QAAA,CAAA;AAAA,EAEA,UAAA,CAAA;AAAA,EAEA,mBAAA,CAAA;AAAA,EAEA,sBAAA,CAAA;AAAA,EAEA,MAAA,CAAA;AAAA,EAEA,IAAA,CAAA;AAAA,EAEA,YAAA,CAAA;AAAA,EAEF,mBAAA,CAAA;AAAA,EAGA,mBAAA,CAAA;AAAA,EAGA,qBAAA,CAAA;AAAA,EAGA,iBAAA,CAAA;AAAA,EAGA,eAAA,CAAA;AAAA,EAGA,iBAAA,CAAA;AAAA,EAIA,KAAA,CAAA;AAAA,EAEA,MAAA,CAAA;AAAA,EAEP,WACE,CAAA,EAAA,EACA,IAAiC,GAAA,EACjC,EAAA;AACA,IAAA,MAAM,UAAU,MAAO,CAAA,MAAA;AAAA,MACrB,EAAC;AAAA,MACD;AAAA,QACE,SAAW,EAAA,IAAA;AAAA,QACX,KAAO,EAAA,IAAA;AAAA,QACP,KAAO,EAAA,KAAA;AAAA,QACP,OAAS,EAAA,KAAA;AAAA,QACT,SAAW,EAAA,KAAA;AAAA,QACX,kBAAoB,EAAA,KAAA;AAAA,QACpB,qBAAuB,EAAA,KAAA;AAAA,QACvB,aAAe,EAAA,IAAA;AAAA,QACf,YAAY,EAAC;AAAA,OACf;AAAA,MACA,IAAA;AAAA,KACF,CAAA;AAEA,IAAK,IAAA,CAAA,UAAA,GAAa,OAAQ,CAAA,OAAA,CAAQ,SAAS,CAAA,CAAA;AAE3C,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,KAAA,CAAA;AAEtB,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,KAAA,CAAA;AAEtB,IAAA,IAAA,CAAK,WAAW,OAAQ,CAAA,OAAA,CAAA;AAExB,IAAA,IAAA,CAAK,aAAa,OAAQ,CAAA,SAAA,CAAA;AAE1B,IAAA,IAAA,CAAK,sBAAsB,OAAQ,CAAA,kBAAA,CAAA;AAEnC,IAAA,IAAA,CAAK,yBAAyB,OAAQ,CAAA,qBAAA,CAAA;AAEtC,IAAA,IAAA,CAAK,MACH,OAAQ,CAAA,EAAE,KAAK,QAAS,CAAA,EAAE,IACtB,EACA,GAAA,UAAA;AAAA,MACE,EAAA;AAAA,MACA;AAAA,QACE,OAAO,IAAK,CAAA,MAAA;AAAA,QACZ,OAAO,IAAK,CAAA,MAAA;AAAA,QACZ,SAAS,IAAK,CAAA,QAAA;AAAA,QACd,WAAW,IAAK,CAAA,UAAA;AAAA,QAChB,iBAAiB,OAAQ,CAAA,eAAA;AAAA,QACzB,oBAAoB,IAAK,CAAA,mBAAA;AAAA,QACzB,uBAAuB,IAAK,CAAA,sBAAA;AAAA,OAC9B;AAAA,MACA,OAAQ,CAAA,aAAA;AAAA,KACV,CAAA;AAGN,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,GAAA,EAAK,oBAAqB,EAAA,CAAA;AAE7C,IAAA,MAAM,WAAW,IAAK,CAAA,GAAA,EAAK,YAAa,CAAA,IAAA,CAAK,IAAI,QAAQ,CAAA,CAAA;AACzD,IAAA,MAAM,QAAQ,IAAK,CAAA,GAAA,EAAK,YAAa,CAAA,IAAA,CAAK,IAAI,mBAAmB,CAAA,CAAA;AAEjE,IAAK,IAAA,CAAA,MAAA,GAAS,IAAI,KAAA,CAAM,IAAI,CAAA,CAAA;AAE5B,IAAA,IAAI,KAAO,EAAA;AACT,MAAK,IAAA,CAAA,MAAA,GAAS,OAAQ,CAAA,KAAA,CAAM,KAAK,CAAA,CAAA;AACjC,MAAK,IAAA,CAAA,UAAA,GAAa,OAAQ,CAAA,KAAA,CAAM,SAAS,CAAA,CAAA;AACzC,MAAK,IAAA,CAAA,MAAA,GAAS,OAAQ,CAAA,KAAA,CAAM,KAAK,CAAA,CAAA;AACjC,MAAK,IAAA,CAAA,QAAA,GAAW,OAAQ,CAAA,KAAA,CAAM,OAAO,CAAA,CAAA;AACrC,MAAK,IAAA,CAAA,mBAAA,GAAsB,OAAQ,CAAA,KAAA,CAAM,kBAAkB,CAAA,CAAA;AAC3D,MAAK,IAAA,CAAA,sBAAA,GAAyB,OAAQ,CAAA,KAAA,CAAM,qBAAqB,CAAA,CAAA;AAAA,KACnE;AAEA,IAAK,IAAA,CAAA,MAAA,CAAO,KAAQ,GAAA,OAAA,CAAQ,KAAK,CAAA,CAAA;AACjC,IAAK,IAAA,CAAA,MAAA,CAAO,YAAY,QAAS,CAAA,CAAA,CAAA,EAAI,SAAS,CAAI,CAAA,EAAA,QAAA,CAAS,CAAI,CAAA,EAAA,QAAA,CAAS,CAAE,CAAA,CAAA,CAAA;AAC1E,IAAK,IAAA,CAAA,MAAA,CAAO,mBAAmB,IAAK,CAAA,mBAAA,CAAA;AAEpC,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AAEd,IAAK,IAAA,CAAA,IAAA,GAAO,QAAQ,GAAO,IAAA,CAAA,CAAA;AAE3B,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAK,EAAG,CAAA,MAAA,CAAO,QAAQ,IAAK,CAAA,IAAA,CAAA;AACzC,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAK,EAAG,CAAA,MAAA,CAAO,SAAS,IAAK,CAAA,IAAA,CAAA;AAE3C,IAAK,IAAA,CAAA,YAAA,GAAe,CAAC,CAAC,OAAQ,CAAA,WAAA,CAAA;AAE9B,IAAA,IAAA,CAAK,cAAc,EAAC,CAAA;AAIpB,IAAA,IAAA,CAAK,sBAAsB,IAAK,CAAA,YAAA;AAAA,MAC9B,wBAAA;AAAA,MACA,qBAAA;AAAA,MACA,0BAAA;AAAA,KACF,CAAA;AACA,IAAA,IAAA,CAAK,sBAAsB,IAAK,CAAA,YAAA;AAAA,MAC9B,wBAAA;AAAA,MACA,qBAAA;AAAA,MACA,0BAAA;AAAA,KACF,CAAA;AACA,IAAA,IAAA,CAAK,wBAAwB,IAAK,CAAA,YAAA;AAAA,MAChC,wBAAA;AAAA,MACA,uBAAA;AAAA,MACA,4BAAA;AAAA,KACF,CAAA;AACA,IAAA,IAAA,CAAK,oBAAoB,IAAK,CAAA,YAAA;AAAA,MAC5B,yBAAA;AAAA,MACA,mBAAA;AAAA,MACA,sBAAA;AAAA,KACF,CAAA;AACA,IAAA,IAAA,CAAK,kBAAkB,IAAK,CAAA,YAAA;AAAA,MAC1B,yBAAA;AAAA,MACA,iBAAA;AAAA,MACA,oBAAA;AAAA,KACF,CAAA;AACA,IAAA,IAAA,CAAK,oBAAoB,IAAK,CAAA,YAAA;AAAA,MAC5B,yBAAA;AAAA,MACA,mBAAA;AAAA,MACA,sBAAA;AAAA,KACF,CAAA;AAEA,IAAA,IAAI,QAAQ,UAAY,EAAA;AACtB,MAAA,OAAA,CAAQ,UACL,CAAA,MAAA;AAAA,QACC,CAAC,cACC,sBAAuB,CAAA,SAAA,CAAU,CAAC,GAAQ,KAAA,GAAA,KAAQ,SAAS,CAAI,GAAA,CAAA,CAAA;AAAA,OACnE,CACC,OAAQ,CAAA,CAAC,SAAqC,KAAA;AAC7C,QAAA,IAAI,CAAC,IAAK,CAAA,WAAA,CAAY,SAAc,CAAA,IAAA,CAAC,KAAK,QAAU,EAAA;AAClD,UAAA,IAAA,CAAK,WAAY,CAAA,SAAA,CAAA,GAAa,IAAK,CAAA,EAAA,CAAG,aAAa,SAAS,CAAA,CAAA;AAAA,SAC9D;AAAA,OACD,CAAA,CAAA;AAEH,MAAA,OAAA,CAAQ,UACL,CAAA,MAAA;AAAA,QACC,CAAC,cACC,sBAAuB,CAAA,SAAA,CAAU,CAAC,GAAQ,KAAA,GAAA,KAAQ,SAAS,CAAI,GAAA,CAAA,CAAA;AAAA,OACnE,CACC,OAAQ,CAAA,CAAC,SAAqC,KAAA;AAC7C,QAAA,IAAI,CAAC,IAAA,CAAK,WAAY,CAAA,SAAA,CAAA,IAAc,KAAK,QAAU,EAAA;AACjD,UAAA,IAAA,CAAK,WAAY,CAAA,SAAA,CAAA,GAAa,IAAK,CAAA,EAAA,CAAG,aAAa,SAAS,CAAA,CAAA;AAAA,SAC9D;AAAA,OACD,CAAA,CAAA;AAEH,MAAA,OAAA,CAAQ,UACL,CAAA,MAAA;AAAA,QACC,CAAC,cACC,uBAAwB,CAAA,SAAA,CAAU,CAAC,GAAQ,KAAA,GAAA,KAAQ,SAAS,CAAI,GAAA,CAAA,CAAA;AAAA,OACpE,CACC,OAAQ,CAAA,CAAC,SAAqC,KAAA;AAC7C,QAAI,IAAA,CAAC,IAAK,CAAA,WAAA,CAAY,SAAY,CAAA,EAAA;AAChC,UAAA,IAAA,CAAK,WAAY,CAAA,SAAA,CAAA,GAAa,IAAK,CAAA,EAAA,CAAG,aAAa,SAAS,CAAA,CAAA;AAAA,SAC9D;AAAA,OACD,CAAA,CAAA;AAAA,KACL;AAAA,GACF;AAAA,EAKA,IAAI,EAAK,GAAA;AACP,IAAA,OAAO,IAAK,CAAA,GAAA,CAAA;AAAA,GACd;AAAA,EAKA,IAAI,UAAa,GAAA;AACf,IAAO,OAAA;AAAA,MACL,KAAK,IAAK,CAAA,IAAA;AAAA,MACV,KAAA,EAAO,KAAK,MAAO,CAAA,KAAA;AAAA,MACnB,OAAO,IAAK,CAAA,MAAA;AAAA,MACZ,OAAO,IAAK,CAAA,MAAA;AAAA,MACZ,WAAW,IAAK,CAAA,UAAA;AAAA,MAChB,OAAO,IAAK,CAAA,MAAA;AAAA,MACZ,SAAS,IAAK,CAAA,QAAA;AAAA,MACd,WAAW,IAAK,CAAA,UAAA;AAAA,MAChB,aAAa,IAAK,CAAA,YAAA;AAAA,MAClB,oBAAoB,IAAK,CAAA,mBAAA;AAAA,MACzB,uBAAuB,IAAK,CAAA,sBAAA;AAAA,KAC9B,CAAA;AAAA,GACF;AAAA,EAKA,IAAI,MAAS,GAAA;AACX,IAAA,OAAO,KAAK,GAAI,CAAA,MAAA,CAAA;AAAA,GAClB;AAAA,EAKA,IAAI,OAAU,GAAA;AACZ,IAAO,OAAA,OAAA,CAAQ,KAAK,EAAE,CAAA,CAAA;AAAA,GACxB;AAAA,EAKA,IAAI,QAAW,GAAA;AACb,IAAO,OAAA,QAAA,CAAS,KAAK,EAAE,CAAA,CAAA;AAAA,GACzB;AAAA,EAKA,IAAI,UAAa,GAAA;AACf,IAAA,OAAO,IAAK,CAAA,WAAA,CAAA;AAAA,GACd;AAAA,EAMA,UAAU,GAAoB,EAAA;AAC5B,IAAA,OAAO,KAAK,WAAY,CAAA,GAAA,CAAA,CAAA;AAAA,GAC1B;AAAA,EAKA,IAAI,IAAO,GAAA;AACT,IAAO,OAAA;AAAA,MACL,KAAA,EAAO,iBAAiB,IAAK,CAAA,MAAA,GAAS,KAAK,MAAO,CAAA,WAAA,GAAc,KAAK,MAAO,CAAA,KAAA;AAAA,MAC5E,MAAA,EAAQ,kBAAkB,IAAK,CAAA,MAAA,GAAS,KAAK,MAAO,CAAA,YAAA,GAAe,KAAK,MAAO,CAAA,MAAA;AAAA,KACjF,CAAA;AAAA,GACF;AAAA,EAKA,IAAI,KAAe,GAAA;AACjB,IAAA,OAAO,IAAK,CAAA,MAAA,CAAA;AAAA,GACd;AAAA,EAKA,IAAI,kBAAqB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,mBAAA,CAAA;AAAA,GACd;AAAA,EAOA,OAAA,CAAQ,OAAe,MAAgB,EAAA;AACrC,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AAEd,IAAA,IAAA,CAAK,EAAG,CAAA,MAAA,CAAO,KAAQ,GAAA,KAAA,GAAQ,IAAK,CAAA,IAAA,CAAA;AACpC,IAAA,IAAA,CAAK,EAAG,CAAA,MAAA,CAAO,MAAS,GAAA,MAAA,GAAS,IAAK,CAAA,IAAA,CAAA;AAAA,GACxC;AAAA,EASA,YAAY,KAAO,EAAA,MAAA,EAAQ,CAAI,GAAA,CAAA,EAAG,IAAI,CAAG,EAAA;AACvC,IAAA,IAAA,CAAK,MAAO,CAAA,WAAA,CAAY,KAAO,EAAA,MAAA,EAAQ,GAAG,CAAC,CAAA,CAAA;AAAA,GAC7C;AAAA,EASA,YAAA,CAAa,SAAW,EAAA,MAAA,EAAQ,OAAS,EAAA;AACvC,IAAM,MAAA,IAAA,GAAO,KAAK,EAAG,CAAA,MAAA,CAAA,CAAA;AACrB,IAAA,IAAI,MAAU,IAAA,IAAA;AAAM,MAAO,OAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,EAAE,CAAA,CAAA;AAC5C,IAAI,IAAA,CAAC,IAAK,CAAA,WAAA,CAAY,SAAY,CAAA,EAAA;AAChC,MAAA,IAAA,CAAK,WAAY,CAAA,SAAA,CAAA,GAAa,IAAK,CAAA,EAAA,CAAG,aAAa,SAAS,CAAA,CAAA;AAAA,KAC9D;AACA,IAAM,MAAA,EAAA,GAAK,KAAK,WAAY,CAAA,SAAA,CAAA,CAAA;AAC5B,IAAA,OAAO,SAAU,EAAK,GAAA,EAAA,CAAG,SAAS,IAAK,CAAA,EAAE,IAAI,IAAQ,GAAA,EAAA,CAAA;AAAA,GACvD;AAAA,EAOA,aAAc,CAAA,EAAE,KAAO,EAAA,MAAA,EAAU,EAAA;AAC/B,IAAA,MAAM,aAAoB,EAAC,CAAA;AAE3B,IAAM,KAAA,CAAA,QAAA,CAAS,CAAC,IAAS,KAAA;AACvB,MAAA,IAAI,CAAC,IAAK,CAAA,OAAA;AAAS,QAAO,OAAA,IAAA,CAAA;AAC1B,MAAA,IAAI,CAAC,IAAK,CAAA,IAAA;AAAM,QAAA,OAAA;AAEhB,MAAA,IAAI,IAAK,CAAA,YAAA,IAAgB,IAAK,CAAA,aAAA,IAAiB,MAAQ,EAAA;AACrD,QAAI,IAAA,CAAC,MAAO,CAAA,qBAAA,CAAsB,IAAI,CAAA;AAAG,UAAA,OAAA;AAAA,OAC3C;AAEA,MAAA,UAAA,CAAW,KAAK,IAAI,CAAA,CAAA;AAAA,KACrB,CAAA,CAAA;AAED,IAAO,OAAA,UAAA,CAAA;AAAA,GACT;AAAA,EAMA,OAAO,MAAsB,EAAA;AAC3B,IAAM,MAAA,EAAE,OAAO,MAAQ,EAAA,MAAA,GAAS,MAAM,MAAS,GAAA,IAAA,EAAM,OAAU,GAAA,MAAA,CAAA;AAC/D,IAAA,IAAI,WAAW,IAAM,EAAA;AAEnB,MAAA,IAAA,CAAK,OAAO,eAAgB,CAAA;AAAA,QAC1B,MAAQ,EAAA,IAAA;AAAA,OACT,CAAA,CAAA;AACD,MAAK,IAAA,CAAA,WAAA,CAAY,KAAK,KAAQ,GAAA,IAAA,CAAK,MAAM,IAAK,CAAA,MAAA,GAAS,KAAK,IAAI,CAAA,CAAA;AAAA,KAC3D,MAAA;AAEL,MAAA,MAAA,CAAO,IAAK,EAAA,CAAA;AACZ,MAAA,IAAA,CAAK,WAAY,CAAA,MAAA,CAAO,KAAO,EAAA,MAAA,CAAO,MAAM,CAAA,CAAA;AAAA,KAC9C;AAEA,IAAA,IAAI,KAAU,IAAA,IAAA,CAAK,UAAc,IAAA,KAAA,KAAU,KAAQ,EAAA;AAEjD,MAAA,IAAI,IAAK,CAAA,MAAA,KAAW,CAAC,MAAA,IAAU,OAAO,KAAQ,CAAA,EAAA;AAC5C,QAAA,IAAA,CAAK,MAAO,CAAA,MAAA,CAAO,IAAK,CAAA,EAAA,CAAG,UAAU,CAAA,CAAA;AACrC,QAAK,IAAA,CAAA,MAAA,CAAO,aAAa,IAAI,CAAA,CAAA;AAAA,OAC/B;AAEA,MAAA,IAAA,CAAK,MAAM,IAAK,CAAA,MAAA,EAAQ,IAAK,CAAA,MAAA,EAAQ,KAAK,QAAQ,CAAA,CAAA;AAAA,KACpD;AAGA,IAAI,IAAA,MAAA;AAAQ,MAAA,KAAA,CAAM,iBAAkB,EAAA,CAAA;AAGpC,IAAI,IAAA,MAAA;AAAQ,MAAA,MAAA,CAAO,iBAAkB,EAAA,CAAA;AAErC,IAAA,MAAM,aAAa,IAAK,CAAA,aAAA,CAAc,EAAE,KAAA,EAAO,QAAQ,CAAA,CAAA;AAEvD,IAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,MAAM,MAAM,UAAW,CAAA,MAAA,CAAA;AACvB,IAAO,OAAA,CAAA,GAAI,KAAK,CAAK,EAAA,EAAA;AACnB,MAAA,MAAM,OAAO,UAAW,CAAA,CAAA,CAAA,CAAA;AACxB,MAAK,IAAA,CAAA,IAAA,CAAK,EAAE,MAAA,EAAQ,CAAA,CAAA;AAAA,KACtB;AAEA,IAAA,IAAI,MAAQ,EAAA;AACV,MAAA,MAAA,CAAO,MAAO,EAAA,CAAA;AAAA,KAChB;AAAA,GACF;AAAA,EAQA,KAAA,CAAM,QAAQ,IAAK,CAAA,MAAA,EAAQ,QAAQ,IAAK,CAAA,MAAA,EAAQ,OAAU,GAAA,IAAA,CAAK,QAAU,EAAA;AACvE,IAAA,IAAI,IAAO,GAAA,CAAA,CAAA;AAEX,IAAI,IAAA,KAAA;AAAO,MAAA,IAAA,IAAQ,KAAK,EAAG,CAAA,gBAAA,CAAA;AAC3B,IAAI,IAAA,KAAA;AAAO,MAAA,IAAA,IAAQ,KAAK,EAAG,CAAA,gBAAA,CAAA;AAC3B,IAAI,IAAA,OAAA;AAAS,MAAA,IAAA,IAAQ,KAAK,EAAG,CAAA,kBAAA,CAAA;AAE7B,IAAK,IAAA,CAAA,EAAA,CAAG,MAAM,IAAI,CAAA,CAAA;AAAA,GACpB;AAAA,EAUA,UACE,CAAA,KAAA,GAAQ,IACR,EAAA,GAAA,GAAoE,IACpE,EAAA;AACA,IAAK,IAAA,CAAA,MAAA,CAAO,MAAM,KAAK,CAAA,CAAA;AACvB,IAAA,IAAA,CAAK,gBAAgB,GAAG,CAAA,CAAA;AAAA,GAC1B;AACF;;ACzlBA,MAAM,6BAAgC,GAAA,+CAAA,CAAA;AAStC,MAAqB,iBAA4C,IAAK,CAAA;AAAA,EACpE,OAAA,CAAA;AAAA,EAEA,WAAA,CAAA;AAAA,EAEA,EAAA,CAAA;AAAA,EAEA,IAAA,CAAA;AAAA,EAEA,QAAA,CAAA;AAAA,EAGA,UAAA,CAAA;AAAA,EAEA,OAAA,CAAA;AAAA,EAEA,WAAY,CAAA,QAAA,EAAoB,OAAsB,GAAA,EAAI,EAAA;AACxD,IAAA,KAAA,CAAM,QAAQ,CAAA,CAAA;AACd,IAAA,IAAA,CAAK,KAAK,OAAS,EAAA,EAAA,IAAM,GAAI,CAAA,IAAA,CAAK,YAAY,IAAI,CAAA,CAAA;AAClD,IAAA,IAAA,CAAK,OAAO,OAAS,EAAA,IAAA,CAAA;AACrB,IAAA,IAAA,CAAK,WAAW,OAAS,EAAA,QAAA,CAAA;AACzB,IAAA,IAAA,CAAK,UAAU,OAAS,EAAA,MAAA,CAAA;AAExB,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AACf,IAAI,IAAA,IAAA,CAAK,YAAY,KAAW,CAAA,EAAA;AAC9B,MAAK,IAAA,CAAA,OAAA,GAAU,KAAK,YAAa,EAAA,CAAA;AAAA,KACnC;AAEA,IAAA,IAAA,CAAK,UAAa,GAAA,CAAA,CAAA;AAAA,GACpB;AAAA,EAEA,IAAI,MAAS,GAAA;AACX,IAAA,OAAO,IAAK,CAAA,OAAA,CAAA;AAAA,GACd;AAAA,EAMA,WAAW,MAAQ,EAAA;AACjB,IAAA,IAAA,CAAK,cAAc,IAAK,CAAA,OAAA,CAAA;AACxB,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AAAA,GACjB;AAAA,EAKA,aAAgB,GAAA;AACd,IAAA,IAAA,CAAK,UAAU,IAAK,CAAA,WAAA,CAAA;AAAA,GACtB;AAAA,EAKA,OAAgB,GAAA;AACd,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAAA,GACd;AAAA,EAEA,OAAO,EAAE,cAAA,GAAiB,KAAM,EAAA,GAAI,EAAI,EAAA;AAGtC,IAAA,MAAM,WAAW,IAAK,CAAA,MAAA,IAAU,IAAK,CAAA,YAAA,CAAa,KAAK,MAAM,CAAA,CAAA;AAC7D,IAAA,IAAI,KAAK,MAAQ,EAAA;AACf,MAAA,IAAA,CAAK,WAAY,EAAA,CAAA;AAAA,KACnB;AACA,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AAGf,IAAA,IAAI,YAAY,cAAgB,EAAA;AAC9B,MAAS,QAAA,CAAA,MAAA,CAAO,OAAO,CAAE,CAAA,OAAA,CAAQ,CAAC,KAAU,KAAA,KAAA,CAAM,QAAQ,CAAA,CAAA;AAAA,KAC5D;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAEA,IAAA,CAAK,YAAe,GAAA,IAAA,CAAK,MAAQ,EAAA;AAC/B,IAAM,MAAA,IAAI,MAAM,6BAA6B,CAAA,CAAA;AAAA,GAC/C;AAAA,EAEA,MAAS,GAAA;AACP,IAAA,IAAA,CAAK,KAAK,IAAI,CAAA,CAAA;AAAA,GAChB;AAAA,EAEA,WAAc,GAAA;AACZ,IAAM,MAAA,IAAI,MAAM,6BAA6B,CAAA,CAAA;AAAA,GAC/C;AAAA,EAEA,YAAe,GAAA;AACb,IAAM,MAAA,IAAI,MAAM,6BAA6B,CAAA,CAAA;AAAA,GAC/C;AAAA,EAEA,YAAe,GAAA;AACb,IAAM,MAAA,IAAI,MAAM,6BAA6B,CAAA,CAAA;AAAA,GAC/C;AAAA,EAEA,QAAmB,GAAA;AACjB,IAAA,OAAO,CAAG,EAAA,IAAA,CAAK,WAAY,CAAA,IAAA,CAAA,CAAA,EAAQ,IAAK,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAC1C;AACF;;AC7EA,MAAqB,qBAAqB,QAA8B,CAAA;AAAA,EAI/D,KAAA,CAAA;AAAA,EAKA,MAAA,CAAA;AAAA,EAEP,eAAA,CAAA;AAAA,EAEA,WAAY,CAAA,QAAA,EAAoB,OAAwC,GAAA,EAA2B,EAAA;AACjG,IAAA,KAAA,CAAM,QAAU,EAAA;AAAA,MACd,GAAG,OAAA;AAAA,MACH,MAAQ,EAAA,OAAA,CAAQ,MAAU,IAAA,QAAA,CAAS,EAAG,CAAA,iBAAA;AAAA,KACvC,CAAA,CAAA;AAED,IAAK,IAAA,CAAA,eAAA,GAAkB,KAAK,OAAQ,CAAA,MAAA,CAAA;AAEpC,IAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,OAAQ,CAAA,KAAA,CAAA;AAC1B,IAAK,IAAA,CAAA,MAAA,GAAS,KAAK,OAAQ,CAAA,MAAA,CAAA;AAE3B,IAAQ,OAAA,CAAA,MAAA;AAAA,MACN,IAAK,CAAA,KAAA,GAAQ,CAAK,IAAA,IAAA,CAAK,MAAS,GAAA,CAAA;AAAA,MAChC,uEAAA;AAAA,KACF,CAAA;AACA,IAAA,IAAA,CAAK,IAAK,EAAA,CAAA;AACV,IAAA,QAAA,CAAS,EAAG,CAAA,mBAAA;AAAA,MACV,SAAS,EAAG,CAAA,YAAA;AAAA,MACZ,IAAK,CAAA,eAAA;AAAA,MACL,IAAK,CAAA,KAAA;AAAA,MACL,IAAK,CAAA,MAAA;AAAA,KACP,CAAA;AAAA,GACF;AAAA,EAOA,MAAA,CAAO,OAAO,MAAQ,EAAA;AACpB,IAAA,IAAI,KAAU,KAAA,IAAA,CAAK,KAAS,IAAA,MAAA,KAAW,IAAK,CAAA,MAAA;AAAQ,MAAA,OAAA;AACpD,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAA,IAAA,CAAK,IAAK,EAAA,CAAA;AACV,IAAK,IAAA,CAAA,EAAA,CAAG,oBAAoB,IAAK,CAAA,EAAA,CAAG,cAAc,IAAK,CAAA,eAAA,EAAiB,OAAO,MAAM,CAAA,CAAA;AACrF,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAAA,GACd;AAAA,EAKA,IAAO,GAAA;AACL,IAAA,IAAA,CAAK,GAAG,gBAAiB,CAAA,IAAA,CAAK,EAAG,CAAA,YAAA,EAAc,KAAK,MAAM,CAAA,CAAA;AAAA,GAC5D;AAAA,EAKA,MAAS,GAAA;AACP,IAAA,IAAA,CAAK,EAAG,CAAA,gBAAA,CAAiB,IAAK,CAAA,EAAA,CAAG,cAAc,IAAI,CAAA,CAAA;AAAA,GACrD;AAAA,EAGA,WAAc,GAAA;AAAA,GAAC;AAAA,EAKf,OAAU,GAAA;AACR,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AACZ,IAAA,IAAA,CAAK,YAAa,EAAA,CAAA;AAAA,GACpB;AAAA,EAKA,YAAe,GAAA;AACb,IAAO,OAAA,IAAA,CAAK,GAAG,kBAAmB,EAAA,CAAA;AAAA,GACpC;AAAA,EAKA,YAAe,GAAA;AACb,IAAA,IAAA,CAAK,MAAU,IAAA,IAAA,CAAK,EAAG,CAAA,kBAAA,CAAmB,KAAK,MAAM,CAAA,CAAA;AAAA,GACvD;AACF;;ACPa,MAAA,UAAA,GAAa,IAAI,UAAA,CAAW,CAAC,CAAA,CAAA;AAsB1C,MAAqB,gBAA2D,QAAY,CAAA;AAAA,EAKnF,WAAc,GAAA,KAAA,CAAA;AAAA,EAKd,WAAc,GAAA,CAAA,CAAA;AAAA,EAKd,KAAA,CAAA;AAAA,EAKA,KAAA,CAAA;AAAA,EAKA,MAAA,CAAA;AAAA,EAKA,MAAA,CAAA;AAAA,EAEP,SAAuB,EAAC,CAAA;AAAA,EAOxB,YAAY,QAAoB,EAAA,OAAA,GAAsB,EAAC,EAAG,cAAc,IAAM,EAAA;AAC5E,IAAM,MAAA,EAAE,IAAO,GAAA,QAAA,CAAA;AACf,IAAA,MAAM,cAAiB,GAAA;AAAA,MACrB,QAAQ,EAAG,CAAA,UAAA;AAAA,MACX,MAAM,EAAG,CAAA,aAAA;AAAA,MACT,QAAQ,EAAG,CAAA,IAAA;AAAA,MACX,cAAA,EAAgB,OAAQ,CAAA,MAAA,IAAU,EAAG,CAAA,IAAA;AAAA,MACrC,OAAO,EAAG,CAAA,aAAA;AAAA,MACV,OAAO,EAAG,CAAA,aAAA;AAAA,MACV,eAAiB,EAAA,IAAA;AAAA,MACjB,WAAW,EAAG,CAAA,MAAA;AAAA,MACd,WAAW,EAAG,CAAA,MAAA;AAAA,MACd,gBAAkB,EAAA,KAAA;AAAA,MAClB,eAAiB,EAAA,CAAA;AAAA,MACjB,UAAY,EAAA,CAAA;AAAA,MACZ,KAAO,EAAA,KAAA;AAAA,MACP,KAAO,EAAA,CAAA;AAAA,KACT,CAAA;AAEA,IAAA,MAAM,MAAM,MAAO,CAAA,MAAA,CAAO,EAAC,EAAG,gBAAgB,OAAO,CAAA,CAAA;AACrD,IAAA,KAAA,CAAM,UAAU,GAAG,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,WAAc,GAAA,CAAA,CAAA;AACnB,IAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,OAAQ,CAAA,KAAA,CAAA;AAC1B,IAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,OAAQ,CAAA,KAAA,CAAA;AAC1B,IAAK,IAAA,CAAA,MAAA,GAAS,KAAK,OAAQ,CAAA,MAAA,CAAA;AAC3B,IAAK,IAAA,CAAA,MAAA,GAAS,KAAK,OAAQ,CAAA,MAAA,CAAA;AAC3B,IAAA,IAAA,CAAK,OAAO,OAAU,GAAA,CAAA,CAAA,CAAA;AACtB,IAAK,IAAA,CAAA,WAAA,GAAc,QAAQ,WAAW,CAAA,CAAA;AACtC,IAAA,IAAI,KAAK,WAAa,EAAA;AACpB,MAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAAA,KACd;AAAA,GACF;AAAA,EAQA,QAAQ,KAAO,EAAA,KAAA,GAAQ,KAAK,KAAO,EAAA,MAAA,GAAS,KAAK,MAAQ,EAAA;AACvD,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAA,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;AAAA,GACrB;AAAA,EAMA,WAAW,OAAqB,EAAA;AAC9B,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,SAAS,OAAO,CAAA,CAAA;AAClD,IAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,OAAQ,CAAA,KAAA,CAAA;AAC1B,IAAK,IAAA,CAAA,MAAA,GAAS,KAAK,OAAQ,CAAA,MAAA,CAAA;AAC3B,IAAA,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;AAAA,GACrB;AAAA,EAMA,QAAQ,GAAa,EAAA;AACnB,IAAA,OAAO,IAAI,OAAA,CAAQ,CAAC,OAAA,EAAS,MAAW,KAAA;AACtC,MAAM,MAAA,KAAA,GAAQ,IAAI,KAAM,EAAA,CAAA;AACxB,MAAA,KAAA,CAAM,SAAS,MAAM;AACnB,QAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,EAAO,KAAM,CAAA,KAAA,EAAO,MAAM,MAAM,CAAA,CAAA;AAC7C,QAAA,OAAA,CAAQ,IAAI,CAAA,CAAA;AAAA,OACd,CAAA;AACA,MAAM,KAAA,CAAA,OAAA,GAAU,CAAC,CAAM,KAAA;AACrB,QAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAAA,OACV,CAAA;AACA,MAAA,KAAA,CAAM,WAAc,GAAA,GAAA,CAAA;AACpB,MAAA,KAAA,CAAM,GAAM,GAAA,GAAA,CAAA;AAAA,KACb,CAAA,CAAA;AAAA,GACH;AAAA,EAMA,MAAA,CAAO,QAAQ,CAAG,EAAA;AAChB,IAAM,MAAA,UAAA,GAAa,EAAE,IAAK,CAAA,KAAA,KAAU,KAAK,MAAO,CAAA,KAAA,IAAS,CAAC,IAAK,CAAA,WAAA,CAAA,CAAA;AAC/D,IAAM,MAAA,OAAA,GACJ,UACA,IAAA,IAAA,CAAK,aAAc,CAAA,YAAA,CAAa,WAAW,IAAK,CAAA,EAAA,IAChD,IAAK,CAAA,aAAA,CAAc,iBAAsB,KAAA,KAAA,CAAA;AAC3C,IAAA,IAAI,OAAS,EAAA;AACX,MAAK,IAAA,CAAA,aAAA,CAAc,iBAAiB,KAAK,CAAA,CAAA;AACzC,MAAA,IAAA,CAAK,KAAK,KAAK,CAAA,CAAA;AAAA,KACjB;AACA,IAAA,IAAI,CAAC,UAAA;AAAY,MAAA,OAAA;AACjB,IAAA,IAAA,CAAK,WAAc,GAAA,KAAA,CAAA;AACnB,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,KAAU,KAAA,IAAA,CAAK,OAAO,KAAO,EAAA;AAC5C,MAAK,IAAA,CAAA,EAAA,CAAG,cAAc,IAAK,CAAA,MAAA,EAAQ,KAAK,EAAG,CAAA,cAAA,EAAgB,IAAK,CAAA,OAAA,CAAQ,KAAe,CAAA,CAAA;AACvF,MAAK,IAAA,CAAA,MAAA,CAAO,KAAQ,GAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAA;AAAA,KACnC;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,KAAU,KAAA,IAAA,CAAK,OAAO,KAAO,EAAA;AAC5C,MAAK,IAAA,CAAA,EAAA,CAAG,cAAc,IAAK,CAAA,MAAA,EAAQ,KAAK,EAAG,CAAA,cAAA,EAAgB,IAAK,CAAA,OAAA,CAAQ,KAAe,CAAA,CAAA;AACvF,MAAK,IAAA,CAAA,MAAA,CAAO,KAAQ,GAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAA;AAAA,KACnC;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,SAAc,KAAA,IAAA,CAAK,OAAO,SAAW,EAAA;AACpD,MAAA,IAAA,CAAK,EAAG,CAAA,aAAA;AAAA,QACN,IAAK,CAAA,MAAA;AAAA,QACL,KAAK,EAAG,CAAA,kBAAA;AAAA,QACR,KAAK,OAAQ,CAAA,SAAA;AAAA,OACf,CAAA;AACA,MAAK,IAAA,CAAA,MAAA,CAAO,SAAY,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAA;AAAA,KACvC;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,SAAc,KAAA,IAAA,CAAK,OAAO,SAAW,EAAA;AACpD,MAAA,IAAA,CAAK,EAAG,CAAA,aAAA;AAAA,QACN,IAAK,CAAA,MAAA;AAAA,QACL,KAAK,EAAG,CAAA,kBAAA;AAAA,QACR,KAAK,OAAQ,CAAA,SAAA;AAAA,OACf,CAAA;AACA,MAAK,IAAA,CAAA,MAAA,CAAO,SAAY,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAA;AAAA,KACvC;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,KAAU,KAAA,IAAA,CAAK,cAAc,KAAO,EAAA;AACnD,MAAA,IAAA,CAAK,GAAG,WAAY,CAAA,IAAA,CAAK,GAAG,mBAAqB,EAAA,IAAA,CAAK,QAAQ,KAAgB,CAAA,CAAA;AAC9E,MAAK,IAAA,CAAA,aAAA,CAAc,KAAQ,GAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAA;AAAA,KAC1C;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,gBAAqB,KAAA,IAAA,CAAK,cAAc,gBAAkB,EAAA;AACzE,MAAA,IAAA,CAAK,EAAG,CAAA,WAAA;AAAA,QACN,KAAK,EAAG,CAAA,8BAAA;AAAA,QACR,KAAK,OAAQ,CAAA,gBAAA;AAAA,OACf,CAAA;AACA,MAAK,IAAA,CAAA,aAAA,CAAc,gBAAmB,GAAA,IAAA,CAAK,OAAQ,CAAA,gBAAA,CAAA;AAAA,KACrD;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,eAAoB,KAAA,IAAA,CAAK,cAAc,eAAiB,EAAA;AACvE,MAAA,IAAA,CAAK,GAAG,WAAY,CAAA,IAAA,CAAK,GAAG,gBAAkB,EAAA,IAAA,CAAK,QAAQ,eAAyB,CAAA,CAAA;AACpF,MAAK,IAAA,CAAA,aAAA,CAAc,eAAkB,GAAA,IAAA,CAAK,OAAQ,CAAA,eAAA,CAAA;AAAA,KACpD;AAEA,IAAI,IAAA,IAAA,CAAK,QAAQ,UAAc,IAAA,IAAA,CAAK,QAAQ,UAAe,KAAA,IAAA,CAAK,cAAc,UAAY,EAAA;AACxF,MAAA,MAAM,2BACJ,GAAA,IAAA,CAAK,EAAG,CAAA,YAAA,CAAa,gCAAgC,CACrD,IAAA,IAAA,CAAK,EAAG,CAAA,YAAA,CAAa,oCAAoC,CAAA,IACzD,IAAK,CAAA,EAAA,CAAG,aAAa,uCAAuC,CAAA,CAAA;AAC9D,MAAA,IAAI,2BAA6B,EAAA;AAC/B,QAAM,MAAA,GAAA,GAAM,KAAK,EAAG,CAAA,YAAA;AAAA,UAClB,2BAA4B,CAAA,8BAAA;AAAA,SAC9B,CAAA;AACA,QAAI,IAAA,CAAA,GAAI,KAAK,OAAQ,CAAA,UAAA,CAAA;AACrB,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,UAAA,GAAa,GAAK,EAAA;AACjC,UAAI,CAAA,GAAA,GAAA,CAAA;AACJ,UAAQ,OAAA,CAAA,IAAA;AAAA,YACN,CAA2E,wEAAA,EAAA,GAAA,CAAA,cAAA,CAAA;AAAA,WAC7E,CAAA;AAAA,SACF;AACA,QAAA,IAAA,CAAK,EAAG,CAAA,aAAA;AAAA,UACN,IAAK,CAAA,MAAA;AAAA,UACL,2BAA4B,CAAA,0BAAA;AAAA,UAC5B,CAAA;AAAA,SACF,CAAA;AAAA,OACF;AACA,MAAK,IAAA,CAAA,aAAA,CAAc,UAAa,GAAA,IAAA,CAAK,OAAQ,CAAA,UAAA,CAAA;AAAA,KAC/C;AAEA,IAAA,IAAI,KAAK,KAAO,EAAA;AACd,MAAI,IAAA,IAAA,CAAK,MAAM,KAAO,EAAA;AACpB,QAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,KAAM,CAAA,KAAA,CAAA;AACxB,QAAK,IAAA,CAAA,MAAA,GAAS,KAAK,KAAM,CAAA,MAAA,CAAA;AAAA,OAC3B;AAEA,MAAA,IAAI,KAAK,QAAS,CAAA,QAAA,IAAY,SAAS,IAAK,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAC3D,QAAA,IAAA,CAAK,EAAG,CAAA,UAAA;AAAA,UACN,IAAK,CAAA,MAAA;AAAA,UACL,KAAK,OAAQ,CAAA,KAAA;AAAA,UACb,KAAK,OAAQ,CAAA,cAAA;AAAA,UACb,IAAK,CAAA,KAAA;AAAA,UACL,IAAK,CAAA,MAAA;AAAA,UACL,CAAA;AAAA,UACA,KAAK,OAAQ,CAAA,MAAA;AAAA,UACb,KAAK,OAAQ,CAAA,IAAA;AAAA,UACb,IAAK,CAAA,KAAA;AAAA,UACL,KAAK,OAAQ,CAAA,MAAA;AAAA,SACf,CAAA;AAAA,OACK,MAAA;AACL,QAAA,IAAI,WAAY,CAAA,MAAA,CAAO,IAAK,CAAA,KAAK,CAAG,EAAA;AAClC,UAAA,IAAA,CAAK,EAAG,CAAA,UAAA;AAAA,YACN,IAAK,CAAA,MAAA;AAAA,YACL,KAAK,OAAQ,CAAA,KAAA;AAAA,YACb,KAAK,OAAQ,CAAA,cAAA;AAAA,YACb,IAAK,CAAA,KAAA;AAAA,YACL,IAAK,CAAA,MAAA;AAAA,YACL,CAAA;AAAA,YACA,KAAK,OAAQ,CAAA,MAAA;AAAA,YACb,KAAK,OAAQ,CAAA,IAAA;AAAA,YACb,IAAK,CAAA,KAAA;AAAA,WACP,CAAA;AAAA,SACK,MAAA;AACL,UAAA,IAAA,CAAK,EAAG,CAAA,UAAA;AAAA,YACN,IAAK,CAAA,MAAA;AAAA,YACL,KAAK,OAAQ,CAAA,KAAA;AAAA,YACb,KAAK,OAAQ,CAAA,cAAA;AAAA,YACb,KAAK,OAAQ,CAAA,MAAA;AAAA,YACb,KAAK,OAAQ,CAAA,IAAA;AAAA,YACb,IAAK,CAAA,KAAA;AAAA,WACP,CAAA;AAAA,SACF;AAAA,OACF;AAEA,MAAI,IAAA,IAAA,CAAK,QAAQ,eAAiB,EAAA;AAChC,QAAA,IACE,IAAK,CAAA,QAAA,CAAS,QACb,IAAA,YAAA,CAAa,IAAK,CAAA,KAAA,CAAM,KAAK,CAAA,IAAK,YAAa,CAAA,IAAA,CAAK,KAAM,CAAA,MAAM,CACjE,EAAA;AACA,UAAK,IAAA,CAAA,EAAA,CAAG,cAAe,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,SAC7B,MAAA;AACL,UAAA,IAAA,CAAK,QAAQ,eAAkB,GAAA,KAAA,CAAA;AAC/B,UAAK,IAAA,CAAA,OAAA,CAAQ,KAAQ,GAAA,IAAA,CAAK,EAAG,CAAA,aAAA,CAAA;AAC7B,UAAK,IAAA,CAAA,OAAA,CAAQ,KAAQ,GAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAA;AAClC,UAAK,IAAA,CAAA,OAAA,CAAQ,SAAY,GAAA,IAAA,CAAK,EAAG,CAAA,MAAA,CAAA;AAAA,SACnC;AAAA,OACF;AAAA,KACK,MAAA;AACL,MAAA,IAAI,KAAK,QAAS,CAAA,QAAA,IAAY,SAAS,IAAK,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAC3D,QAAI,IAAA,IAAA,CAAK,QAAQ,CAAG,EAAA;AAClB,UAAC,KAAK,EAA8B,CAAA,UAAA;AAAA,YAClC,IAAK,CAAA,MAAA;AAAA,YACL,KAAK,OAAQ,CAAA,KAAA;AAAA,YACb,KAAK,OAAQ,CAAA,cAAA;AAAA,YACb,IAAK,CAAA,KAAA;AAAA,YACL,IAAK,CAAA,MAAA;AAAA,YACL,CAAA;AAAA,YACA,KAAK,OAAQ,CAAA,MAAA;AAAA,YACb,KAAK,OAAQ,CAAA,IAAA;AAAA,YACb,KAAK,OAAQ,CAAA,MAAA;AAAA,WACf,CAAA;AAAA,SACK,MAAA;AACL,UAAA,IAAA,CAAK,EAAG,CAAA,UAAA;AAAA,YACN,IAAK,CAAA,MAAA;AAAA,YACL,CAAA;AAAA,YACA,KAAK,EAAG,CAAA,IAAA;AAAA,YACR,CAAA;AAAA,YACA,CAAA;AAAA,YACA,CAAA;AAAA,YACA,KAAK,EAAG,CAAA,IAAA;AAAA,YACR,KAAK,EAAG,CAAA,aAAA;AAAA,YACR,UAAA;AAAA,YACA,KAAK,OAAQ,CAAA,MAAA;AAAA,WACf,CAAA;AAAA,SACF;AAAA,OACK,MAAA;AACL,QAAI,IAAA,IAAA,CAAK,QAAQ,CAAG,EAAA;AAClB,UAAA,IAAA,CAAK,EAAG,CAAA,UAAA;AAAA,YACN,IAAK,CAAA,MAAA;AAAA,YACL,KAAK,OAAQ,CAAA,KAAA;AAAA,YACb,KAAK,OAAQ,CAAA,cAAA;AAAA,YACb,IAAK,CAAA,KAAA;AAAA,YACL,IAAK,CAAA,MAAA;AAAA,YACL,CAAA;AAAA,YACA,KAAK,OAAQ,CAAA,MAAA;AAAA,YACb,KAAK,OAAQ,CAAA,IAAA;AAAA,YACb,IAAA;AAAA,WACF,CAAA;AAAA,SACK,MAAA;AACL,UAAA,IAAA,CAAK,EAAG,CAAA,UAAA;AAAA,YACN,IAAK,CAAA,MAAA;AAAA,YACL,CAAA;AAAA,YACA,KAAK,EAAG,CAAA,IAAA;AAAA,YACR,CAAA;AAAA,YACA,CAAA;AAAA,YACA,CAAA;AAAA,YACA,KAAK,EAAG,CAAA,IAAA;AAAA,YACR,KAAK,EAAG,CAAA,aAAA;AAAA,YACR,UAAA;AAAA,WACF,CAAA;AAAA,SACF;AAAA,OACF;AAAA,KACF;AACA,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,IAAK,CAAA,KAAA,CAAA;AACzB,IAAA,IAAA,CAAK,OAAO,OAAW,IAAA,CAAA,CAAA;AAAA,GACzB;AAAA,EAMA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAK,WAAa,EAAA;AAC5B,IAAA,IAAI,KAAK,aAAc,CAAA,YAAA,CAAa,IAAK,CAAA,aAAA,CAAc,uBAAuB,IAAK,CAAA,EAAA;AAAI,MAAA,OAAA;AACvF,IAAA,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;AACnB,IAAA,IAAA,CAAK,aAAc,CAAA,YAAA,CAAa,IAAK,CAAA,WAAA,CAAA,GAAe,IAAK,CAAA,EAAA,CAAA;AACzD,IAAA,IAAA,CAAK,EAAG,CAAA,WAAA,CAAY,IAAK,CAAA,MAAA,EAAQ,KAAK,MAAM,CAAA,CAAA;AAAA,GAC9C;AAAA,EAKA,MAAS,GAAA;AACP,IAAA,IAAA,CAAK,GAAG,aAAc,CAAA,IAAA,CAAK,EAAG,CAAA,QAAA,GAAW,KAAK,WAAW,CAAA,CAAA;AACzD,IAAA,IAAA,CAAK,EAAG,CAAA,WAAA,CAAY,IAAK,CAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;AACrC,IAAO,OAAA,IAAA,CAAK,aAAc,CAAA,YAAA,CAAa,IAAK,CAAA,WAAA,CAAA,CAAA;AAAA,GAC9C;AAAA,EAKA,OAAU,GAAA;AACR,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AACZ,IAAA,KAAA,CAAM,OAAQ,EAAA,CAAA;AAAA,GAChB;AAAA,EAKA,WAAc,GAAA;AACZ,IAAA,IAAA,CAAK,MAAS,GAAA;AAAA,MACZ,OAAS,EAAA,CAAA,CAAA;AAAA,KACX,CAAA;AAAA,GACF;AAAA,EAMA,YAAe,GAAA;AACb,IAAO,OAAA,IAAA,CAAK,GAAG,aAAc,EAAA,CAAA;AAAA,GAC/B;AAAA,EAKA,YAAe,GAAA;AACb,IAAA,IAAI,KAAK,MAAQ,EAAA;AACf,MAAK,IAAA,CAAA,EAAA,CAAG,aAAc,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,KACnC;AAAA,GACF;AAAA,EAKA,QAAmB,GAAA;AACjB,IAAA,OAAO,CAAW,QAAA,EAAA,IAAA,CAAK,EAAM,CAAA,CAAA,EAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GAClD;AACF;;ACjfA,MAAqB,oBAAoB,OAA4B,CAAA;AAAA,EAK5D,WAAc,GAAA,IAAA,CAAA;AAAA,EAErB,WAAY,CAAA,QAAA,EAAU,OAAuC,GAAA,EAAI,EAAA;AAC/D,IAAA,KAAA,CAAM,QAAU,EAAA;AAAA,MACd,GAAG,OAAA;AAAA,MACH,OAAO,OAAQ,CAAA,IAAA;AAAA,MACf,gBAAkB,EAAA,IAAA;AAAA,MAClB,KAAO,EAAA,KAAA;AAAA,MACP,eAAiB,EAAA,CAAA;AAAA,KAClB,CAAA,CAAA;AAAA,GACH;AACF;;AC+CA,MAAqB,qBAAqB,QAA8B,CAAA;AAAA,EACtE,SAAA,CAAA;AAAA,EAEA,cAAA,CAAA;AAAA,EAEO,KAAA,CAAA;AAAA,EAKA,KAAA,CAAA;AAAA,EAKA,MAAA,CAAA;AAAA,EAKA,QAAA,CAAA;AAAA,EAKA,kBAAA,CAAA;AAAA,EAKA,WAAA,CAAA;AAAA,EAKP,YAAA,CAAA;AAAA,EAKA,WAAA,CAAA;AAAA,EAKA,aAAA,CAAA;AAAA,EAMA,WAAY,CAAA,QAAA,EAAoB,OAAwC,GAAA,EAAI,EAAA;AAC1E,IAAA,KAAA,CAAM,QAAU,EAAA;AAAA,MACd,KAAO,EAAA,CAAA;AAAA,MACP,KAAO,EAAA,IAAA;AAAA,MACP,YAAc,EAAA,KAAA;AAAA,MACd,OAAS,EAAA,KAAA;AAAA,MACT,GAAG,OAAA;AAAA,KACJ,CAAA,CAAA;AAED,IAAK,IAAA,CAAA,cAAA,uBAAqB,GAAI,EAAA,CAAA;AAC9B,IAAK,IAAA,CAAA,SAAA,uBAAgB,GAAI,EAAA,CAAA;AACzB,IAAK,IAAA,CAAA,KAAA,GAAQ,OAAQ,CAAA,OAAA,CAAQ,KAAK,CAAA,CAAA;AAIlC,IAAA,IAAA,CAAK,cAAc,EAAC,CAAA;AACpB,IAAA,IAAA,CAAK,kBAAqB,GAAA,KAAA,CAAA;AAC1B,IAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,OAAQ,CAAA,KAAA,CAAA;AAC1B,IAAK,IAAA,CAAA,MAAA,GAAS,KAAK,OAAQ,CAAA,MAAA,CAAA;AAC3B,IAAK,IAAA,CAAA,QAAA,GAAW,IAAI,OAAQ,CAAA,CAAA,EAAG,GAAG,IAAK,CAAA,KAAA,EAAO,KAAK,MAAM,CAAA,CAAA;AACzD,IAAK,IAAA,CAAA,IAAA,GAAO,KAAK,OAAQ,CAAA,IAAA,CAAA;AACzB,IAAA,MAAM,WAAc,GAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,EAAC,CAAA;AAKjD,IAAI,IAAA,WAAA,CAAY,WAAW,CAAG,EAAA;AAC5B,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,OAAA,CAAQ,OAAQ,CAAK,EAAA,EAAA;AAC5C,QAAA,MAAM,GAAW,GAAA;AAAA,UACf,KAAA,EAAO,KAAK,EAAG,CAAA,aAAA;AAAA,UACf,KAAA,EAAO,KAAK,EAAG,CAAA,aAAA;AAAA,UACf,SAAA,EAAW,KAAK,EAAG,CAAA,MAAA;AAAA,UACnB,SAAA,EAAW,KAAK,EAAG,CAAA,MAAA;AAAA,UACnB,IAAA,EAAM,KAAK,EAAG,CAAA,aAAA;AAAA,UACd,MAAA,EAAQ,KAAK,EAAG,CAAA,IAAA;AAAA,UAChB,KAAO,EAAA,KAAA;AAAA,UACP,eAAiB,EAAA,KAAA;AAAA,UACjB,GAAG,OAAA;AAAA,SACL,CAAA;AACA,QAAI,IAAA,OAAA,CAAA;AACJ,QAAA,IAAI,IAAI,IAAM,EAAA;AACZ,UAAU,OAAA,GAAA,IAAI,WAAY,CAAA,QAAA,EAAU,GAAG,CAAA,CAAA;AAAA,SAClC,MAAA;AACL,UAAA,OAAA,GAAU,IAAI,OAAA;AAAA,YACZ,QAAA;AAAA,YACA,KAAsE,GAAK,EAAA;AAAA,cACzE,MAAA;AAAA,cACA,MAAA;AAAA,cACA,aAAA;AAAA,cACA,cAAA;AAAA,aACD,CAAA;AAAA,WACH,CAAA;AAAA,SACF;AACA,QAAA,WAAA,CAAY,KAAK,CAAC,IAAA,CAAK,GAAG,iBAAoB,GAAA,CAAA,EAAG,OAAO,CAAC,CAAA,CAAA;AAAA,OAC3D;AACA,MACE,IAAA,OAAA,CAAQ,YACP,KAAA,QAAA,CAAS,QAGP,IAAA,CAAC,QAAS,CAAA,QAAA,IAAY,QAAS,CAAA,EAAA,CAAG,YAAa,CAAA,qBAAqB,CACvE,CAAA,EAAA;AACA,QAAM,MAAA,OAAA,GAAU,IAAI,OAAA,CAAQ,QAAU,EAAA;AAAA,UACpC,OAAO,IAAK,CAAA,KAAA;AAAA,UACZ,QAAQ,IAAK,CAAA,MAAA;AAAA,UACb,SAAA,EAAW,KAAK,EAAG,CAAA,OAAA;AAAA,UACnB,SAAA,EAAW,KAAK,EAAG,CAAA,OAAA;AAAA,UACnB,MAAA,EAAQ,KAAK,EAAG,CAAA,eAAA;AAAA,UAChB,gBAAgB,QAAS,CAAA,QAAA,GAAW,KAAK,EAAG,CAAA,iBAAA,GAAoB,KAAK,EAAG,CAAA,eAAA;AAAA,UACxE,IAAA,EAAM,KAAK,EAAG,CAAA,YAAA;AAAA,SACf,CAAA,CAAA;AACD,QAAA,WAAA,CAAY,KAAK,CAAC,IAAA,CAAK,EAAG,CAAA,gBAAA,EAAkB,OAAO,CAAC,CAAA,CAAA;AAAA,OAC/C,MAAA;AACL,QAAM,MAAA,EAAE,KAAO,EAAA,OAAA,EAAY,GAAA,OAAA,CAAA;AAC3B,QAAI,IAAA,KAAA,IAAS,CAAC,OAAS,EAAA;AACrB,UAAM,MAAA,YAAA,GAAe,IAAI,YAAA,CAAa,QAAU,EAAA;AAAA,YAC9C,MAAA,EAAQ,KAAK,EAAG,CAAA,iBAAA;AAAA,YAChB,OAAO,IAAK,CAAA,KAAA;AAAA,YACZ,QAAQ,IAAK,CAAA,MAAA;AAAA,WACd,CAAA,CAAA;AACD,UAAA,WAAA,CAAY,KAAK,CAAC,IAAA,CAAK,EAAG,CAAA,gBAAA,EAAkB,YAAY,CAAC,CAAA,CAAA;AAAA,SAC3D,MAAA,IAAW,OAAW,IAAA,CAAC,KAAO,EAAA;AAC5B,UAAM,MAAA,YAAA,GAAe,IAAI,YAAA,CAAa,QAAU,EAAA;AAAA,YAC9C,MAAA,EAAQ,KAAK,EAAG,CAAA,cAAA;AAAA,YAChB,OAAO,IAAK,CAAA,KAAA;AAAA,YACZ,QAAQ,IAAK,CAAA,MAAA;AAAA,WACd,CAAA,CAAA;AACD,UAAA,WAAA,CAAY,KAAK,CAAC,IAAA,CAAK,EAAG,CAAA,kBAAA,EAAoB,YAAY,CAAC,CAAA,CAAA;AAAA,SAC7D,MAAA,IAAW,SAAS,OAAS,EAAA;AAC3B,UAAM,MAAA,YAAA,GAAe,IAAI,YAAA,CAAa,QAAU,EAAA;AAAA,YAC9C,MAAA,EAAQ,KAAK,EAAG,CAAA,aAAA;AAAA,YAChB,OAAO,IAAK,CAAA,KAAA;AAAA,YACZ,QAAQ,IAAK,CAAA,MAAA;AAAA,WACd,CAAA,CAAA;AACD,UAAA,WAAA,CAAY,KAAK,CAAC,IAAA,CAAK,EAAG,CAAA,wBAAA,EAA0B,YAAY,CAAC,CAAA,CAAA;AAAA,SACnE;AAAA,OACF;AAAA,KACF;AACA,IAAA,IAAA,CAAK,OAAO,WAAW,CAAA,CAAA;AAAA,GACzB;AAAA,EAEA,IAAI,OAAU,GAAA;AACZ,IAAA,OAAO,IAAK,CAAA,SAAA,CAAU,MAAO,EAAA,CAAE,MAAO,CAAA,KAAA,CAAA;AAAA,GACxC;AAAA,EAMA,IAAI,YAAY,MAAQ,EAAA;AACtB,IAAA,IAAA,CAAK,YAAe,GAAA,MAAA,CAAA;AAAA,GACtB;AAAA,EAKA,IAAI,WAAc,GAAA;AAChB,IAAA,OAAO,IAAK,CAAA,YAAA,CAAA;AAAA,GACd;AAAA,EAMA,IAAI,WAAW,KAAO,EAAA;AACpB,IAAA,IAAA,CAAK,WAAc,GAAA,KAAA,CAAA;AAAA,GACrB;AAAA,EAKA,IAAI,UAAa,GAAA;AACf,IAAA,OAAO,IAAK,CAAA,WAAA,CAAA;AAAA,GACd;AAAA,EAMA,IAAI,aAAa,OAAS,EAAA;AACxB,IAAA,IAAA,CAAK,aAAgB,GAAA,OAAA,CAAA;AAAA,GACvB;AAAA,EAKA,IAAI,YAAe,GAAA;AACjB,IAAA,OAAO,IAAK,CAAA,aAAA,CAAA;AAAA,GACd;AAAA,EAMA,OAAO,WAA2B,EAAA;AAChC,IAAA,IAAA,CAAK,eAAe,EAAC,CAAA;AACrB,IAAA,IAAA,CAAK,WAAc,GAAA,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,aAAgB,GAAA,CAAA,CAAA;AACrB,IAAA,KAAA,MAAW,cAAc,WAAa,EAAA;AACpC,MAAA,MAAM,SAAS,UAAW,CAAA,CAAA,CAAA,CAAA;AAC1B,MAAA,MAAM,SAAS,UAAW,CAAA,CAAA,CAAA,CAAA;AAC1B,MAAA,IAAI,kBAAkB,YAAc,EAAA;AAClC,QAAK,IAAA,CAAA,cAAA,CAAe,GAAI,CAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;AAAA,OACxC,MAAA,IAAW,kBAAkB,OAAS,EAAA;AACpC,QAAK,IAAA,CAAA,SAAA,CAAU,GAAI,CAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;AACjC,QAAK,IAAA,CAAA,WAAA,CAAY,KAAK,MAAM,CAAA,CAAA;AAAA,OAC9B;AACA,MAAM,MAAA,CAAA,GAAI,MAAS,GAAA,IAAA,CAAK,EAAG,CAAA,iBAAA,CAAA;AAC3B,MAAA,IAAA,CAAK,aAAa,CAAK,CAAA,GAAA,CAAC,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAAA,KACpC;AAEA,IAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,GAAS,CAAG,EAAA;AAE3B,MAAI,IAAA,IAAA,CAAK,SAAS,QAAU,EAAA;AAC1B,QAAC,IAAK,CAAA,EAAA,CAA8B,WAAY,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AAAA,OAC3D,MAAA;AACL,QAAA,MAAM,GAAM,GAAA,IAAA,CAAK,QAAS,CAAA,SAAA,CAAU,oBAAoB,CAAA,CAAA;AACxD,QAAI,IAAA,GAAA,IAAO,IAAI,gBAAkB,EAAA;AAC/B,UAAI,GAAA,CAAA,gBAAA,CAAiB,KAAK,WAAW,CAAA,CAAA;AAAA,SAChC,MAAA;AACL,UAAA,MAAM,IAAI,KAAA;AAAA,YACR,mMAAA;AAAA,WACF,CAAA;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAEA,IAAA,IAAA,CAAK,kBAAqB,GAAA,IAAA,CAAA;AAC1B,IAAA,IAAA,CAAK,IAAK,EAAA,CAAA;AAKV,IAAA,IAAA,CAAK,cAAe,CAAA,OAAA,CAAQ,CAAC,GAAA,EAAK,UAAe,KAAA;AAC/C,MAAA,IAAA,CAAK,EAAG,CAAA,uBAAA;AAAA,QACN,KAAK,EAAG,CAAA,WAAA;AAAA,QACR,UAAA;AAAA,QACA,KAAK,EAAG,CAAA,YAAA;AAAA,QACR,GAAI,CAAA,MAAA;AAAA,OACN,CAAA;AAAA,KACD,CAAA,CAAA;AAKD,IAAA,IAAA,CAAK,SAAU,CAAA,OAAA,CAAQ,CAAC,OAAA,EAAS,UAAe,KAAA;AAC9C,MAAA,IAAA,CAAK,EAAG,CAAA,oBAAA;AAAA,QACN,KAAK,EAAG,CAAA,WAAA;AAAA,QACR,UAAA;AAAA,QACA,KAAK,EAAG,CAAA,UAAA;AAAA,QACR,OAAQ,CAAA,MAAA;AAAA,QACR,CAAA;AAAA,OACF,CAAA;AAAA,KACD,CAAA,CAAA;AACD,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AACZ,IAAA,MAAM,SAAS,IAAK,CAAA,EAAA,CAAG,sBAAuB,CAAA,IAAA,CAAK,GAAG,WAAW,CAAA,CAAA;AACjE,IAAI,IAAA,MAAA,KAAW,IAAK,CAAA,EAAA,CAAG,oBAAsB,EAAA;AAC3C,MAAA,QAAQ,MAAQ;AAAA,QACd,KAAK,KAAK,EAAG,CAAA,iCAAA;AACX,UAAA,MAAM,IAAI,KAAA;AAAA,YACR,kHAAA;AAAA,WACF,CAAA;AAAA,QACF,KAAK,KAAK,EAAG,CAAA,yCAAA;AACX,UAAM,MAAA,IAAI,MAAM,wBAAwB,CAAA,CAAA;AAAA,QAC1C,KAAK,KAAK,EAAG,CAAA,iCAAA;AACX,UAAM,MAAA,IAAI,MAAM,uDAAuD,CAAA,CAAA;AAAA,QACzE,KAAK,KAAK,EAAG,CAAA,uBAAA;AACX,UAAA,MAAM,IAAI,KAAA;AAAA,YACR,iHAAA;AAAA,WACF,CAAA;AAAA,OACJ;AAAA,KACF;AAEA,IAAA,OAAO,IAAK,CAAA,MAAA,CAAA;AAAA,GACd;AAAA,EAKA,KAAQ,GAAA;AACN,IAAA,IAAA,CAAK,IAAK,EAAA,CAAA;AAEV,IAAA,IAAI,KAAQ,GAAA,CAAA,CAAA;AAEZ,IAAI,IAAA,IAAA,CAAK,YAAY,CAAI,CAAA,EAAA;AACvB,MAAM,MAAA,KAAA,GAAQ,KAAK,WAAY,CAAA,CAAA,CAAA,CAAA;AAC/B,MAAK,IAAA,CAAA,EAAA,CAAG,WAAW,KAAM,CAAA,CAAA,CAAA,EAAI,MAAM,CAAI,CAAA,EAAA,KAAA,CAAM,CAAI,CAAA,EAAA,KAAA,CAAM,CAAE,CAAA,CAAA,CAAA;AACzD,MAAA,KAAA,IAAS,KAAK,EAAG,CAAA,gBAAA,CAAA;AAAA,KACnB;AACA,IAAI,IAAA,QAAA,CAAS,IAAK,CAAA,WAAW,CAAG,EAAA;AAC9B,MAAK,IAAA,CAAA,EAAA,CAAG,UAAW,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AACnC,MAAA,KAAA,IAAS,KAAK,EAAG,CAAA,gBAAA,CAAA;AAAA,KACnB;AAEA,IAAI,IAAA,QAAA,CAAS,IAAK,CAAA,aAAa,CAAG,EAAA;AAChC,MAAK,IAAA,CAAA,EAAA,CAAG,YAAa,CAAA,IAAA,CAAK,aAAa,CAAA,CAAA;AACvC,MAAA,KAAA,IAAS,KAAK,EAAG,CAAA,kBAAA,CAAA;AAAA,KACnB;AAEA,IAAK,IAAA,CAAA,EAAA,CAAG,MAAM,KAAK,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAAA,GACd;AAAA,EAEA,WAAW,GAAK,EAAA;AACd,IAAO,OAAA,IAAA,CAAK,SAAU,CAAA,GAAA,CAAI,GAAG,CAAA,CAAA;AAAA,GAC/B;AAAA,EAOA,MAAA,CAAO,OAAe,MAAgB,EAAA;AACpC,IAAA,IAAI,IAAK,CAAA,KAAA,KAAU,KAAS,IAAA,IAAA,CAAK,WAAW,MAAQ,EAAA;AAClD,MAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,MAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,MAAK,IAAA,CAAA,SAAA,CAAU,OAAQ,CAAA,CAAC,OAAqB,KAAA;AAC3C,QAAA,IAAI,OAAQ,CAAA,KAAA,KAAU,KAAS,IAAA,OAAA,CAAQ,WAAW,MAAQ,EAAA;AACxD,UAAA,OAAA,CAAQ,KAAQ,GAAA,KAAA,CAAA;AAChB,UAAA,OAAA,CAAQ,MAAS,GAAA,MAAA,CAAA;AACjB,UAAA,OAAA,CAAQ,WAAc,GAAA,IAAA,CAAA;AACtB,UAAA,OAAA,CAAQ,MAAO,EAAA,CAAA;AAAA,SACjB;AAAA,OACD,CAAA,CAAA;AACD,MAAK,IAAA,CAAA,cAAA,CAAe,OAAQ,CAAA,CAAC,GAAQ,KAAA;AACnC,QAAI,GAAA,CAAA,MAAA,CAAO,OAAO,MAAM,CAAA,CAAA;AAAA,OACzB,CAAA,CAAA;AACD,MAAA,IAAA,CAAK,QAAS,CAAA,GAAA,CAAI,CAAG,EAAA,CAAA,EAAG,OAAO,MAAM,CAAA,CAAA;AAAA,KACvC;AAAA,GACF;AAAA,EAMA,IAAK,CAAA,GAAA,GAAM,IAAK,CAAA,EAAA,CAAG,WAAa,EAAA;AAC9B,IAAA,IAAA,CAAK,EAAG,CAAA,eAAA,CAAgB,GAAK,EAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,GAC1C;AAAA,EAMA,MAAO,CAAA,GAAA,GAAM,IAAK,CAAA,EAAA,CAAG,WAAa,EAAA;AAChC,IAAK,IAAA,CAAA,EAAA,CAAG,eAAgB,CAAA,GAAA,EAAK,IAAI,CAAA,CAAA;AAAA,GACnC;AAAA,EAGA,WAAc,GAAA;AAAA,GAAC;AAAA,EAQf,OAAU,GAAA;AACR,IAAK,IAAA,CAAA,SAAA,CAAU,OAAQ,CAAA,CAAC,OAAqB,KAAA;AAC3C,MAAA,OAAA,CAAQ,OAAQ,EAAA,CAAA;AAAA,KACjB,CAAA,CAAA;AACD,IAAK,IAAA,CAAA,cAAA,CAAe,OAAQ,CAAA,CAAC,MAAW,KAAA;AACtC,MAAA,MAAA,CAAO,OAAQ,EAAA,CAAA;AAAA,KAChB,CAAA,CAAA;AACD,IAAA,IAAA,CAAK,YAAa,EAAA,CAAA;AAAA,GACpB;AAAA,EAKA,YAAe,GAAA;AACb,IAAO,OAAA,IAAA,CAAK,GAAG,iBAAkB,EAAA,CAAA;AAAA,GACnC;AAAA,EAKA,YAAe,GAAA;AACb,IAAA,IAAA,CAAK,MAAU,IAAA,IAAA,CAAK,EAAG,CAAA,iBAAA,CAAkB,KAAK,MAAM,CAAA,CAAA;AAAA,GACtD;AAAA,EAKA,QAAmB,GAAA;AACjB,IAAA,OAAO,CAAgB,aAAA,EAAA,IAAA,CAAK,EAAM,CAAA,CAAA,EAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GACvD;AACF;;AC1aO,SAAS,cACd,CAAA,QAAA,EACA,MACA,EAAA,EAAA,EACA,KACA,EAAA,KAAA,GAAQ,CACR,EAAA,MAAA,GAAS,CACT,EAAA,KAAA,GAAQ,CACR,EAAA,aAAA,GAAgB,CAChB,EAAA,cAAA,GAAiB,CACjB,EAAA,CAAA,GAAI,CACJ,EAAA,CAAA,GAAI,CACJ,EAAA,CAAA,GAAI,CACJ,EAAA,IAAA,GAAO,CACP,EAAA,IAAA,GAAO,CACP,CAAA,EAAA,CAAA,GAAI,CACJ,EAAA,EAAA,GAAK,CACL,EAAA;AACA,EAAA,MAAM,MAAS,GAAA,CAAA,CAAA;AACf,EAAA,MAAM,YAAY,KAAQ,GAAA,CAAA,CAAA;AAC1B,EAAA,MAAM,aAAa,MAAS,GAAA,CAAA,CAAA;AAC5B,EAAA,MAAM,YAAY,KAAQ,GAAA,CAAA,CAAA;AAE1B,EAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,aAAa,CAAA,CAAA;AACtC,EAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,cAAc,CAAA,CAAA;AAEvC,EAAA,MAAM,SAAS,KAAQ,GAAA,CAAA,CAAA;AACvB,EAAA,MAAM,SAAS,KAAQ,GAAA,CAAA,CAAA;AAEvB,EAAA,MAAM,eAAe,KAAQ,GAAA,KAAA,CAAA;AAC7B,EAAA,MAAM,gBAAgB,MAAS,GAAA,KAAA,CAAA;AAE/B,EAAA,KAAA,IAAS,EAAK,GAAA,CAAA,EAAG,EAAK,GAAA,MAAA,EAAQ,EAAM,EAAA,EAAA;AAClC,IAAM,MAAA,CAAA,GAAI,KAAK,aAAgB,GAAA,UAAA,CAAA;AAC/B,IAAA,KAAA,IAAS,EAAK,GAAA,CAAA,EAAG,EAAK,GAAA,MAAA,EAAQ,EAAM,EAAA,EAAA;AAClC,MAAA,QAAA,CAAS,CAAI,GAAA,CAAA,GAAI,CAAM,CAAA,GAAA,CAAA,EAAA,GAAK,eAAe,SAAa,IAAA,IAAA,CAAA;AACxD,MAAS,QAAA,CAAA,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA,GAAK,CAAI,GAAA,IAAA,CAAA;AAC1B,MAAS,QAAA,CAAA,CAAA,GAAI,IAAI,CAAK,CAAA,GAAA,SAAA,CAAA;AAEtB,MAAO,MAAA,CAAA,CAAA,GAAI,IAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AACpB,MAAO,MAAA,CAAA,CAAA,GAAI,IAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AACpB,MAAA,MAAA,CAAO,CAAI,GAAA,CAAA,GAAI,CAAK,CAAA,GAAA,KAAA,IAAS,IAAI,CAAI,GAAA,CAAA,CAAA,CAAA;AAErC,MAAG,EAAA,CAAA,CAAA,GAAI,KAAK,EAAK,GAAA,KAAA,CAAA;AACjB,MAAA,EAAA,CAAG,CAAI,GAAA,CAAA,GAAI,CAAK,CAAA,GAAA,CAAA,GAAI,EAAK,GAAA,KAAA,CAAA;AAGzB,MAAA,CAAA,EAAA,CAAA;AACA,MAAI,IAAA,EAAA,KAAO,SAAS,EAAO,KAAA,KAAA;AAAO,QAAA,SAAA;AAElC,MAAM,MAAA,CAAA,GAAI,MAAS,GAAA,EAAA,GAAK,MAAS,GAAA,EAAA,CAAA;AACjC,MAAA,MAAM,CAAI,GAAA,MAAA,GAAS,EAAK,GAAA,MAAA,IAAU,EAAK,GAAA,CAAA,CAAA,CAAA;AACvC,MAAA,MAAM,CAAI,GAAA,MAAA,GAAS,EAAK,GAAA,CAAA,GAAI,UAAU,EAAK,GAAA,CAAA,CAAA,CAAA;AAC3C,MAAA,MAAM,CAAI,GAAA,MAAA,GAAS,EAAK,GAAA,CAAA,GAAI,MAAS,GAAA,EAAA,CAAA;AAErC,MAAA,KAAA,CAAM,KAAK,CAAK,CAAA,GAAA,CAAA,CAAA;AAChB,MAAM,KAAA,CAAA,EAAA,GAAK,IAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AACpB,MAAM,KAAA,CAAA,EAAA,GAAK,IAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AACpB,MAAM,KAAA,CAAA,EAAA,GAAK,IAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AACpB,MAAM,KAAA,CAAA,EAAA,GAAK,IAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AACpB,MAAM,KAAA,CAAA,EAAA,GAAK,IAAI,CAAK,CAAA,GAAA,CAAA,CAAA;AAGpB,MAAA,EAAA,EAAA,CAAA;AAAA,KACF;AAAA,GACF;AACF,CAAA;AAaA,MAAqB,cAAc,QAAS,CAAA;AAAA,EAS1C,YACE,QACA,EAAA;AAAA,IACE,KAAQ,GAAA,CAAA;AAAA,IACR,MAAS,GAAA,CAAA;AAAA,IACT,aAAgB,GAAA,CAAA;AAAA,IAChB,cAAiB,GAAA,CAAA;AAAA,IACjB,aAAa,EAAC;AAAA,GAChB,GAA2B,EAC3B,EAAA;AACA,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,aAAa,CAAA,CAAA;AACtC,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,cAAc,CAAA,CAAA;AAEvC,IAAA,MAAM,SAAS,KAAQ,GAAA,CAAA,CAAA;AACvB,IAAA,MAAM,SAAS,KAAQ,GAAA,CAAA,CAAA;AAEvB,IAAA,MAAM,MAAM,MAAS,GAAA,MAAA,CAAA;AACrB,IAAM,MAAA,UAAA,GAAa,QAAQ,KAAQ,GAAA,CAAA,CAAA;AAEnC,IAAA,MAAM,QAAW,GAAA,IAAI,YAAa,CAAA,GAAA,GAAM,CAAC,CAAA,CAAA;AACzC,IAAA,MAAM,MAAS,GAAA,IAAI,YAAa,CAAA,GAAA,GAAM,CAAC,CAAA,CAAA;AACvC,IAAA,MAAM,EAAK,GAAA,IAAI,YAAa,CAAA,GAAA,GAAM,CAAC,CAAA,CAAA;AACnC,IAAM,MAAA,KAAA,GAAQ,MAAM,KAAQ,GAAA,IAAI,YAAY,UAAU,CAAA,GAAI,IAAI,WAAA,CAAY,UAAU,CAAA,CAAA;AAEpF,IAAe,cAAA,CAAA,QAAA,EAAU,QAAQ,EAAI,EAAA,KAAA,EAAO,OAAO,MAAQ,EAAA,CAAA,EAAG,eAAe,cAAc,CAAA,CAAA;AAE3F,IAAA,KAAA,CAAM,QAAU,EAAA;AAAA,MACd,GAAG,UAAA;AAAA,MACH,QAAU,EAAA;AAAA,QACR,IAAM,EAAA,CAAA;AAAA,QACN,IAAM,EAAA,QAAA;AAAA,OACR;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,IAAM,EAAA,CAAA;AAAA,QACN,IAAM,EAAA,MAAA;AAAA,OACR;AAAA,MACA,EAAI,EAAA;AAAA,QACF,IAAM,EAAA,CAAA;AAAA,QACN,IAAM,EAAA,EAAA;AAAA,OACR;AAAA,MACA,KAAO,EAAA;AAAA,QACL,IAAM,EAAA,KAAA;AAAA,OACR;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AACF;;AClIA,MAAqB,YAAY,QAAS,CAAA;AAAA,EAWxC,YACE,QACA,EAAA;AAAA,IACE,KAAQ,GAAA,CAAA;AAAA,IACR,MAAS,GAAA,CAAA;AAAA,IACT,KAAQ,GAAA,CAAA;AAAA,IACR,aAAgB,GAAA,CAAA;AAAA,IAChB,cAAiB,GAAA,CAAA;AAAA,IACjB,aAAgB,GAAA,CAAA;AAAA,IAChB,aAAa,EAAC;AAAA,GAChB,GAAyB,EACzB,EAAA;AACA,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,aAAa,CAAA,CAAA;AACtC,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,cAAc,CAAA,CAAA;AACvC,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,aAAa,CAAA,CAAA;AAEtC,IAAA,MAAM,SAAS,KAAQ,GAAA,CAAA,CAAA;AACvB,IAAA,MAAM,SAAS,KAAQ,GAAA,CAAA,CAAA;AACvB,IAAA,MAAM,SAAS,KAAQ,GAAA,CAAA,CAAA;AAEvB,IAAM,MAAA,GAAA,GAAM,SAAS,MAAS,GAAA,CAAA,GAAI,SAAS,MAAS,GAAA,CAAA,GAAI,SAAS,MAAS,GAAA,CAAA,CAAA;AAC1E,IAAM,MAAA,UAAA,GAAA,CAAc,QAAQ,KAAQ,GAAA,CAAA,GAAI,QAAQ,KAAQ,GAAA,CAAA,GAAI,KAAQ,GAAA,KAAA,GAAQ,CAAK,IAAA,CAAA,CAAA;AAEjF,IAAA,MAAM,QAAW,GAAA,IAAI,YAAa,CAAA,GAAA,GAAM,CAAC,CAAA,CAAA;AACzC,IAAA,MAAM,MAAS,GAAA,IAAI,YAAa,CAAA,GAAA,GAAM,CAAC,CAAA,CAAA;AACvC,IAAA,MAAM,EAAK,GAAA,IAAI,YAAa,CAAA,GAAA,GAAM,CAAC,CAAA,CAAA;AACnC,IAAM,MAAA,KAAA,GAAQ,MAAM,KAAQ,GAAA,IAAI,YAAY,UAAU,CAAA,GAAI,IAAI,WAAA,CAAY,UAAU,CAAA,CAAA;AAEpF,IAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,IAAI,EAAK,GAAA,CAAA,CAAA;AACT,IAAA,MAAM,IAAI,MAAS,GAAA,MAAA,CAAA;AACnB,IAAA,MAAM,IAAI,MAAS,GAAA,MAAA,CAAA;AACnB,IAAA,MAAM,IAAI,MAAS,GAAA,MAAA,CAAA;AACnB,IAAA,MAAM,KAAK,KAAQ,GAAA,KAAA,CAAA;AACnB,IAAA,MAAM,KAAK,KAAQ,GAAA,KAAA,CAAA;AACnB,IAAA,MAAM,KAAK,KAAQ,GAAA,KAAA,CAAA;AAEnB,IAAA,cAAA;AAAA,MACE,QAAA;AAAA,MACA,MAAA;AAAA,MACA,EAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAA;AAAA,MACA,MAAA;AAAA,MACA,KAAA;AAAA,MACA,aAAA;AAAA,MACA,cAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA,CAAA;AAAA,MACA,CAAA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,EAAA;AAAA,KACF,CAAA;AAGA,IAAK,CAAA,IAAA,CAAA,CAAA;AACL,IAAM,EAAA,IAAA,EAAA,CAAA;AACN,IAAA,cAAA;AAAA,MACE,QAAA;AAAA,MACA,MAAA;AAAA,MACA,EAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAA;AAAA,MACA,MAAA;AAAA,MACA,CAAC,KAAA;AAAA,MACD,aAAA;AAAA,MACA,cAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,EAAA;AAAA,KACF,CAAA;AAGA,IAAK,CAAA,IAAA,CAAA,CAAA;AACL,IAAM,EAAA,IAAA,EAAA,CAAA;AACN,IAAA,cAAA;AAAA,MACE,QAAA;AAAA,MACA,MAAA;AAAA,MACA,EAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAA;AAAA,MACA,MAAA;AAAA,MACA,aAAA;AAAA,MACA,aAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,EAAA;AAAA,KACF,CAAA;AAGA,IAAK,CAAA,IAAA,CAAA,CAAA;AACL,IAAM,EAAA,IAAA,EAAA,CAAA;AACN,IAAA,cAAA;AAAA,MACE,QAAA;AAAA,MACA,MAAA;AAAA,MACA,EAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAA;AAAA,MACA,CAAC,MAAA;AAAA,MACD,aAAA;AAAA,MACA,aAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,EAAA;AAAA,KACF,CAAA;AAGA,IAAK,CAAA,IAAA,CAAA,CAAA;AACL,IAAM,EAAA,IAAA,EAAA,CAAA;AACN,IAAA,cAAA;AAAA,MACE,QAAA;AAAA,MACA,MAAA;AAAA,MACA,EAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAA;AAAA,MACA,MAAA;AAAA,MACA,CAAC,KAAA;AAAA,MACD,aAAA;AAAA,MACA,cAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA,CAAA;AAAA,MACA,CAAA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,EAAA;AAAA,KACF,CAAA;AAGA,IAAK,CAAA,IAAA,CAAA,CAAA;AACL,IAAM,EAAA,IAAA,EAAA,CAAA;AACN,IAAA,cAAA;AAAA,MACE,QAAA;AAAA,MACA,MAAA;AAAA,MACA,EAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAA;AAAA,MACA,MAAA;AAAA,MACA,KAAA;AAAA,MACA,aAAA;AAAA,MACA,cAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,CAAA,CAAA;AAAA,MACA,CAAA;AAAA,MACA,EAAA;AAAA,KACF,CAAA;AAEA,IAAA,KAAA,CAAM,QAAU,EAAA;AAAA,MACd,GAAG,UAAA;AAAA,MACH,QAAU,EAAA;AAAA,QACR,IAAM,EAAA,CAAA;AAAA,QACN,IAAM,EAAA,QAAA;AAAA,OACR;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,IAAM,EAAA,CAAA;AAAA,QACN,IAAM,EAAA,MAAA;AAAA,OACR;AAAA,MACA,EAAI,EAAA;AAAA,QACF,IAAM,EAAA,CAAA;AAAA,QACN,IAAM,EAAA,EAAA;AAAA,OACR;AAAA,MACA,KAAO,EAAA;AAAA,QACL,IAAM,EAAA,KAAA;AAAA,OACR;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AACF;;ACrPA,MAAM,UAAa,GAAA,sDAAA,CAAA;AAEnB,MAAM,YAAY,EAAC,CAAA;AACnB,SAAS,aAAA,CAAc,MAAM,IAAM,EAAA;AACjC,EAAU,SAAA,CAAA,GAAA,CAAA,GAAO,UAAU,GAAQ,CAAA,IAAA,CAAA,CAAA;AACnC,EAAA,MAAM,MAAM,SAAU,CAAA,GAAA,CAAA,CAAA;AACtB,EAAA,SAAA,CAAU,GAAQ,CAAA,IAAA,CAAA,CAAA;AAClB,EAAA,OAAO,GAAG,MAAO,CAAA,GAAA,EAAK,GAAG,CAAA,CAAE,OAAO,GAAG,CAAA,CAAA;AACvC,CAAA;AAIA,MAAM,WAAA,GAAc,CAAC,GAAA,EAAK,UAAgC,KAAA;AACxD,EAAA,QAAQ,UAAY;AAAA,IAClB,KAAK,GAAI,CAAA,aAAA;AACP,MAAO,OAAA,eAAA,CAAA;AAAA,IACT,KAAK,GAAI,CAAA,eAAA;AACP,MAAO,OAAA,iBAAA,CAAA;AAAA,IACT;AACE,MAAO,OAAA,SAAA,CAAA;AAAA,GACX;AACF,CAAA,CAAA;AAEA,MAAM,aAAA,GAAgB,CAAC,GAAA,EAAK,IAAS,KAAA;AACnC,EAAA,QAAQ,IAAM;AAAA,IACZ,KAAK,UAAA;AACH,MAAA,OAAO,GAAI,CAAA,eAAA,CAAA;AAAA,IACb,KAAK,QAAA;AACH,MAAA,OAAO,GAAI,CAAA,aAAA,CAAA;AAAA,IACb;AACE,MAAA,OAAA;AAAA,GACJ;AACF,CAAA,CAAA;AAEA,SAAS,eAAe,MAAgB,EAAA;AACtC,EAAM,MAAA,KAAA,GAAQ,MAAO,CAAA,KAAA,CAAM,IAAI,CAAA,CAAA;AAC/B,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,CAAM,QAAQ,CAAK,EAAA,EAAA;AACrC,IAAA,KAAA,CAAM,CAAK,CAAA,GAAA,CAAA,GAAI,CAAI,GAAA,IAAA,GAAO,KAAM,CAAA,CAAA,CAAA,CAAA;AAAA,GAClC;AACA,EAAO,OAAA,KAAA,CAAM,KAAK,IAAI,CAAA,CAAA;AACxB,CAAA;AAEO,MAAM,eAAe,QAA0B,CAAA;AAAA,EACpD,WAAA,CAAA;AAAA,EAEA,SAAA,CAAA;AAAA,EAIO,UAAA,CAAA;AAAA,EAEP,YAAY,QAAoB,EAAA,UAAA,EAAY,IAAM,EAAA,QAAA,GAAW,EAAI,EAAA;AAC/D,IAAA,MAAM,UAAa,GAAA,aAAA,CAAc,QAAS,CAAA,EAAA,EAAI,IAAI,CAAA,CAAA;AAClD,IAAA,KAAA,CAAM,QAAU,EAAA;AAAA,MACd,IAAA,EAAM,cAAc,UAAU,CAAA,IAAK,cAAc,WAAY,CAAA,QAAA,EAAU,UAAU,CAAC,CAAA;AAAA,KACnF,CAAA,CAAA;AACD,IAAA,OAAA,CAAQ,MAAO,CAAA,OAAO,UAAe,KAAA,QAAA,EAAU,UAAU,CAAA,CAAA;AACzD,IAAA,IAAA,CAAK,SAAY,GAAA,QAAA,CAAA;AACjB,IAAA,IAAA,CAAK,WAAc,GAAA,UAAA,CAAA;AACnB,IAAA,IAAA,CAAK,aAAa,IAAK,CAAA,kBAAA,CAAmB,YAAY,QAAY,IAAA,EAAE,CAAE,CAAA,OAAA;AAAA,MACpE,SAAA;AAAA,MACA,MAAA;AAAA,KACF,CAAA;AACA,IAAK,IAAA,CAAA,YAAA,CAAa,KAAK,UAAU,CAAA,CAAA;AAAA,GACnC;AAAA,EAEA,kBAAmB,CAAA,MAAA,EAAQ,OAAU,GAAA,EAAI,EAAA;AACvC,IAAA,MAAM,MAAS,GAAA,oCAAA,CAAA;AACf,IAAM,MAAA,WAAA,GAAc,CAAC,SAAA,EAAW,CAAM,KAAA;AACpC,MAAA,IAAI,SAAS,OAAQ,CAAA,CAAA,CAAA,CAAA;AACrB,MAAA,IAAI,MAAW,KAAA,KAAA,CAAA;AAAW,QAAA,MAAM,IAAI,KAAM,CAAA,2BAAA,CAA4B,MAAO,CAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AACpF,MAAS,MAAA,GAAA,MAAA,CAAO,OAAQ,CAAA,aAAA,EAAe,iBAAiB,CAAA,CAAA;AACxD,MAAO,OAAA,IAAA,CAAK,kBAAmB,CAAA,MAAA,EAAQ,OAAO,CAAA,CAAA;AAAA,KAChD,CAAA;AACA,IAAO,OAAA,MAAA,CAAO,OAAQ,CAAA,MAAA,EAAQ,WAAW,CAAA,CAAA;AAAA,GAC3C;AAAA,EAEA,YAAA,CAAa,MAAS,GAAA,IAAA,CAAK,MAAQ,EAAA;AACjC,IAAA,IAAI,CAAI,GAAA,MAAA,CAAO,OAAQ,CAAA,aAAA,EAAe,iBAAiB,CAAA,CAAA;AACvD,IAAI,CAAA,GAAA,IAAA,CAAK,kBAAmB,CAAA,CAAA,EAAG,IAAK,CAAA,SAAA,IAAa,EAAE,CAAA,CAAE,OAAQ,CAAA,SAAA,EAAW,MAAM,CAAA,CAAA;AAC9E,IAAA,IAAA,CAAK,EAAG,CAAA,YAAA,CAAa,IAAK,CAAA,MAAA,EAAQ,CAAC,CAAA,CAAA;AACnC,IAAK,IAAA,CAAA,EAAA,CAAG,aAAc,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AACjC,IAAI,IAAA,CAAC,KAAK,EAAG,CAAA,kBAAA,CAAmB,KAAK,MAAQ,EAAA,IAAA,CAAK,EAAG,CAAA,cAAc,CAAG,EAAA;AACpE,MAAA,MAAM,MAAM,IAAK,CAAA,EAAA,CAAG,gBAAiB,CAAA,IAAA,CAAK,MAAM,CAAK,IAAA,EAAA,CAAA;AACrD,MAAK,IAAA,CAAA,EAAA,CAAG,YAAa,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAChC,MAAA,MAAM,IAAI,KAAA,CAAM,CAAG,EAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AAAA,EAAM,GAAA,CAAA;AAAA,EAAQ,cAAA,CAAe,CAAC,CAAG,CAAA,CAAA,CAAA,CAAA;AAAA,KACpE;AAAA,GACF;AAAA,EAEA,IAAI,MAAS,GAAA;AACX,IAAA,OAAO,IAAK,CAAA,UAAA,CAAA;AAAA,GACd;AAAA,EAEA,IAAI,UAAa,GAAA;AACf,IAAA,OAAO,IAAK,CAAA,WAAA,CAAA;AAAA,GACd;AAAA,EAEA,SAAY,GAAA;AACV,IAAA,OAAO,IAAK,CAAA,EAAA,CAAG,eAAgB,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,GAC5C;AAAA,EAEA,UAAU,MAAQ,EAAA;AAChB,IAAM,MAAA,IAAA,GAAO,cAAc,MAAM,CAAA,CAAA;AACjC,IAAA,IAAI,IAAM,EAAA;AACR,MAAK,IAAA,CAAA,IAAA,GAAO,cAAc,IAAI,CAAA,CAAA;AAAA,KAChC;AACA,IAAA,IAAA,CAAK,aAAa,MAAM,CAAA,CAAA;AAAA,GAC1B;AAAA,EAGA,WAAc,GAAA;AAAA,GAAC;AAAA,EAEf,YAAe,GAAA;AACb,IAAK,IAAA,CAAA,EAAA,CAAG,YAAa,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,GAClC;AAAA,EAEA,QAAmB,GAAA;AACjB,IAAA,OAAO,GAAG,WAAY,CAAA,IAAA,CAAK,IAAI,IAAK,CAAA,UAAU,KAAK,IAAK,CAAA,EAAA,CAAA,CAAA,CAAA;AAAA,GAC1D;AACF,CAAA;AAKO,MAAM,qBAAqB,MAAO,CAAA;AAAA,EACvC,WAAA,CAAY,QAAoB,EAAA,UAAA,EAAoB,QAAU,EAAA;AAC5D,IAAM,KAAA,CAAA,QAAA,EAAU,UAAY,EAAA,QAAA,EAAU,QAAQ,CAAA,CAAA;AAAA,GAChD;AAAA,EAEA,YAAe,GAAA;AACb,IAAA,OAAO,IAAK,CAAA,EAAA,CAAG,YAAa,CAAA,IAAA,CAAK,GAAG,aAAa,CAAA,CAAA;AAAA,GACnD;AACF,CAAA;AAKO,MAAM,uBAAuB,MAAO,CAAA;AAAA,EACzC,WAAA,CAAY,QAAoB,EAAA,UAAA,EAAoB,QAAU,EAAA;AAC5D,IAAM,KAAA,CAAA,QAAA,EAAU,UAAY,EAAA,UAAA,EAAY,QAAQ,CAAA,CAAA;AAAA,GAClD;AAAA,EAEA,YAAe,GAAA;AACb,IAAA,OAAO,IAAK,CAAA,EAAA,CAAG,YAAa,CAAA,IAAA,CAAK,GAAG,eAAe,CAAA,CAAA;AAAA,GACrD;AACF;;AC1IA,MAAM,UAAA,GAAa,CAAC,CAAM,KAAA;AACxB,EAAA,MAAM,UAAU,EAAC,CAAA;AACjB,EAAA,OAAO,QAAQ,GAAI,CAAA,CAAC,MAAM,UAAW,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAA;AAChD,CAAA,CAAA;AAEA,MAAM,gBAAgB,EAAC,CAAA;AAEvB,SAAS,QAAQ,CAAG,EAAA;AAClB,EAAA,MAAM,WAAW,CAAE,CAAA,MAAA,CAAA;AACnB,EAAM,MAAA,QAAA,GAAW,EAAE,CAAG,CAAA,CAAA,MAAA,CAAA;AACtB,EAAA,IAAI,QAAa,KAAA,KAAA,CAAA;AAAW,IAAO,OAAA,CAAA,CAAA;AACnC,EAAA,MAAM,SAAS,QAAW,GAAA,QAAA,CAAA;AAC1B,EAAA,IAAI,QAAQ,aAAc,CAAA,MAAA,CAAA,CAAA;AAC1B,EAAA,IAAI,CAAC,KAAA;AAAO,IAAA,aAAA,CAAc,MAAU,CAAA,GAAA,KAAA,GAAQ,IAAI,YAAA,CAAa,MAAM,CAAA,CAAA;AACnE,EAAS,KAAA,IAAA,CAAA,GAAI,CAAG,EAAA,CAAA,GAAI,QAAU,EAAA,CAAA,EAAA;AAAK,IAAA,KAAA,CAAM,GAAI,CAAA,CAAA,CAAE,CAAI,CAAA,EAAA,CAAA,GAAI,QAAQ,CAAA,CAAA;AAC/D,EAAO,OAAA,KAAA,CAAA;AACT,CAAA;AAEA,SAAS,UAAW,CAAA,EAAA,EAA2B,IAAc,EAAA,QAAA,EAAgC,KAAY,EAAA;AACvG,EAAA,KAAA,GAAQ,KAAM,CAAA,MAAA,GAAS,OAAQ,CAAA,KAAK,CAAI,GAAA,KAAA,CAAA;AACxC,EAAA,MAAM,UAAU,KAAM,CAAA,MAAA,CAAA;AAEtB,EAAA,QAAQ,IAAM;AAAA,IACZ,KAAK,qBAAsB,CAAA,KAAA;AACzB,MAAO,OAAA,OAAA,GAAU,GAAG,UAAW,CAAA,QAAA,EAAU,KAAK,CAAI,GAAA,EAAA,CAAG,SAAU,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;AAAA,IAChF,KAAK,qBAAsB,CAAA,UAAA;AACzB,MAAO,OAAA,EAAA,CAAG,UAAW,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;AAAA,IACtC,KAAK,qBAAsB,CAAA,UAAA;AACzB,MAAO,OAAA,EAAA,CAAG,UAAW,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;AAAA,IACtC,KAAK,qBAAsB,CAAA,UAAA;AACzB,MAAO,OAAA,EAAA,CAAG,UAAW,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;AAAA,IACtC,KAAK,qBAAsB,CAAA,IAAA,CAAA;AAAA,IAC3B,KAAK,qBAAsB,CAAA,GAAA,CAAA;AAAA,IAC3B,KAAK,qBAAsB,CAAA,UAAA,CAAA;AAAA,IAC3B,KAAK,qBAAsB,CAAA,YAAA;AACzB,MAAO,OAAA,OAAA,GAAU,GAAG,UAAW,CAAA,QAAA,EAAU,KAAK,CAAI,GAAA,EAAA,CAAG,SAAU,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;AAAA,IAChF,KAAK,qBAAsB,CAAA,SAAA,CAAA;AAAA,IAC3B,KAAK,qBAAsB,CAAA,QAAA;AACzB,MAAO,OAAA,EAAA,CAAG,UAAW,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;AAAA,IACtC,KAAK,qBAAsB,CAAA,SAAA,CAAA;AAAA,IAC3B,KAAK,qBAAsB,CAAA,QAAA;AACzB,MAAO,OAAA,EAAA,CAAG,UAAW,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;AAAA,IACtC,KAAK,qBAAsB,CAAA,SAAA,CAAA;AAAA,IAC3B,KAAK,qBAAsB,CAAA,QAAA;AACzB,MAAO,OAAA,EAAA,CAAG,UAAW,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;AAAA,IACtC,KAAK,qBAAsB,CAAA,UAAA;AACzB,MAAA,OAAO,EAAG,CAAA,gBAAA,CAAiB,QAAU,EAAA,KAAA,EAAO,KAAK,CAAA,CAAA;AAAA,IACnD,KAAK,qBAAsB,CAAA,UAAA;AACzB,MAAA,OAAO,EAAG,CAAA,gBAAA,CAAiB,QAAU,EAAA,KAAA,EAAO,KAAK,CAAA,CAAA;AAAA,IACnD,KAAK,qBAAsB,CAAA,UAAA;AACzB,MAAA,OAAO,EAAG,CAAA,gBAAA,CAAiB,QAAU,EAAA,KAAA,EAAO,KAAK,CAAA,CAAA;AAAA,GACrD;AACF,CAAA;AAiQA,MAAqB,gBAAgB,QAAyB,CAAA;AAAA,EACrD,cAAA,CAAA;AAAA,EAEA,QAAA,CAAA;AAAA,EAEP,iBAAA,CAAA;AAAA,EAEA,mBAAA,CAAA;AAAA,EAEA,GAAA,CAAA;AAAA,EAEA,GAAA,CAAA;AAAA,EAEA,YAAA,CAAA;AAAA,EAEA,WAAY,CAAA,QAAA,EAAU,OAAmC,GAAA,EAAsB,EAAA;AAC7E,IAAA,KAAA,CAAM,UAAU,OAAO,CAAA,CAAA;AACvB,IAAM,MAAA;AAAA,MACJ,EAAA;AAAA,MACA,YAAA;AAAA,MACA,cAAA;AAAA,MACA,WAAW,EAAC;AAAA,MACZ,WAAc,GAAA,KAAA;AAAA,MACd,UAAU,EAAC;AAAA,MACX,WAAW,EAAC;AAAA,MACZ,QAAA;AAAA,MACA,SAAA,GAAY,SAAS,EAAG,CAAA,GAAA;AAAA,MACxB,SAAY,GAAA,IAAA;AAAA,MACZ,UAAa,GAAA,IAAA;AAAA,MACb,SAAA,GAAY,SAAS,EAAG,CAAA,IAAA;AAAA,MACxB,QAAW,GAAA,CAAA;AAAA,MACX,SAAA;AAAA,MACA,aAAA;AAAA,KACE,GAAA,OAAA,CAAA;AACJ,IAAK,IAAA,CAAA,EAAA,GAAK,EAAM,IAAA,GAAA,CAAI,SAAS,CAAA,CAAA;AAC7B,IAAA,MAAM,IAAiB,GAAA;AAAA,MACrB,GAAG,UAAW,CAAA;AAAA,QACZ,GAAG,OAAA;AAAA,QACH,GAAG,QAAA;AAAA,OACJ,CAAA;AAAA,MACD,GAAG,OAAA;AAAA,KACH,CAAA,GAAA,CAAI,CAAC,GAAA,KAAS,CAAC,GAAA,CAAI,UAAW,CAAA,UAAU,CAAI,GAAA,UAAA,CAAW,MAAO,CAAA,GAAG,IAAI,GAAI,CAAA,CAAA;AAE3E,IAAI,IAAA,CAAC,YAAgB,IAAA,CAAC,cAAgB,EAAA;AACpC,MAAA,MAAM,IAAI,KAAA,CAAM,CAAY,SAAA,EAAA,IAAA,CAAK,EAAiD,CAAA,kDAAA,CAAA,CAAA,CAAA;AAAA,KACpF;AAEA,IAAA,IAAA,CAAK,GAAM,GAAA,OAAO,YAAiB,KAAA,QAAA,GAAW,IAAI,YAAA,CAAa,QAAU,EAAA,WAAA,CAAY,YAAc,EAAA,IAAI,CAAG,EAAA,QAAQ,CAAI,GAAA,YAAA,CAAA;AACtH,IAAA,IAAA,CAAK,GAAM,GAAA,OAAO,cAAmB,KAAA,QAAA,GAAW,IAAI,cAAA,CAAe,QAAU,EAAA,WAAA,CAAY,cAAgB,EAAA,IAAI,CAAG,EAAA,QAAQ,CAAI,GAAA,cAAA,CAAA;AAE5H,IAAA,IAAA,CAAK,GAAG,YAAa,CAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,CAAK,IAAI,MAAM,CAAA,CAAA;AACjD,IAAA,IAAA,CAAK,GAAG,YAAa,CAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,CAAK,IAAI,MAAM,CAAA,CAAA;AACjD,IAAK,IAAA,CAAA,EAAA,CAAG,WAAY,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAC/B,IAAK,IAAA,CAAA,EAAA,CAAG,eAAgB,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AACnC,IAAI,IAAA,CAAC,KAAK,EAAG,CAAA,mBAAA,CAAoB,KAAK,MAAQ,EAAA,IAAA,CAAK,EAAG,CAAA,WAAW,CAAG,EAAA;AAClE,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,UACG,CAAA,MAAA,CAAO,IAAK,CAAA,EAAA,EAAI,kBAAkB,CAAA,CAClC,MAAO,CAAA,IAAA,CAAK,EAAG,CAAA,iBAAA,CAAkB,IAAK,CAAA,MAAM,CAAW,CAAA;AAAA,OAC5D,CAAA;AAAA,KACF;AAEA,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAEhB,IAAA,IAAA,CAAK,YAAe,GAAA;AAAA,MAClB,QAAA;AAAA,MACA,QAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,UAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,aAAA;AAAA,KACF,CAAA;AAEA,IAAK,IAAA,CAAA,iBAAA,uBAAwB,GAAI,EAAA,CAAA;AACjC,IAAK,IAAA,CAAA,mBAAA,uBAA0B,GAAI,EAAA,CAAA;AAEnC,IAAA,IAAA,CAAK,gBAAgB,QAAQ,CAAA,CAAA;AAE7B,IAAA,IAAA,CAAK,iBAAkB,EAAA,CAAA;AACvB,IAAI,IAAA,WAAA,IAAe,CAAC,SAAA,EAAW,GAAK,EAAA;AAClC,MAAI,IAAA,IAAA,CAAK,SAAS,kBAAoB,EAAA;AACpC,QAAA,IAAA,CAAK,aAAa,SAAY,GAAA;AAAA,UAC5B,GAAG,SAAA;AAAA,UACH,GAAA,EAAK,KAAK,EAAG,CAAA,GAAA;AAAA,UACb,GAAA,EAAK,KAAK,EAAG,CAAA,mBAAA;AAAA,SACf,CAAA;AAAA,OACK,MAAA;AACL,QAAA,IAAA,CAAK,aAAa,SAAY,GAAA;AAAA,UAC5B,GAAG,SAAA;AAAA,UACH,GAAA,EAAK,KAAK,EAAG,CAAA,SAAA;AAAA,UACb,GAAA,EAAK,KAAK,EAAG,CAAA,mBAAA;AAAA,SACf,CAAA;AAAA,OACF;AAAA,KACF;AAAA,GACF;AAAA,EAEA,IAAI,gBAAmB,GAAA;AACrB,IAAA,OAAO,IAAK,CAAA,iBAAA,CAAA;AAAA,GACd;AAAA,EAEA,IAAI,kBAAqB,GAAA;AACvB,IAAA,OAAO,IAAK,CAAA,mBAAA,CAAA;AAAA,GACd;AAAA,EAKA,IAAI,YAAe,GAAA;AACjB,IAAA,OAAO,IAAK,CAAA,GAAA,CAAA;AAAA,GACd;AAAA,EAKA,IAAI,cAAiB,GAAA;AACnB,IAAA,OAAO,IAAK,CAAA,GAAA,CAAA;AAAA,GACd;AAAA,EAKA,GAAM,GAAA;AACJ,IAAA,MAAM,aAAgB,GAAA,IAAA,CAAK,aAAc,CAAA,gBAAA,KAAqB,IAAK,CAAA,EAAA,CAAA;AACnE,IAAA,IAAI,WAAc,GAAA,CAAA,CAAA,CAAA;AAClB,IAAA,IAAI,CAAC,aAAe,EAAA;AAClB,MAAK,IAAA,CAAA,EAAA,CAAG,UAAW,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAC9B,MAAK,IAAA,CAAA,aAAA,CAAc,mBAAmB,IAAK,CAAA,EAAA,CAAA;AAAA,KAC7C;AAEA,IAAA,IAAA,CAAK,iBAAkB,CAAA,OAAA,CAAQ,CAAC,QAAA,EAAU,aAAkB,KAAA;AAC1D,MAAA,MAAM,OAAO,aAAc,CAAA,IAAA,CAAA;AAE3B,MAAM,MAAA,OAAA,GAAU,KAAK,QAAS,CAAA,IAAA,CAAA,CAAA;AAE9B,MAAA,IAAI,CAAC,OAAS,EAAA;AACZ,QAAQ,OAAA,CAAA,IAAA,CAAK,UAAW,CAAA,MAAA,CAAO,IAAK,CAAA,EAAA,EAAI,mBAAmB,CAAE,CAAA,MAAA,CAAO,IAAM,EAAA,wBAAwB,CAAC,CAAA,CAAA;AACnG,QAAA,OAAA;AAAA,OACF;AAEA,MAAI,IAAA,OAAA,KAAY,QAAQ,OAAQ,CAAA,KAAK,KAAK,MAAO,CAAA,OAAA,CAAQ,KAAK,CAAI,CAAA,EAAA;AAChE,QAAQ,OAAA,CAAA,IAAA,CAAK,UAAW,CAAA,MAAA,CAAO,IAAK,CAAA,EAAA,EAAI,YAAY,CAAE,CAAA,MAAA,CAAO,IAAM,EAAA,+BAA+B,CAAC,CAAA,CAAA;AACnG,QAAA,OAAA;AAAA,OACF;AAEA,MAAA,IAAI,QAAQ,OAAS,EAAA,KAAA,CAAA;AAErB,MAAA,IAAI,iBAAiB,OAAS,EAAA;AAC5B,QAAe,WAAA,IAAA,CAAA,CAAA;AACf,QAAQ,OAAA,CAAA,KAAA,CAAM,OAAO,WAAW,CAAA,CAAA;AAChC,QAAA,OAAO,WAAW,IAAK,CAAA,EAAA,EAAI,cAAc,IAAM,EAAA,QAAA,CAAS,UAAU,WAAW,CAAA,CAAA;AAAA,OAC/E;AAEA,MAAI,IAAA,KAAA,YAAiB,MAAU,IAAA,KAAA,YAAiB,MAAQ,EAAA;AACtD,QAAQ,KAAA,GAAA,OAAA,CAAQ,MAAM,OAAQ,EAAA,CAAA;AAAA,OAChC,MAAA,IAAW,iBAAiB,KAAO,EAAA;AACjC,QAAQ,KAAA,GAAA,OAAA,CAAQ,MAAM,OAAQ,EAAA,CAAA;AAAA,OAChC;AAEA,MAAA,IAAI,SAAS,KAAM,CAAA,MAAA,GAAS,CAAK,IAAA,KAAA,CAAM,cAAc,OAAS,EAAA;AAC5D,QAAA,MAAM,QAAkB,EAAC,CAAA;AACzB,QAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,OAAQ,CAAA,KAAA,CAAM,QAAQ,CAAK,EAAA,EAAA;AAC7C,UAAA,MAAM,IAAI,KAAM,CAAA,CAAA,CAAA,CAAA;AAChB,UAAe,WAAA,IAAA,CAAA,CAAA;AACf,UAAA,CAAA,CAAE,OAAO,WAAW,CAAA,CAAA;AACpB,UAAA,KAAA,CAAM,KAAK,WAAW,CAAA,CAAA;AAAA,SACxB;AACA,QAAA,OAAO,WAAW,IAAK,CAAA,EAAA,EAAI,cAAc,IAAM,EAAA,QAAA,CAAS,UAAU,KAAK,CAAA,CAAA;AAAA,OACzE;AAEA,MAAA,UAAA,CAAW,KAAK,EAAI,EAAA,aAAA,CAAc,IAAM,EAAA,QAAA,CAAS,UAAU,KAAK,CAAA,CAAA;AAAA,KACjE,CAAA,CAAA;AAED,IAAA,IAAA,CAAK,UAAW,EAAA,CAAA;AAAA,GAClB;AAAA,EAOA,SAAA,CAAU,MAAqC,EAAA,KAAA,GAAQ,IAAM,EAAA;AAC3D,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA,IAAA,CAAK,YAAe,GAAA,MAAA,CAAA;AAAA,KACf,MAAA;AACL,MAAA,IAAA,CAAK,YAAe,GAAA;AAAA,QAClB,GAAG,IAAK,CAAA,YAAA;AAAA,QACR,GAAG,IAAK,CAAA,MAAA,EAAQ,CAAC,WAAA,EAAa,eAAe,CAAC,CAAA;AAAA,OAChD,CAAA;AACA,MAAA,IAAI,OAAO,SAAW,EAAA;AACpB,QAAA,IAAA,CAAK,aAAa,SAAY,GAAA;AAAA,UAC5B,GAAG,KAAK,YAAa,CAAA,SAAA;AAAA,UACrB,GAAG,MAAO,CAAA,SAAA;AAAA,SACZ,CAAA;AAAA,OACF;AACA,MAAA,IAAI,OAAO,aAAe,EAAA;AACxB,QAAA,IAAA,CAAK,aAAa,aAAgB,GAAA;AAAA,UAChC,GAAG,KAAK,YAAa,CAAA,aAAA;AAAA,UACrB,GAAG,MAAO,CAAA,aAAA;AAAA,SACZ,CAAA;AAAA,OACF;AAAA,KACF;AAAA,GACF;AAAA,EAEA,UAAa,GAAA;AACX,IAAK,IAAA,CAAA,aAAA,CAAc,KAAM,CAAA,IAAA,CAAK,YAAY,CAAA,CAAA;AAAA,GAC5C;AAAA,EAOA,UAAA,CAAW,KAAK,KAAO,EAAA;AACrB,IAAI,IAAA,IAAA,CAAK,SAAS,GAAM,CAAA,EAAA;AACtB,MAAK,IAAA,CAAA,QAAA,CAAS,KAAK,KAAQ,GAAA,KAAA,CAAA;AAAA,KAC7B;AAAA,GACF;AAAA,EAKA,IAAO,GAAA;AACL,IAAK,IAAA,CAAA,EAAA,CAAG,UAAW,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,GAChC;AAAA,EAKA,MAAS,GAAA;AACP,IAAK,IAAA,CAAA,EAAA,CAAG,WAAW,IAAI,CAAA,CAAA;AAAA,GACzB;AAAA,EAEA,YAAe,GAAA;AACb,IAAO,OAAA,IAAA,CAAK,GAAG,aAAc,EAAA,CAAA;AAAA,GAC/B;AAAA,EAEA,YAAe,GAAA;AACb,IAAK,IAAA,CAAA,EAAA,CAAG,aAAc,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,GACnC;AAAA,EAEA,eAAA,CAAgB,QAAW,GAAA,EAAI,EAAA;AAC7B,IAAM,MAAA,WAAA,GAAc,KAAK,EAAG,CAAA,mBAAA,CAAoB,KAAK,MAAQ,EAAA,IAAA,CAAK,GAAG,eAAe,CAAA,CAAA;AACpF,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,EAAa,CAAK,EAAA,EAAA;AACpC,MAAA,MAAM,cAAc,IAAK,CAAA,EAAA,CAAG,gBAAiB,CAAA,IAAA,CAAK,QAAQ,CAAC,CAAA,CAAA;AAC3D,MAAA,IAAI,CAAC,WAAA;AAAa,QAAA,MAAA;AAClB,MAAA,MAAM,OAAO,WAAY,CAAA,IAAA,CAAA;AACzB,MAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,QAAQ,CAAA,CAAA;AACjC,MAAA,MAAM,WAA2B,GAAA;AAAA,QAC/B,UAAU,IAAK,CAAA,EAAA,CAAG,kBAAmB,CAAA,IAAA,CAAK,QAAQ,IAAI,CAAA;AAAA,QACtD,MAAM,WAAY,CAAA,IAAA;AAAA,QAClB,MAAM,KAAM,CAAA,CAAA,CAAA;AAAA,QACZ,QAAU,EAAA,KAAA;AAAA,OACZ,CAAA;AACA,MAAI,IAAA,KAAA,CAAM,WAAW,CAAG,EAAA;AACtB,QAAA,WAAA,CAAY,aAAgB,GAAA,IAAA,CAAA;AAC5B,QAAY,WAAA,CAAA,WAAA,GAAc,MAAO,CAAA,KAAA,CAAM,CAAE,CAAA,CAAA,CAAA;AACzC,QAAA,WAAA,CAAY,iBAAiB,KAAM,CAAA,CAAA,CAAA,CAAA;AAAA,OACrC,MAAA,IAAW,MAAM,MAAW,KAAA,CAAA,IAAK,MAAM,MAAO,CAAA,KAAA,CAAM,CAAE,CAAA,CAAC,CAAE,EAAA;AACvD,QAAA,WAAA,CAAY,QAAW,GAAA,IAAA,CAAA;AACvB,QAAA,WAAA,CAAY,iBAAiB,KAAM,CAAA,CAAA,CAAA,CAAA;AAAA,OACrC;AACA,MAAM,MAAA,CAAA,GAAI,SAAS,IAAO,CAAA,EAAA,KAAA,CAAA;AAC1B,MAAA,IAAI,CAAC,OAAQ,CAAA,CAAC,KAAK,CAAC,MAAA,CAAO,CAAC,CAAG,EAAA;AAC7B,QAAY,WAAA,CAAA,KAAA,GAAQ,SAAS,IAAM,CAAA,CAAA,KAAA,CAAA;AAAA,OACrC;AACA,MAAA,IAAA,CAAK,SAAS,IAAQ,CAAA,GAAA,WAAA,CAAA;AACtB,MAAK,IAAA,CAAA,iBAAA,CAAkB,GAAI,CAAA,WAAA,EAAa,WAAW,CAAA,CAAA;AAAA,KACrD;AAAA,GACF;AAAA,EAEA,iBAAoB,GAAA;AAClB,IAAM,MAAA,UAAA,GAAa,KAAK,EAAG,CAAA,mBAAA,CAAoB,KAAK,MAAQ,EAAA,IAAA,CAAK,GAAG,iBAAiB,CAAA,CAAA;AACrF,IAAA,MAAM,YAAsB,EAAC,CAAA;AAC7B,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAA,EAAY,CAAK,EAAA,EAAA;AACnC,MAAA,MAAM,aAAa,IAAK,CAAA,EAAA,CAAG,eAAgB,CAAA,IAAA,CAAK,QAAQ,CAAC,CAAA,CAAA;AACzD,MAAA,IAAI,CAAC,UAAA;AAAY,QAAA,MAAA;AACjB,MAAA,MAAM,WAAW,IAAK,CAAA,EAAA,CAAG,kBAAkB,IAAK,CAAA,MAAA,EAAQ,WAAW,IAAI,CAAA,CAAA;AACvE,MAAA,SAAA,CAAU,YAAY,UAAW,CAAA,IAAA,CAAA;AACjC,MAAK,IAAA,CAAA,mBAAA,CAAoB,GAAI,CAAA,UAAA,EAAY,QAAQ,CAAA,CAAA;AAAA,KACnD;AACA,IAAK,IAAA,CAAA,cAAA,GAAiB,SAAU,CAAA,IAAA,CAAK,EAAE,CAAA,CAAA;AAAA,GACzC;AAAA,EAKA,OAAU,GAAA;AACR,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AACZ,IAAA,IAAA,CAAK,YAAa,EAAA,CAAA;AAAA,GACpB;AACF;;AC9hBA,MAAqB,kBAAkB,OAA0B,CAAA;AAAA,EAKxD,WAAc,GAAA,KAAA,CAAA;AAAA,EAKd,WAAc,GAAA,CAAA,CAAA;AAAA,EAKd,KAAA,CAAA;AAAA,EAEP,SAAyB,EAAC,CAAA;AAAA,EAM1B,WAAY,CAAA,QAAA,EAAoB,OAAqC,GAAA,EAAI,EAAA;AACvE,IAAA,MAAM,KAAK,QAAS,CAAA,EAAA,CAAA;AACpB,IAAA,MAAM,cAAiB,GAAA;AAAA,MACrB,QAAQ,EAAG,CAAA,UAAA;AAAA,MACX,MAAM,EAAG,CAAA,aAAA;AAAA,MACT,QAAQ,EAAG,CAAA,IAAA;AAAA,MACX,cAAA,EAAgB,OAAQ,CAAA,MAAA,IAAU,EAAG,CAAA,IAAA;AAAA,MACrC,OAAO,EAAG,CAAA,aAAA;AAAA,MACV,OAAO,EAAG,CAAA,aAAA;AAAA,MACV,OAAO,EAAG,CAAA,aAAA;AAAA,MACV,eAAiB,EAAA,IAAA;AAAA,MACjB,WAAW,EAAG,CAAA,MAAA;AAAA,MACd,WAAW,EAAG,CAAA,MAAA;AAAA,MACd,gBAAkB,EAAA,KAAA;AAAA,MAClB,eAAiB,EAAA,CAAA;AAAA,MACjB,KAAO,EAAA,KAAA;AAAA,MACP,KAAO,EAAA,CAAA;AAAA,MACP,KAAO,EAAA,CAAA;AAAA,KACT,CAAA;AAEA,IAAA,MAAM,MAAM,MAAO,CAAA,MAAA,CAAO,EAAC,EAAG,gBAAgB,OAAO,CAAA,CAAA;AACrD,IAAM,KAAA,CAAA,QAAA,EAAU,KAAK,KAAK,CAAA,CAAA;AAE1B,IAAA,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;AACnB,IAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,OAAQ,CAAA,KAAA,CAAA;AAC1B,IAAA,IAAA,CAAK,OAAO,OAAU,GAAA,CAAA,CAAA,CAAA;AACtB,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAAA,GACd;AAAA,EAKA,IAAI,EAA6B,GAAA;AAC/B,IAAA,OAAO,KAAK,QAAS,CAAA,EAAA,CAAA;AAAA,GACvB;AAAA,EASA,OAAA,CAAQ,KAAO,EAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,EAAO,SAAS,IAAK,CAAA,MAAA,EAAQ,KAAQ,GAAA,IAAA,CAAK,KAAO,EAAA;AAC3E,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;AAAA,GACrB;AAAA,EAMA,WAAW,OAAoC,EAAA;AAC7C,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,SAAS,OAAO,CAAA,CAAA;AAClD,IAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,OAAQ,CAAA,KAAA,CAAA;AAC1B,IAAK,IAAA,CAAA,MAAA,GAAS,KAAK,OAAQ,CAAA,MAAA,CAAA;AAC3B,IAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,OAAQ,CAAA,KAAA,CAAA;AAC1B,IAAA,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;AAAA,GACrB;AAAA,EAMA,MAAA,CAAO,QAAQ,CAAG,EAAA;AAChB,IAAM,MAAA,UAAA,GAAa,EAAE,IAAK,CAAA,KAAA,KAAU,KAAK,MAAO,CAAA,KAAA,IAAS,CAAC,IAAK,CAAA,WAAA,CAAA,CAAA;AAC/D,IAAM,MAAA,OAAA,GACJ,UACA,IAAA,IAAA,CAAK,aAAc,CAAA,YAAA,CAAa,WAAW,IAAK,CAAA,EAAA,IAChD,IAAK,CAAA,aAAA,CAAc,iBAAsB,KAAA,KAAA,CAAA;AAC3C,IAAA,IAAI,OAAS,EAAA;AACX,MAAK,IAAA,CAAA,aAAA,CAAc,iBAAiB,KAAK,CAAA,CAAA;AACzC,MAAA,IAAA,CAAK,KAAK,KAAK,CAAA,CAAA;AAAA,KACjB;AACA,IAAA,IAAI,CAAC,UAAA;AAAY,MAAA,OAAA;AACjB,IAAA,IAAA,CAAK,WAAc,GAAA,KAAA,CAAA;AACnB,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,KAAU,KAAA,IAAA,CAAK,OAAO,KAAO,EAAA;AAC5C,MAAK,IAAA,CAAA,EAAA,CAAG,cAAc,IAAK,CAAA,MAAA,EAAQ,KAAK,EAAG,CAAA,cAAA,EAAgB,IAAK,CAAA,OAAA,CAAQ,KAAe,CAAA,CAAA;AACvF,MAAK,IAAA,CAAA,MAAA,CAAO,KAAQ,GAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAA;AAAA,KACnC;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,KAAU,KAAA,IAAA,CAAK,OAAO,KAAO,EAAA;AAC5C,MAAK,IAAA,CAAA,EAAA,CAAG,cAAc,IAAK,CAAA,MAAA,EAAQ,KAAK,EAAG,CAAA,cAAA,EAAgB,IAAK,CAAA,OAAA,CAAQ,KAAe,CAAA,CAAA;AACvF,MAAK,IAAA,CAAA,MAAA,CAAO,KAAQ,GAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAA;AAAA,KACnC;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,KAAU,KAAA,IAAA,CAAK,OAAO,KAAO,EAAA;AAC5C,MAAK,IAAA,CAAA,EAAA,CAAG,cAAc,IAAK,CAAA,MAAA,EAAQ,KAAK,EAAG,CAAA,cAAA,EAAgB,IAAK,CAAA,OAAA,CAAQ,KAAe,CAAA,CAAA;AACvF,MAAK,IAAA,CAAA,MAAA,CAAO,KAAQ,GAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAA;AAAA,KACnC;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,SAAc,KAAA,IAAA,CAAK,OAAO,SAAW,EAAA;AACpD,MAAA,IAAA,CAAK,EAAG,CAAA,aAAA;AAAA,QACN,IAAK,CAAA,MAAA;AAAA,QACL,KAAK,EAAG,CAAA,kBAAA;AAAA,QACR,KAAK,OAAQ,CAAA,SAAA;AAAA,OACf,CAAA;AACA,MAAK,IAAA,CAAA,MAAA,CAAO,SAAY,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAA;AAAA,KACvC;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,SAAc,KAAA,IAAA,CAAK,OAAO,SAAW,EAAA;AACpD,MAAA,IAAA,CAAK,EAAG,CAAA,aAAA;AAAA,QACN,IAAK,CAAA,MAAA;AAAA,QACL,KAAK,EAAG,CAAA,kBAAA;AAAA,QACR,KAAK,OAAQ,CAAA,SAAA;AAAA,OACf,CAAA;AACA,MAAK,IAAA,CAAA,MAAA,CAAO,SAAY,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAA;AAAA,KACvC;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,KAAU,KAAA,IAAA,CAAK,cAAc,KAAO,EAAA;AACnD,MAAA,IAAA,CAAK,GAAG,WAAY,CAAA,IAAA,CAAK,GAAG,mBAAqB,EAAA,IAAA,CAAK,QAAQ,KAAgB,CAAA,CAAA;AAC9E,MAAK,IAAA,CAAA,aAAA,CAAc,KAAQ,GAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAA;AAAA,KAC1C;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,gBAAqB,KAAA,IAAA,CAAK,cAAc,gBAAkB,EAAA;AACzE,MAAA,IAAA,CAAK,EAAG,CAAA,WAAA;AAAA,QACN,KAAK,EAAG,CAAA,8BAAA;AAAA,QACR,KAAK,OAAQ,CAAA,gBAAA;AAAA,OACf,CAAA;AACA,MAAK,IAAA,CAAA,aAAA,CAAc,gBAAmB,GAAA,IAAA,CAAK,OAAQ,CAAA,gBAAA,CAAA;AAAA,KACrD;AACA,IAAA,IAAI,IAAK,CAAA,OAAA,CAAQ,eAAoB,KAAA,IAAA,CAAK,cAAc,eAAiB,EAAA;AACvE,MAAA,IAAA,CAAK,GAAG,WAAY,CAAA,IAAA,CAAK,GAAG,gBAAkB,EAAA,IAAA,CAAK,QAAQ,eAAyB,CAAA,CAAA;AACpF,MAAK,IAAA,CAAA,aAAA,CAAc,eAAkB,GAAA,IAAA,CAAK,OAAQ,CAAA,eAAA,CAAA;AAAA,KACpD;AAEA,IAAI,IAAA,IAAA,CAAK,QAAQ,UAAc,IAAA,IAAA,CAAK,QAAQ,UAAe,KAAA,IAAA,CAAK,cAAc,UAAY,EAAA;AACxF,MAAA,MAAM,2BACJ,GAAA,IAAA,CAAK,EAAG,CAAA,YAAA,CAAa,gCAAgC,CACrD,IAAA,IAAA,CAAK,EAAG,CAAA,YAAA,CAAa,oCAAoC,CAAA,IACzD,IAAK,CAAA,EAAA,CAAG,aAAa,uCAAuC,CAAA,CAAA;AAC9D,MAAA,IAAI,2BAA6B,EAAA;AAC/B,QAAM,MAAA,GAAA,GAAM,KAAK,EAAG,CAAA,YAAA;AAAA,UAClB,2BAA4B,CAAA,8BAAA;AAAA,SAC9B,CAAA;AACA,QAAI,IAAA,CAAA,GAAI,KAAK,OAAQ,CAAA,UAAA,CAAA;AACrB,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,UAAA,GAAa,GAAK,EAAA;AACjC,UAAI,CAAA,GAAA,GAAA,CAAA;AACJ,UAAQ,OAAA,CAAA,IAAA;AAAA,YACN,CAA2E,wEAAA,EAAA,GAAA,CAAA,cAAA,CAAA;AAAA,WAC7E,CAAA;AAAA,SACF;AACA,QAAA,IAAA,CAAK,EAAG,CAAA,aAAA;AAAA,UACN,IAAK,CAAA,MAAA;AAAA,UACL,2BAA4B,CAAA,0BAAA;AAAA,UAC5B,CAAA;AAAA,SACF,CAAA;AAAA,OACF;AACA,MAAK,IAAA,CAAA,aAAA,CAAc,UAAa,GAAA,IAAA,CAAK,OAAQ,CAAA,UAAA,CAAA;AAAA,KAC/C;AAEA,IAAA,IAAI,KAAK,KAAO,EAAA;AACd,MAAI,IAAA,IAAA,CAAK,MAAM,KAAO,EAAA;AACpB,QAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,KAAM,CAAA,KAAA,CAAA;AACxB,QAAK,IAAA,CAAA,MAAA,GAAS,KAAK,KAAM,CAAA,MAAA,CAAA;AAAA,OAC3B;AAEA,MAAA,IAAI,KAAK,QAAS,CAAA,QAAA,IAAY,SAAS,IAAK,CAAA,OAAA,CAAQ,MAAM,CAAG,EAAA;AAC3D,QAAA,IAAA,CAAK,EAAG,CAAA,UAAA;AAAA,UACN,IAAK,CAAA,MAAA;AAAA,UACL,KAAK,OAAQ,CAAA,KAAA;AAAA,UACb,KAAK,OAAQ,CAAA,cAAA;AAAA,UACb,IAAK,CAAA,KAAA;AAAA,UACL,IAAK,CAAA,MAAA;AAAA,UACL,IAAK,CAAA,KAAA;AAAA,UACL,CAAA;AAAA,UACA,KAAK,OAAQ,CAAA,MAAA;AAAA,UACb,KAAK,OAAQ,CAAA,IAAA;AAAA,UACb,IAAK,CAAA,KAAA;AAAA,UACL,KAAK,OAAQ,CAAA,MAAA;AAAA,SACf,CAAA;AAAA,OACK,MAAA;AACL,QAAA,IAAI,WAAY,CAAA,MAAA,CAAO,IAAK,CAAA,KAAK,CAAG,EAAA;AAClC,UAAA,IAAA,CAAK,EAAG,CAAA,UAAA;AAAA,YACN,IAAK,CAAA,MAAA;AAAA,YACL,KAAK,OAAQ,CAAA,KAAA;AAAA,YACb,KAAK,OAAQ,CAAA,cAAA;AAAA,YACb,IAAK,CAAA,KAAA;AAAA,YACL,IAAK,CAAA,MAAA;AAAA,YACL,IAAK,CAAA,KAAA;AAAA,YACL,CAAA;AAAA,YACA,KAAK,OAAQ,CAAA,MAAA;AAAA,YACb,KAAK,OAAQ,CAAA,IAAA;AAAA,YACb,IAAK,CAAA,KAAA;AAAA,WACP,CAAA;AAAA,SACK,MAAA;AACL,UAAA,IAAA,CAAK,EAAG,CAAA,UAAA;AAAA,YACN,IAAK,CAAA,MAAA;AAAA,YACL,KAAK,OAAQ,CAAA,KAAA;AAAA,YACb,KAAK,OAAQ,CAAA,cAAA;AAAA,YACb,IAAK,CAAA,KAAA;AAAA,YACL,IAAK,CAAA,MAAA;AAAA,YACL,IAAK,CAAA,KAAA;AAAA,YACL,CAAA;AAAA,YACA,KAAK,OAAQ,CAAA,MAAA;AAAA,YACb,KAAK,OAAQ,CAAA,IAAA;AAAA,YACb,IAAK,CAAA,KAAA;AAAA,WACP,CAAA;AAAA,SACF;AAAA,OACF;AAEA,MAAI,IAAA,IAAA,CAAK,QAAQ,eAAiB,EAAA;AAChC,QAAA,IACE,IAAK,CAAA,QAAA,CAAS,QACb,IAAA,YAAA,CAAa,IAAK,CAAA,KAAA,CAAM,KAAK,CAAA,IAAK,YAAa,CAAA,IAAA,CAAK,KAAM,CAAA,MAAM,CACjE,EAAA;AACA,UAAK,IAAA,CAAA,EAAA,CAAG,cAAe,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,SAC7B,MAAA;AACL,UAAA,IAAA,CAAK,QAAQ,eAAkB,GAAA,KAAA,CAAA;AAC/B,UAAK,IAAA,CAAA,OAAA,CAAQ,KAAQ,GAAA,IAAA,CAAK,EAAG,CAAA,aAAA,CAAA;AAC7B,UAAK,IAAA,CAAA,OAAA,CAAQ,KAAQ,GAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,CAAA;AAClC,UAAK,IAAA,CAAA,OAAA,CAAQ,SAAY,GAAA,IAAA,CAAK,EAAG,CAAA,MAAA,CAAA;AAAA,SACnC;AAAA,OACF;AAAA,KACK,MAAA;AACL,MAAI,IAAA,IAAA,CAAK,QAAQ,CAAG,EAAA;AAClB,QAAA,IAAA,CAAK,EAAG,CAAA,UAAA;AAAA,UACN,IAAK,CAAA,MAAA;AAAA,UACL,KAAK,OAAQ,CAAA,KAAA;AAAA,UACb,KAAK,OAAQ,CAAA,cAAA;AAAA,UACb,IAAK,CAAA,KAAA;AAAA,UACL,IAAK,CAAA,MAAA;AAAA,UACL,IAAK,CAAA,KAAA;AAAA,UACL,CAAA;AAAA,UACA,KAAK,OAAQ,CAAA,MAAA;AAAA,UACb,KAAK,OAAQ,CAAA,IAAA;AAAA,UACb,IAAA;AAAA,SACF,CAAA;AAAA,OACK,MAAA;AACL,QAAA,IAAA,CAAK,EAAG,CAAA,UAAA;AAAA,UACN,IAAK,CAAA,MAAA;AAAA,UACL,CAAA;AAAA,UACA,KAAK,EAAG,CAAA,IAAA;AAAA,UACR,CAAA;AAAA,UACA,CAAA;AAAA,UACA,IAAK,CAAA,KAAA;AAAA,UACL,CAAA;AAAA,UACA,KAAK,EAAG,CAAA,IAAA;AAAA,UACR,KAAK,EAAG,CAAA,aAAA;AAAA,UACR,UAAA;AAAA,SACF,CAAA;AAAA,OACF;AAAA,KACF;AACA,IAAK,IAAA,CAAA,MAAA,CAAO,QAAQ,IAAK,CAAA,KAAA,CAAA;AACzB,IAAA,IAAA,CAAK,OAAO,OAAW,IAAA,CAAA,CAAA;AAAA,GACzB;AAAA,EAKA,WAAc,GAAA;AACZ,IAAA,IAAA,CAAK,MAAS,GAAA;AAAA,MACZ,OAAS,EAAA,CAAA,CAAA;AAAA,KACX,CAAA;AAAA,GACF;AAAA,EAKA,QAAmB,GAAA;AACjB,IAAA,OAAO,CAAa,UAAA,EAAA,IAAA,CAAK,EAAM,CAAA,CAAA,EAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GACpD;AACF;;AClSA,MAAM,QAAA,GAAW,IAAI,OAAQ,EAAA,CAAA;AAC7B,MAAM,SAAA,GAAY,IAAI,OAAQ,EAAA,CAAA;AAC9B,MAAM,SAAA,GAAY,IAAI,OAAQ,EAAA,CAAA;AAE9B,MAAM,2BAA8B,GAAA,6CAAA,CAAA;AAKpC,MAAqB,eAAe,QAAS,CAAA;AAAA,EAIpC,UAAA,CAAA;AAAA,EAKA,gBAAA,CAAA;AAAA,EAKA,UAAA,CAAA;AAAA,EAKA,oBAAA,CAAA;AAAA,EAKA,aAAA,CAAA;AAAA,EAKP,KAAA,CAAA;AAAA,EAKA,IAAA,CAAA;AAAA,EAKA,IAAA,CAAA;AAAA,EAKA,OAAA,CAAA;AAAA,EAKA,KAAA,CAAA;AAAA,EAKA,OAAA,CAAA;AAAA,EAEO,OAAA,CAAA;AAAA,EAEP,WAAY,CAAA;AAAA,IACV,IAAO,GAAA,GAAA;AAAA,IACP,GAAM,GAAA,GAAA;AAAA,IACN,GAAM,GAAA,EAAA;AAAA,IACN,MAAS,GAAA,CAAA;AAAA,IACT,MAAA;AAAA,IACA,IAAO,GAAA,CAAA;AAAA,GACT,GAAmB,EAAqB,EAAA;AACtC,IAAM,KAAA,EAAA,CAAA;AAKN,IAAA,IAAA,CAAK,UAAa,GAAA,aAAA,CAAA;AAClB,IAAK,IAAA,CAAA,gBAAA,GAAmB,IAAI,gBAAiB,EAAA,CAAA;AAC7C,IAAK,IAAA,CAAA,UAAA,GAAa,IAAI,OAAQ,EAAA,CAAA;AAC9B,IAAK,IAAA,CAAA,oBAAA,GAAuB,IAAI,gBAAiB,EAAA,CAAA;AACjD,IAAK,IAAA,CAAA,aAAA,GAAgB,IAAI,OAAQ,EAAA,CAAA;AACjC,IAAK,IAAA,CAAA,OAAA,GAAU,IAAI,OAAQ,EAAA,CAAA;AAC3B,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;AACb,IAAA,IAAA,CAAK,IAAO,GAAA,GAAA,CAAA;AACZ,IAAA,IAAA,CAAK,IAAO,GAAA,GAAA,CAAA;AACZ,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AACf,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AACf,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;AACb,IAAM,MAAA;AAAA,MACJ,IAAA;AAAA,MACA,KAAA;AAAA,MACA,GAAA;AAAA,MACA,MAAA;AAAA,KACF,GAAI,UAAU,EAAC,CAAA;AACf,IAAK,IAAA,CAAA,UAAA,GAAa,IAAQ,IAAA,KAAA,GAAQ,cAAiB,GAAA,aAAA,CAAA;AACnD,IAAI,IAAA,IAAA,CAAK,eAAe,cAAgB,EAAA;AACtC,MAAA,IAAA,CAAK,aAAa,IAAM,EAAA,KAAA,EAAO,KAAK,MAAQ,EAAA,IAAA,EAAM,KAAK,IAAI,CAAA,CAAA;AAAA,KACtD,MAAA;AACL,MAAA,IAAA,CAAK,WAAY,CAAA,GAAA,EAAK,MAAQ,EAAA,IAAA,EAAM,GAAG,CAAA,CAAA;AAAA,KACzC;AAAA,GACF;AAAA,EAKA,IAAI,IAAO,GAAA;AACT,IAAA,OAAO,IAAK,CAAA,KAAA,CAAA;AAAA,GACd;AAAA,EAMA,IAAI,KAAK,CAAW,EAAA;AAClB,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAA,CAAA;AACb,IAAA,IAAA,CAAK,sBAAuB,EAAA,CAAA;AAAA,GAC9B;AAAA,EAKA,IAAI,GAAM,GAAA;AACR,IAAA,OAAO,IAAK,CAAA,IAAA,CAAA;AAAA,GACd;AAAA,EAMA,IAAI,IAAI,CAAW,EAAA;AACjB,IAAA,IAAA,CAAK,IAAO,GAAA,CAAA,CAAA;AACZ,IAAA,IAAA,CAAK,sBAAuB,EAAA,CAAA;AAAA,GAC9B;AAAA,EAKA,IAAI,GAAM,GAAA;AACR,IAAA,OAAO,IAAK,CAAA,IAAA,CAAA;AAAA,GACd;AAAA,EAMA,IAAI,IAAI,CAAW,EAAA;AACjB,IAAA,IAAA,CAAK,IAAO,GAAA,CAAA,CAAA;AACZ,IAAA,IAAA,CAAK,sBAAuB,EAAA,CAAA;AAAA,GAC9B;AAAA,EAKA,IAAI,MAAS,GAAA;AACX,IAAA,OAAO,IAAK,CAAA,OAAA,CAAA;AAAA,GACd;AAAA,EAMA,IAAI,OAAO,MAAgB,EAAA;AACzB,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AACf,IAAA,IAAA,CAAK,sBAAuB,EAAA,CAAA;AAAA,GAC9B;AAAA,EAKA,IAAI,IAAO,GAAA;AACT,IAAA,OAAO,IAAK,CAAA,KAAA,CAAA;AAAA,GACd;AAAA,EAMA,IAAI,KAAK,IAAc,EAAA;AACrB,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;AACb,IAAA,IAAA,CAAK,sBAAuB,EAAA,CAAA;AAAA,GAC9B;AAAA,EAKA,IAAI,MAAS,GAAA;AACX,IAAA,OAAO,IAAK,CAAA,OAAA,CAAA;AAAA,GACd;AAAA,EAMA,IAAI,OAAO,MAA2B,EAAA;AACpC,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AACf,IAAA,IAAA,CAAK,sBAAuB,EAAA,CAAA;AAAA,GAC9B;AAAA,EASA,WAAY,CAAA,GAAA,GAAM,IAAK,CAAA,GAAA,EAAK,MAAS,GAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,GAAO,IAAK,CAAA,IAAA,EAAM,GAAM,GAAA,IAAA,CAAK,GAAK,EAAA;AAClF,IAAA,IAAA,CAAK,IAAO,GAAA,GAAA,CAAA;AACZ,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AACf,IAAA,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;AACb,IAAA,IAAA,CAAK,IAAO,GAAA,GAAA,CAAA;AACZ,IAAA,IAAA,CAAK,gBAAiB,CAAA,eAAA,CAAgB,GAAK,EAAA,MAAA,EAAQ,MAAM,GAAG,CAAA,CAAA;AAC5D,IAAA,IAAA,CAAK,UAAa,GAAA,aAAA,CAAA;AAAA,GAEpB;AAAA,EAYA,YAAa,CAAA,IAAA,EAAM,KAAO,EAAA,GAAA,EAAK,MAAQ,EAAA,IAAA,GAAO,IAAK,CAAA,IAAA,EAAM,GAAM,GAAA,IAAA,CAAK,GAAK,EAAA,IAAA,GAAO,CAAG,EAAA;AACjF,IAAA,IAAA,CAAK,OAAU,GAAA;AAAA,MACb,IAAA;AAAA,MACA,KAAA;AAAA,MACA,GAAA;AAAA,MACA,MAAA;AAAA,KACF,CAAA;AACA,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAA,IAAA,CAAK,GAAM,GAAA,GAAA,CAAA;AACX,IAAA,IAAA,CAAK,gBAAiB,CAAA,YAAA;AAAA,MACpB,IAAO,GAAA,IAAA;AAAA,MACP,KAAQ,GAAA,IAAA;AAAA,MACR,GAAM,GAAA,IAAA;AAAA,MACN,MAAS,GAAA,IAAA;AAAA,MACT,IAAA;AAAA,MACA,GAAA;AAAA,KACF,CAAA;AACA,IAAA,IAAA,CAAK,UAAa,GAAA,cAAA,CAAA;AAClB,IAAA,IAAA,CAAK,iBAAiB,OAAQ,CAAA,IAAA,CAAK,SAAS,IAAK,CAAA,OAAA,CAAQ,MAAM,IAAK,CAAA,OAAA,CAAQ,OAAO,IAAK,CAAA,OAAA,CAAQ,KAAK,IAAK,CAAA,OAAA,CAAQ,QAAQ,IAAK,CAAA,KAAA,EAAO,KAAK,IAAI,CAAA,CAAA;AAAA,GACjJ;AAAA,EAMA,OAAO,CAAG,EAAA;AACR,IAAM,KAAA,CAAA,MAAA,CAAO,GAAG,IAAI,CAAA,CAAA;AACpB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,iBAAoB,GAAA;AAClB,IAAA,KAAA,CAAM,iBAAkB,EAAA,CAAA;AACxB,IAAK,IAAA,CAAA,UAAA,CAAW,MAAO,CAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AACvC,IAAK,IAAA,CAAA,WAAA,CAAY,cAAe,CAAA,IAAA,CAAK,aAAa,CAAA,CAAA;AAClD,IAAA,IAAA,CAAK,oBAAqB,CAAA,QAAA,CAAS,IAAK,CAAA,gBAAA,EAAkB,KAAK,UAAU,CAAA,CAAA;AACzE,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAOA,qBAAsB,CAAA,IAAA,EAAM,WAAc,GAAA,IAAA,CAAK,WAAa,EAAA;AAC1D,IAAI,IAAA,CAAC,IAAK,CAAA,QAAA,CAAS,UAAW,CAAA,QAAA;AAAU,MAAO,OAAA,IAAA,CAAA;AAE/C,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA,CAAS,UAAU,IAAK,CAAA,QAAA,CAAS,OAAO,MAAW,KAAA,QAAA;AAAU,MAAA,IAAA,CAAK,SAAS,qBAAsB,EAAA,CAAA;AAE3G,IAAI,IAAA,CAAC,KAAK,QAAS,CAAA,MAAA;AAAQ,MAAO,OAAA,IAAA,CAAA;AAElC,IAAA,MAAM,MAAS,GAAA,SAAA,CAAA;AACf,IAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,QAAS,CAAA,MAAA,CAAO,MAAM,CAAA,CAAA;AACvC,IAAA,MAAA,CAAO,aAAa,WAAW,CAAA,CAAA;AAE/B,IAAA,MAAM,SAAS,IAAK,CAAA,QAAA,CAAS,MAAO,CAAA,MAAA,GAAS,YAAY,iBAAkB,EAAA,CAAA;AAE3E,IAAO,OAAA,IAAA,CAAK,uBAAwB,CAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;AAAA,GACpD;AAAA,EAOA,uBAAA,CAAwB,QAAQ,MAAQ,EAAA;AACtC,IAAA,MAAM,MAAS,GAAA,SAAA,CAAA;AAEf,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,CAAK,EAAA,EAAA;AAC1B,MAAM,MAAA,KAAA,GAAQ,KAAK,OAAQ,CAAA,CAAA,CAAA,CAAA;AAC3B,MAAM,MAAA,QAAA,GAAW,OAAO,IAAK,CAAA,KAAK,EAAE,GAAI,CAAA,MAAM,IAAI,KAAM,CAAA,QAAA,CAAA;AACxD,MAAA,IAAI,WAAW,CAAC,MAAA;AAAQ,QAAO,OAAA,KAAA,CAAA;AAAA,KACjC;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAMA,QAAQ,CAAG,EAAA;AACT,IAAE,CAAA,CAAA,YAAA,CAAa,KAAK,UAAU,CAAA,CAAA;AAC9B,IAAE,CAAA,CAAA,YAAA,CAAa,KAAK,gBAAgB,CAAA,CAAA;AACpC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAEA,UAAU,CAAG,EAAA;AACX,IAAA,CAAA,CAAE,YAAa,CAAA,QAAA,CAAS,MAAO,CAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA,CAAA;AACrD,IAAE,CAAA,CAAA,YAAA,CAAa,KAAK,WAAW,CAAA,CAAA;AAC/B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,sBAAyB,GAAA;AACvB,IAAM,MAAA,IAAI,MAAM,2BAA2B,CAAA,CAAA;AAAA,GAC7C;AACF;;AC9XA,MAAqB,0BAA0B,MAAO,CAAA;AAAA,EACpD,WAAY,CAAA,GAAA,EAAK,MAAQ,EAAA,IAAA,EAAM,GAAK,EAAA;AAClC,IAAM,KAAA,CAAA;AAAA,MACJ,GAAA;AAAA,MACA,MAAA;AAAA,MACA,IAAA;AAAA,MACA,GAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAKA,sBAAyB,GAAA;AACvB,IAAK,IAAA,CAAA,gBAAA,CAAiB,gBAAgB,IAAK,CAAA,GAAA,EAAK,KAAK,MAAQ,EAAA,IAAA,CAAK,IAAM,EAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAAA,GAClF;AACF;;ACfA,MAAqB,2BAA2B,MAAO,CAAA;AAAA,EACrD,WAAA,CAAY,MAAM,KAAO,EAAA,GAAA,EAAK,QAAQ,IAAM,EAAA,GAAA,EAAK,OAAO,CAAG,EAAA;AACzD,IAAM,KAAA,CAAA;AAAA,MACJ,MAAQ,EAAA;AAAA,QACN,IAAA;AAAA,QACA,KAAA;AAAA,QACA,GAAA;AAAA,QACA,MAAA;AAAA,OACF;AAAA,MACA,IAAA;AAAA,MACA,GAAA;AAAA,MACA,IAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAKA,sBAAyB,GAAA;AACvB,IAAM,MAAA;AAAA,MACJ,IAAA;AAAA,MACA,KAAA;AAAA,MACA,GAAA;AAAA,MACA,MAAA;AAAA,QACE,IAAK,CAAA,MAAA,CAAA;AACT,IAAM,MAAA,EAAE,MAAS,GAAA,IAAA,CAAA;AACjB,IAAA,IAAA,CAAK,gBAAiB,CAAA,YAAA;AAAA,MACpB,IAAO,GAAA,IAAA;AAAA,MACP,KAAQ,GAAA,IAAA;AAAA,MACR,GAAM,GAAA,IAAA;AAAA,MACN,MAAS,GAAA,IAAA;AAAA,MACT,IAAK,CAAA,IAAA;AAAA,MACL,IAAK,CAAA,GAAA;AAAA,KACP,CAAA;AAAA,GACF;AACF;;;;"}