{"version":3,"file":"leaflet-wind.cjs.js","sources":["../src/layer/Base.ts","../src/layer/canvas.ts","../src/utils/mercatorCoordinate.ts","../src/utils/CameraSync.ts","../src/utils/tile.ts","../src/layer/webgl.ts"],"sourcesContent":["import * as L from 'leaflet';\nimport { createCanvas } from 'wind-core';\n\nexport class BaseLayer extends L.Layer {\n  options: any;\n  _updating: boolean;\n  _layerId: string | number;\n  devicePixelRatio: number;\n  _width: number;\n  _height: number;\n  canvas: HTMLCanvasElement | null;\n\n  constructor(id: string | number, data: any, options: any) {\n    // @ts-ignore 原始 leaflet 定义不对 https://github.com/Leaflet/Leaflet/blob/main/src/core/Class.js#L81C2-L81C13\n    super(id, data, options);\n  }\n\n  initialize(id: string | number, data: any, options: any) {\n    if (!id) {\n      throw Error('layer id must be specified');\n    }\n\n    this._layerId = id;\n\n    L.Util.setOptions(this, options);\n\n    this.devicePixelRatio =\n      this.options.devicePixelRatio ||\n      // @ts-ignore 忽略错误\n      ((window.devicePixelRatio || window.screen.deviceXDPI / window.screen.logicalXDPI) as number);\n  }\n\n  _createCanvas(id: string | number, zIndex: number) {\n    const canvas = createCanvas(this._width, this._height, this.devicePixelRatio);\n    canvas.id = String(id);\n\n    const panes = this._map.getPanes();\n    if (panes && panes.overlayPane) {\n      panes.overlayPane.appendChild(canvas);\n    }\n\n    return canvas;\n  }\n\n  _reset() {\n    const topLeft = this._map.containerPointToLayerPoint([0, 0]);\n    L.DomUtil.setPosition(this.canvas!, topLeft);\n\n    this._redraw();\n  }\n\n  _onResize(resizeEvent: L.ResizeEvent) {\n    this.canvas!.style.width = resizeEvent.newSize.x + 'px';\n    this.canvas!.style.height = resizeEvent.newSize.y + 'px';\n    this._width = resizeEvent.newSize.x;\n    this._height = resizeEvent.newSize.y;\n    this._resizeCanvas(this.devicePixelRatio);\n  }\n\n  _zoomStart() {\n    this._moveStart();\n  }\n\n  _moveStart() {\n    if (!this._updating) {\n      this._updating = true;\n    }\n  }\n\n  _animateZoom(event: L.ZoomAnimEvent) {\n    const scale = this._map.getZoomScale(event.zoom, this._map.getZoom());\n\n    // @ts-ignore 忽略错误\n    const offset = this._map._latLngToNewLayerPoint(this._map.getBounds().getNorthWest(), event.zoom, event.center);\n\n    L.DomUtil.setTransform(this.canvas!, offset, scale);\n  }\n\n  _resizeCanvas(scale: number) {\n    this.canvas!.width = this._width * scale;\n    this.canvas!.height = this._height * scale;\n  }\n\n  _redraw() {\n    this._render();\n  }\n\n  _render() {\n    //\n  }\n\n  project(coordinate: [number, number]): [number, number] {\n    const pixel = this._map.latLngToContainerPoint(new L.LatLng(coordinate[1], coordinate[0]));\n    return [pixel.x * this.devicePixelRatio, pixel.y * this.devicePixelRatio];\n  }\n\n  unproject(pixel: [number, number]): [number, number] {\n    const coordinates = this._map.containerPointToLatLng(new L.Point(pixel[0], pixel[1]));\n    return [coordinates.lng, coordinates.lat];\n  }\n\n  intersectsCoordinate(coordinate: [number, number]): boolean {\n    const bounds = this._map.getBounds();\n    return bounds.contains(L.latLng(coordinate[1], coordinate[0])) as boolean;\n  }\n\n  onAdd(map: L.Map) {\n    this._map = map;\n    const size = map.getSize();\n    this._width = size.x;\n    this._height = size.y;\n\n    this.canvas = this._createCanvas(this._layerId, this.options.zIndex || 1);\n\n    const animated = this._map.options.zoomAnimation && L.Browser.any3d;\n    L.DomUtil.addClass(this.canvas, 'leaflet-zoom-' + (animated ? 'animated' : 'hide'));\n\n    // @ts-ignore 忽略错误\n    this._map.on(this.getEvents(), this);\n\n    this._resetView();\n\n    this._render();\n\n    return this;\n  }\n\n  _resetView(e?: any) {}\n\n  onMoveEnd() {\n    this._reset();\n  }\n\n  onRemove() {\n    const panes = this._map.getPanes();\n    if (panes && panes.overlayPane) {\n      panes.overlayPane.removeChild(this.canvas!);\n    }\n\n    // @ts-ignore 忽略错误\n    this._map.off(this.getEvents(), this);\n\n    this.canvas = null;\n\n    return this;\n  }\n\n  getEvents() {\n    const events: {\n      [key: string]: any;\n    } = {\n      resize: this._onResize,\n      viewreset: this._render,\n      moveend: this.onMoveEnd,\n      // movestart: this._moveStart,\n      zoomstart: this._render,\n      zoomend: this._render,\n      // zoomanim: undefined,\n    };\n\n    if (this._map.options.zoomAnimation && L.Browser.any3d) {\n      events.zoomanim = this._animateZoom;\n    }\n\n    return events;\n  }\n}\n","import type { Field, IField, IOptions } from 'wind-core';\nimport { assign, defaultOptions, formatData, isArray, WindCore } from 'wind-core';\n\nimport { BaseLayer } from './Base';\n\nexport class WindLayer extends BaseLayer {\n  field: Field | undefined;\n  wind: WindCore | null;\n\n  initialize(id: string | number, data: any, options: any) {\n    super.initialize(id, data, options);\n\n    this.field = undefined;\n\n    this.pickWindOptions();\n    if (data) {\n      this.setData(data, options.fieldOptions);\n    }\n  }\n\n  _redraw() {\n    this._render();\n  }\n\n  _render() {\n    const opt = this.getWindOptions();\n    if (!this.wind && this._map) {\n      const ctx = this.canvas!.getContext('2d');\n      const data = this.getData();\n\n      this.wind = new WindCore(ctx!, opt, data);\n\n      this.wind.project = this.project.bind(this);\n      this.wind.unproject = this.unproject.bind(this);\n      this.wind.intersectsCoordinate = this.intersectsCoordinate.bind(this);\n      this.wind.postrender = () => {\n        // @ts-ignore\n        // this.setCanvasUpdated();\n      };\n    }\n\n    this.wind!.prerender();\n\n    this.wind!.render();\n  }\n\n  onRemove(): this {\n    if (this.wind) {\n      this.wind.stop();\n      this.wind = null;\n    }\n    return super.onRemove();\n  }\n\n  pickWindOptions() {\n    Object.keys(defaultOptions).forEach((key: string) => {\n      if (key in this.options) {\n        if (this.options.windOptions === undefined) {\n          this.options.windOptions = {};\n        }\n        // @ts-ignore\n        this.options.windOptions[key] = this.options[key];\n      }\n    });\n  }\n\n  /**\n   * get wind layer data\n   */\n  getData() {\n    return this.field;\n  }\n\n  /**\n   * set layer data\n   * @param data\n   * @param options\n   * @returns {WindLayer}\n   */\n  setData(data: any, options: Partial<IField> = {}) {\n    if (data && data.checkFields && data.checkFields()) {\n      this.field = data;\n    } else if (isArray(data)) {\n      this.field = formatData(data, options);\n    } else {\n      console.error('Illegal data');\n    }\n\n    if (this.field) {\n      this?.wind?.updateData(this.field);\n    }\n    return this;\n  }\n\n  setWindOptions(options: Partial<IOptions>) {\n    const beforeOptions = this.options.windOptions || {};\n    this.options = assign(this.options, {\n      windOptions: assign(beforeOptions, options || {}),\n    });\n\n    if (this.wind) {\n      const windOptions = this.options.windOptions;\n      this.wind.setOptions(windOptions);\n      this.wind.prerender();\n    }\n  }\n\n  getWindOptions() {\n    return this.options.windOptions || {};\n  }\n}\n","import { utils } from '@sakitam-gis/vis-engine';\n\nconst { clamp } = utils;\n\nexport const earthRadius = 6371008.8;\n\n/*\n * The average circumference of the world in meters.\n */\nexport const earthCircumference = 2 * Math.PI * earthRadius; // meters\nexport const halfEarthCircumference = earthCircumference / 2; // meters\n/*\n * The circumference at a line of latitude in meters.\n */\nexport function circumferenceAtLatitude(latitude) {\n  return earthCircumference * Math.cos((latitude * Math.PI) / 180);\n}\n\nexport function mercatorXfromLng(lng: number) {\n  return (180 + lng) / 360;\n}\n\nexport function mercatorYfromLat(lat: number) {\n  return (180 - (180 / Math.PI) * Math.log(Math.tan(Math.PI / 4 + (lat * Math.PI) / 360))) / 360;\n}\n\nexport function mercatorZfromAltitude(altitude, lat) {\n  return altitude / circumferenceAtLatitude(lat);\n}\n\nexport function lngFromMercatorX(x: number, wrap = 0) {\n  return x * 360 - 180 + wrap * 360;\n}\n\nexport function latFromMercatorY(y) {\n  const y2 = 180 - y * 360;\n  return (360 / Math.PI) * Math.atan(Math.exp((y2 * Math.PI) / 180)) - 90;\n}\n\nexport function altitudeFromMercatorZ(z, y) {\n  return z * circumferenceAtLatitude(latFromMercatorY(y));\n}\n\n/**\n * Determine the Mercator scale factor for a given latitude, see\n * https://en.wikipedia.org/wiki/Mercator_projection#Scale_factor\n *\n * At the equator the scale factor will be 1, which increases at higher latitudes.\n *\n * @param {number} lat Latitude\n * @returns {number} scale factor\n * @private\n */\nexport function mercatorScale(lat) {\n  return 1 / Math.cos((lat * Math.PI) / 180);\n}\n\nexport function meterInMercatorCoordinateUnits(y) {\n  // 1 meter / circumference at equator in meters * Mercator projection scale factor at this latitude\n  return (1 / earthCircumference) * mercatorScale(latFromMercatorY(y));\n}\n\nexport function pixelsInMercatorCoordinateUnits(lat, pixelsPerMeter) {\n  return (1 / earthCircumference) * mercatorScale(lat) * pixelsPerMeter;\n}\n\nexport const MAX_MERCATOR_LATITUDE = 85.051129;\n\n/**\n * 经纬度转到 mapbox 墨卡托坐标\n * @param lngLatLike\n * @param altitude\n */\nexport function fromLngLat(lngLatLike, altitude = 0) {\n  const lat = clamp(lngLatLike.lat, -MAX_MERCATOR_LATITUDE, MAX_MERCATOR_LATITUDE);\n  return {\n    x: mercatorXfromLng(lngLatLike.lng),\n    y: mercatorYfromLat(lat),\n    z: mercatorZfromAltitude(altitude, lat),\n  };\n}\n\n/**\n * 墨卡托坐标转经纬度\n * @param mercatorCoordinate\n */\nexport function toLngLat(mercatorCoordinate) {\n  return {\n    lng: lngFromMercatorX(mercatorCoordinate.x),\n    lat: latFromMercatorY(mercatorCoordinate.y),\n  };\n}\n\nexport function getCoordinatesCenterTileID(coords: Array<{ x: number; y: number }>) {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n\n  for (const coord of coords) {\n    minX = Math.min(minX, coord.x);\n    minY = Math.min(minY, coord.y);\n    maxX = Math.max(maxX, coord.x);\n    maxY = Math.max(maxY, coord.y);\n  }\n\n  const dx = maxX - minX;\n  const dy = maxY - minY;\n  const dMax = Math.max(dx, dy);\n  const zoom = Math.max(0, Math.floor(-Math.log(dMax) / Math.LN2));\n  const tilesAtZoom = Math.pow(2, zoom);\n\n  return {\n    z: zoom,\n    x: Math.floor(((minX + maxX) / 2) * tilesAtZoom),\n    y: Math.floor(((minY + maxY) / 2) * tilesAtZoom),\n    extent: [minX, minY, maxX, maxY],\n  };\n}\n","import type { vec3, vec4 } from 'gl-matrix';\nimport { quat, mat4 } from 'gl-matrix';\nimport type { Scene } from '@sakitam-gis/vis-engine';\nimport {\n  Matrix4,\n  Vector3,\n  ProjectionMatrix,\n  OrthographicCamera,\n  PerspectiveCamera,\n  utils,\n  highPrecision,\n} from '@sakitam-gis/vis-engine';\nimport { mercatorZfromAltitude } from './mercatorCoordinate';\n\nconst { degToRad, radToDeg } = utils;\n\nhighPrecision(true);\n\nconst transform = mat4.identity([] as any);\n\nexport interface ViewState {\n  width: number;\n  height: number;\n  maxPitch: number;\n  fov: number;\n  worldSize: number;\n  elevation: any;\n  _horizonShift: number;\n  getCenter: () => any;\n  getPitch: () => number;\n  getBearing: () => number;\n  getFovRad: () => number;\n  getCameraPosition: () => number[];\n\n  centerOffset: () => any;\n\n  project: (coordinates: number[]) => any;\n}\n\nexport function getColumn(matrix: mat4, col: number): vec4 {\n  return [matrix[col * 4], matrix[col * 4 + 1], matrix[col * 4 + 2], matrix[col * 4 + 3]];\n}\n\nexport function setColumn(matrix: mat4, col: number, values: vec4) {\n  matrix[col * 4 + 0] = values[0];\n  matrix[col * 4 + 1] = values[1];\n  matrix[col * 4 + 2] = values[2];\n  matrix[col * 4 + 3] = values[3];\n}\n\nfunction updateTransformOrientation(matrix: mat4, orientation: quat) {\n  // Take temporary copy of position to prevent it from being overwritten\n  const position: vec4 = getColumn(matrix, 3);\n\n  // Convert quaternion to rotation matrix\n  mat4.fromQuat(matrix, orientation);\n  setColumn(matrix, 3, position);\n}\n\nexport function updateTransformPosition(matrix: mat4, position: vec3) {\n  setColumn(matrix, 3, [position[0], position[1], position[2], 1.0]);\n}\n\nfunction orientationFromPitchBearing(pitch: number, bearing: number): quat {\n  // Both angles are considered to define CW rotation around their respective axes.\n  // Values have to be negated to achieve the proper quaternion in left handed coordinate space\n  const orientation = quat.identity([] as any);\n  quat.rotateZ(orientation, orientation, -bearing);\n  quat.rotateX(orientation, orientation, -pitch);\n  return orientation;\n}\n\nexport function getCameraPosition(pitch: number, bearing: number) {\n  const orientation = orientationFromPitchBearing(pitch, bearing);\n  updateTransformOrientation(transform, orientation);\n}\n\nexport default class CameraSync {\n  public worldMatrix: Matrix4;\n  public mercatorMatrix: Matrix4;\n  public labelPlaneMatrix: Matrix4;\n  public glCoordMatrix: Matrix4;\n  public viewState: ViewState;\n  public scene: Scene;\n  public camera: OrthographicCamera | PerspectiveCamera;\n\n  public halfFov: number;\n  public cameraToCenterDistance: number;\n  public acuteAngle: number;\n  public cameraTranslateZ: number;\n  constructor(viewState: ViewState, cameraType, scene) {\n    this.worldMatrix = new Matrix4();\n    this.mercatorMatrix = new Matrix4();\n    this.labelPlaneMatrix = new Matrix4();\n    this.glCoordMatrix = new Matrix4();\n    const { width, height } = viewState;\n    const fov = radToDeg(Math.atan(3 / 4));\n    const nearZ = 0.1;\n\n    const farZ = 1e21;\n    this.viewState = viewState;\n    this.scene = scene;\n    this.scene.matrixAutoUpdate = false;\n    this.scene.worldMatrixNeedsUpdate = true;\n    this.camera =\n      cameraType === 'orthographic'\n        ? new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearZ, farZ)\n        : new PerspectiveCamera(fov, width / height, nearZ, farZ);\n    this.camera.matrixAutoUpdate = false;\n    this.camera.position.z = 600;\n    this.setup();\n  }\n\n  setup() {\n    const { width, height, fov } = this.viewState;\n    const maxPitch = degToRad(this.viewState.maxPitch);\n    this.camera.aspect = width / height;\n    this.halfFov = fov / 2;\n    this.cameraToCenterDistance = (0.5 / Math.tan(this.halfFov)) * height;\n    this.acuteAngle = Math.PI / 2 - maxPitch;\n    this.update();\n  }\n\n  update() {\n    const { width, height, elevation, _horizonShift, worldSize } = this.viewState;\n    const center = this.viewState.getCenter();\n    const pitch = this.viewState.getPitch();\n    const pitchRad = degToRad(pitch);\n    const bearing = this.viewState.getBearing();\n    const fovRad = this.viewState.getFovRad();\n    const cameraPosition = this.viewState.getCameraPosition();\n    const halfFov = fovRad / 2;\n    const pitchAngle = Math.cos(Math.PI / 2 - pitchRad);\n    const groundAngle = Math.PI / 2 + pitchRad;\n    this.cameraToCenterDistance = (0.5 / Math.tan(halfFov)) * height;\n    const point = this.viewState.project(center);\n    const rotateMap = new Matrix4().fromRotationZ(Math.PI);\n    const scale = new Matrix4().fromScale(new Vector3(-worldSize, worldSize, worldSize));\n    const translateMap = new Matrix4().fromTranslation(new Vector3(-point.x, point.y, 0));\n    const nz = height / 50;\n    const nearZ = Math.max(nz * pitchAngle, nz);\n    const fovAboveCenter = fovRad * (0.5 + this.viewState.centerOffset().y / height);\n    const pixelsPerMeter = mercatorZfromAltitude(1, center.lat) * worldSize || 1;\n    // Adjust distance to MSL by the minimum possible elevation visible on screen,\n    // this way the far plane is pushed further in the case of negative elevation.\n    const minElevationInPixels = elevation ? elevation.getMinElevationBelowMSL() * pixelsPerMeter : 0;\n    const cameraToSeaLevelDistance = (cameraPosition[2] * worldSize - minElevationInPixels) / Math.cos(pitchRad);\n    // eslint-disable-next-line max-len\n    const topHalfSurfaceDistance =\n      (Math.sin(fovAboveCenter) * cameraToSeaLevelDistance) /\n      Math.sin(utils.clamp(Math.PI - groundAngle - fovAboveCenter, 0.01, Math.PI - 0.01));\n\n    // Calculate z distance of the farthest fragment that should be rendered.\n    const furthestDistance = pitchAngle * topHalfSurfaceDistance + cameraToSeaLevelDistance;\n\n    // Add a bit extra to avoid precision problems when a fragment's distance is exactly `furthestDistance`\n    const horizonDistance = cameraToSeaLevelDistance * (1 / _horizonShift);\n    const farZ = Math.min(furthestDistance * 1.01, horizonDistance);\n\n    this.mercatorMatrix = new Matrix4().scale(new Vector3(worldSize, worldSize, worldSize / pixelsPerMeter));\n\n    const may = new Matrix4().fromTranslation(new Vector3(0, 0, this.cameraToCenterDistance));\n\n    this.labelPlaneMatrix = new Matrix4();\n\n    const m = new Matrix4();\n    m.scale(new Vector3(1, -1, 1));\n    m.translate(new Vector3(-1, -1, 0));\n    m.scale(new Vector3(2 / width, 2 / height, 1));\n    this.glCoordMatrix = m;\n\n    this.camera.aspect = width / height;\n\n    this.cameraTranslateZ = this.cameraToCenterDistance;\n\n    if (this.camera instanceof OrthographicCamera) {\n      this.camera.projectionMatrix.orthographic(-width / 2, width / 2, height / 2, -height / 2, nearZ, farZ);\n    } else {\n      this.camera.projectionMatrix.perspective(fovRad, width / height, nearZ, farZ);\n    }\n\n    const cameraWorldMatrix = new Matrix4()\n      .premultiply(may)\n      .premultiply(new Matrix4().fromRotationX(pitchRad))\n      .premultiply(new Matrix4().fromRotationZ(-degToRad(bearing)));\n\n    if (elevation) cameraWorldMatrix.elements[14] = cameraPosition[2] * worldSize;\n\n    this.camera.worldMatrix.copy(cameraWorldMatrix);\n    this.camera.updateMatrixWorld();\n    if (this.scene) {\n      this.scene.localMatrix = new ProjectionMatrix()\n        .premultiply(rotateMap)\n        .premultiply(scale)\n        .premultiply(translateMap);\n    }\n  }\n}\n","import type { TileBounds, TileID } from 'wind-gl-core';\nimport { fromLngLat, latFromMercatorY, lngFromMercatorX, MAX_MERCATOR_LATITUDE } from './mercatorCoordinate';\n\nexport function getTileProjBounds(tileID: TileID) {\n  const numTiles = 1 << tileID.z;\n  return {\n    left: tileID.wrapedX / numTiles,\n    top: tileID.wrapedY / numTiles,\n    right: (tileID.wrapedX + 1) / numTiles,\n    bottom: (tileID.wrapedY + 1) / numTiles,\n  };\n}\n\nexport function getTileBounds(tileID: TileID): TileBounds {\n  const { z, x, y } = tileID;\n  const wrap = tileID.wrap;\n  const numTiles = 1 << z;\n  const leftLng = lngFromMercatorX(x / numTiles, wrap);\n  const rightLng = lngFromMercatorX((x + 1) / numTiles, wrap);\n  const topLat = latFromMercatorY(y / numTiles);\n  const bottomLat = latFromMercatorY((y + 1) / numTiles);\n\n  return [leftLng, bottomLat, rightLng, topLat];\n}\n\nexport function getExtent(map: any) {\n  const bounds: any = map?.getBounds();\n  const southWest = bounds.getSouthWest();\n  const northEast = bounds.getNorthEast();\n\n  const [xmin, ymin, xmax, ymax] = [southWest.lng, southWest.lat, northEast.lng, northEast.lat];\n\n  const minY = Math.max(ymin, -MAX_MERCATOR_LATITUDE);\n  const maxY = Math.min(ymax, MAX_MERCATOR_LATITUDE);\n  const p0 = fromLngLat({ lng: xmin, lat: maxY });\n  const p1 = fromLngLat({ lng: xmax, lat: minY });\n  return [p0.x, p0.y, p1.x, p1.y];\n}\n\nexport function getClampZoom(options) {\n  const z = options.zoom;\n  if (undefined !== options.minzoom && z < options.minzoom) {\n    return options.minzoom;\n  }\n\n  if (undefined !== options.maxzoom && options.maxzoom < z) {\n    return options.maxzoom;\n  }\n\n  return z;\n}\n","import * as L from 'leaflet';\nimport rewind from '@mapbox/geojson-rewind';\nimport { OrthographicCamera, Renderer, Scene, utils } from '@sakitam-gis/vis-engine';\nimport type { SourceType, RenderType, UserOptions } from 'wind-gl-core';\nimport { LayerSourceType, TileID, BaseLayer as Layer, polygon2buffer } from 'wind-gl-core';\nimport CameraSync from '../utils/CameraSync';\nimport {\n  MAX_MERCATOR_LATITUDE,\n  mercatorXfromLng,\n  mercatorYfromLat,\n  lngFromMercatorX,\n  latFromMercatorY,\n  fromLngLat,\n  mercatorZfromAltitude,\n  getCoordinatesCenterTileID,\n} from '../utils/mercatorCoordinate';\nimport { getTileBounds, getTileProjBounds, getExtent, getClampZoom } from '../utils/tile';\nimport { BaseLayer } from './Base';\n\nclass ViewState {\n  _width: number;\n  _height: number;\n  _fov: number;\n  _worldSize: number;\n  _center: any;\n\n  zoom: number;\n  tileSize = 512;\n  maxPitch = 60;\n  elevation: any;\n  _horizonShift = 0.1;\n\n  /**\n   * 获取 gl 宽度\n   */\n  get width() {\n    return this._width;\n  }\n\n  /**\n   * 获取 gl 高度\n   */\n  get height() {\n    return this._height;\n  }\n\n  get fov() {\n    return (this.getFovRad() / Math.PI) * 180;\n  }\n\n  get worldSize() {\n    const scale = Math.pow(2, this.zoom - 1);\n    return this.tileSize * scale;\n  }\n\n  getCenter() {\n    return this._center;\n  }\n  getPitch() {\n    return 0;\n  }\n  getBearing() {\n    return 0;\n  }\n  getFovRad() {\n    return 0.6435011087932844;\n  }\n\n  getCameraPosition() {\n    return [0, 0, 0];\n  }\n\n  centerOffset() {\n    return { x: 0, y: 0 };\n  }\n\n  project(lnglat) {\n    const lat = utils.clamp(lnglat.lat, -MAX_MERCATOR_LATITUDE, MAX_MERCATOR_LATITUDE);\n\n    const x = mercatorXfromLng(lnglat.lng);\n    const y = mercatorYfromLat(lat);\n    return { x: x * this.worldSize, y: y * this.worldSize, z: 0 };\n  }\n\n  get pixelsPerMeter(): number {\n    return mercatorZfromAltitude(1, this._center.lat) * this.worldSize;\n  }\n\n  unproject(p: number[]) {\n    const lng = lngFromMercatorX(p[0]);\n    const lat = latFromMercatorY(p[1]);\n    return [lng, lat];\n  }\n\n  update(state: Record<string, any>) {\n    this._center = state.center;\n    this._width = state.width;\n    this._height = state.height;\n    this.zoom = state.zoom;\n  }\n}\n\nexport interface LayerOptions extends UserOptions {\n  renderingMode?: '2d' | '3d';\n}\n\nexport function wrapTile(x: number, range: number[], includeMax?: boolean) {\n  const max = range[1];\n  const min = range[0];\n  const d = max - min;\n  return {\n    x: x === max && includeMax ? x : ((((x - min) % d) + d) % d) + min,\n    wrap: Math.floor(x / max),\n  };\n}\n\nexport class WebglLayer extends BaseLayer {\n  gl: WebGL2RenderingContext | WebGLRenderingContext | null;\n  renderer: Renderer;\n  scene: Scene;\n  sync: CameraSync;\n  planeCamera: OrthographicCamera;\n  viewState: ViewState;\n  layer: Layer;\n  _tileZoom: number | undefined;\n  _wrapX: undefined | false | number[];\n  _wrapY: undefined | false | number[];\n  _globalTileRange: any;\n  _currentTiles: any[];\n  _unLimitTiles: any[];\n  private source: SourceType;\n\n  initialize(id: string | number, source: any, options: any) {\n    super.initialize(id, source, options);\n\n    this.viewState = new ViewState();\n\n    this._currentTiles = [];\n    this._unLimitTiles = [];\n\n    this.source = source;\n  }\n\n  _resizeCanvas(scale: number) {\n    super._resizeCanvas(scale);\n\n    if (this.renderer) {\n      this.renderer.setSize(this._width, this._height);\n    }\n\n    if (this.layer) {\n      this.layer.resize(this._width, this._height);\n    }\n\n    this._render();\n  }\n\n  get camera() {\n    return this.sync.camera;\n  }\n\n  getTileSize() {\n    const s = utils.isNumber(this.source.tileSize) ? this.source.tileSize : this.source.tileSize?.[0] || 512;\n    return new L.Point(s, s);\n  }\n\n  _redraw() {\n    if (this._map && this.source) {\n      const tileZoom = getClampZoom({\n        zoom: this._map.getZoom(),\n        minzoom: this.source.minZoom,\n        maxzoom: this.source.maxZoom,\n      });\n\n      if (tileZoom !== this._tileZoom) {\n        this._tileZoom = tileZoom;\n      }\n      this._update();\n    }\n    return this;\n  }\n\n  _render() {\n    if (this._map && this.viewState) {\n      this.viewState.update({\n        center: this._map.getCenter(),\n        zoom: this._map.getZoom(),\n        width: this._width,\n        height: this._height,\n      });\n    }\n\n    if (!this.gl) {\n      this.gl = utils.getContext(\n        this.canvas!,\n        {\n          preserveDrawingBuffer: false,\n          antialias: true, // https://bugs.webkit.org/show_bug.cgi?id=237906\n          stencil: true,\n        },\n        true,\n      );\n\n      this.renderer = new Renderer(this.gl!, {\n        autoClear: false,\n        extensions: [\n          'OES_texture_float',\n          'OES_texture_float_linear',\n          'WEBGL_color_buffer_float',\n          'EXT_color_buffer_float',\n        ],\n      });\n\n      this.scene = new Scene();\n      this.sync = new CameraSync(this.viewState, 'perspective', this.scene);\n      this.planeCamera = new OrthographicCamera(0, 1, 1, 0, 0, 1);\n\n      this.layer = new Layer(\n        this.source,\n        {\n          renderer: this.renderer,\n          scene: this.scene,\n        },\n        {\n          renderType: this.options.renderType,\n          renderFrom: this.options.renderFrom,\n          styleSpec: this.options.styleSpec,\n          displayRange: this.options.displayRange,\n          widthSegments: this.options.widthSegments,\n          heightSegments: this.options.heightSegments,\n          wireframe: this.options.wireframe,\n          picking: this.options.picking,\n          mask: this.processMask(),\n          getZoom: () => this.viewState.zoom as number,\n          triggerRepaint: () => {\n            requestAnimationFrame(() => this._update());\n          },\n          getTileProjSize: (z: number) => {\n            const w = 1 / Math.pow(2, z);\n            return [w, w];\n          },\n          getPixelsToUnits: (): [number, number] => {\n            const pixel = 1;\n            const y = this.canvas!.clientHeight / 2 - pixel / 2;\n            const x = this.canvas!.clientWidth / 2 - pixel / 2;\n            const left = fromLngLat(this.viewState.unproject([x, y]));\n            const right = fromLngLat(this.viewState.unproject([x + pixel, y + pixel]));\n\n            return [Math.abs(right.x - left.x), Math.abs(left.y - right.y)];\n          },\n          getPixelsToProjUnit: () => [this.viewState.pixelsPerMeter, this.viewState.pixelsPerMeter],\n          getViewTiles: (source: SourceType, renderType: RenderType) => {\n            let { type } = source;\n            // @ts-ignore\n            type = type !== LayerSourceType.timeline ? type : source.privateType;\n            if (!this._map) return [];\n            const wrapTiles: TileID[] = [];\n            if (type === LayerSourceType.image) {\n              const cornerCoords = (source as any).coordinates.map((c: any) => fromLngLat({ lng: c[0], lat: c[1] }));\n              const tileID = getCoordinatesCenterTileID(cornerCoords);\n              if (source.wrapX) {\n                // 暂时只允许单世界\n                const x = tileID.x;\n                const y = tileID.y;\n                const z = tileID.z;\n                const wrap = 0;\n                wrapTiles.push(\n                  new TileID(z, wrap, z, x, y, {\n                    getTileBounds: () => [\n                      (source as any).coordinates[0][0],\n                      (source as any).coordinates[2][1],\n                      (source as any).coordinates[1][0],\n                      (source as any).coordinates[0][1],\n                    ],\n                    getTileProjBounds: () => ({\n                      left: tileID.extent[0] + wrap,\n                      top: tileID.extent[1],\n                      right: tileID.extent[2] + wrap,\n                      bottom: tileID.extent[3],\n                    }),\n                  }),\n                );\n              } else {\n                const x = tileID.x;\n                const y = tileID.y;\n                const z = tileID.z;\n                const wrap = 0;\n                wrapTiles.push(\n                  new TileID(z, wrap, z, x, y, {\n                    getTileBounds: () => [\n                      (source as any).coordinates[0][0],\n                      (source as any).coordinates[2][1],\n                      (source as any).coordinates[1][0],\n                      (source as any).coordinates[0][1],\n                    ],\n                    getTileProjBounds: () => ({\n                      left: tileID.extent[0] + wrap,\n                      top: tileID.extent[1],\n                      right: tileID.extent[2] + wrap,\n                      bottom: tileID.extent[3],\n                    }),\n                  }),\n                );\n              }\n            } else if (type === LayerSourceType.tile) {\n              const tiles = this._currentTiles;\n\n              for (let i = 0; i < tiles.length; i++) {\n                const tile = tiles[i];\n                const { x, y, z, wrap } = tile;\n                if (source.wrapX) {\n                  wrapTiles.push(\n                    new TileID(z, wrap, z, x, y, {\n                      getTileBounds,\n                      getTileProjBounds,\n                    }),\n                  );\n                } else if (tile.wrap === 0) {\n                  wrapTiles.push(\n                    new TileID(z, wrap, z, x, y, {\n                      getTileBounds,\n                      getTileProjBounds,\n                    }),\n                  );\n                }\n              }\n            }\n\n            return wrapTiles;\n          },\n          getExtent: () => getExtent(this._map),\n          getGridTiles: (source: any) => {\n            const wrapX = source.wrapX;\n            if (!this._map) return [];\n\n            const tiles = this._unLimitTiles;\n            const wrapTiles: TileID[] = [];\n\n            for (let i = 0; i < tiles.length; i++) {\n              const tile = tiles[i];\n              const { x, y, z, wrap } = tile;\n              if (wrapX) {\n                wrapTiles.push(\n                  new TileID(z, wrap, z, x, y, {\n                    getTileBounds,\n                    getTileProjBounds,\n                  }),\n                );\n              } else if (tile.wrap === 0) {\n                wrapTiles.push(\n                  new TileID(z, wrap, z, x, y, {\n                    getTileBounds,\n                    getTileProjBounds,\n                  }),\n                );\n              }\n            }\n\n            return wrapTiles;\n          },\n        },\n      );\n    }\n\n    if (this.sync) {\n      this.sync.update();\n    }\n\n    if (this.layer) {\n      this.layer.update();\n    }\n\n    this.glPrerender();\n    this.glRender();\n  }\n\n  glPrerender() {\n    this.scene.worldMatrixNeedsUpdate = true;\n    this.scene.updateMatrixWorld();\n    this.camera.updateMatrixWorld();\n    const worlds = this.calcWrappedWorlds();\n    this.layer?.prerender({\n      worlds,\n      camera: this.camera,\n      planeCamera: this.planeCamera,\n    });\n  }\n\n  glRender() {\n    this.scene.worldMatrixNeedsUpdate = true;\n    this.scene.updateMatrixWorld();\n    this.camera.updateMatrixWorld();\n    const worlds = this.calcWrappedWorlds();\n    this.layer?.render({\n      worlds,\n      camera: this.camera,\n      planeCamera: this.planeCamera,\n    });\n  }\n\n  async picker(coordinates) {\n    if (!this.options.picking) {\n      console.warn('[Layer]: please enable picking options!');\n      return null;\n    }\n    if (!this.layer || !coordinates || !this._map) {\n      console.warn('[Layer]: layer not initialized!');\n      return null;\n    }\n    const point = this._map.project(coordinates);\n    return this.layer.picker([point.x, point.y]);\n  }\n\n  calcWrappedWorlds() {\n    return [0];\n  }\n\n  _resetView(e?: any) {\n    const animating = e && (e.pinch || e.flyTo);\n    this._setView(this._map.getCenter(), this._map.getZoom(), animating, animating);\n  }\n\n  _resetGrid() {\n    const map = this._map;\n    const crs = map.options.crs;\n    const tileSize = this.getTileSize();\n    const tileZoom = this._tileZoom;\n\n    const bounds = this._map.getPixelWorldBounds(this._tileZoom);\n    if (bounds) {\n      this._globalTileRange = this._pxBoundsToTileRange(bounds);\n    }\n\n    // 无论任何时候都计算瓦片范围，我们需要用此参数计算瓦片在那个世界\n    this._wrapX = crs!.wrapLng && [\n      Math.floor(map.project([0, crs!.wrapLng[0]], tileZoom).x / tileSize.x),\n      Math.ceil(map.project([0, crs!.wrapLng[1]], tileZoom).x / tileSize.y),\n    ];\n    this._wrapY = crs!.wrapLat && [\n      Math.floor(map.project([crs!.wrapLat[0], 0], tileZoom).y / tileSize.x),\n      Math.ceil(map.project([crs!.wrapLat[1], 0], tileZoom).y / tileSize.y),\n    ];\n  }\n\n  _setView(center: L.LatLng, zoom: number, noPrune?: boolean, noUpdate?: boolean) {\n    let tileZoom: number | undefined = Math.round(zoom);\n    if (\n      (this.options.maxZoom !== undefined && tileZoom > this.options.maxZoom) ||\n      (this.options.minZoom !== undefined && tileZoom < this.options.minZoom)\n    ) {\n      tileZoom = undefined;\n    } else {\n      tileZoom = getClampZoom({\n        minzoom: this.source.minZoom,\n        maxzoom: this.source.maxZoom,\n        zoom: tileZoom,\n      });\n    }\n\n    const tileZoomChanged = this.options.updateWhenZooming && tileZoom !== this._tileZoom;\n\n    if (!noUpdate || tileZoomChanged) {\n      this._tileZoom = tileZoom;\n\n      this._resetGrid();\n\n      if (tileZoom !== undefined) {\n        this._update(center);\n      }\n    }\n  }\n\n  _tileCoordsToBounds(coords) {\n    const bp = this._tileCoordsToNwSe(coords);\n    let bounds = new L.LatLngBounds(bp[0], bp[1]);\n\n    if (!this.source.wrapX) {\n      bounds = this._map.wrapLatLngBounds(bounds);\n    }\n    return bounds;\n  }\n\n  _tileCoordsToNwSe(coords) {\n    const map = this._map;\n    const tileSize = this.getTileSize();\n    const nwPoint = coords.scaleBy(tileSize);\n    const sePoint = nwPoint.add(tileSize);\n    const nw = map.unproject(nwPoint, coords.z);\n    const se = map.unproject(sePoint, coords.z);\n    return [nw, se];\n  }\n\n  _isValidTile(coords) {\n    const crs = this._map.options.crs as any;\n\n    if (!crs.infinite) {\n      // don't load tile if it's out of bounds and not wrapped\n      const bounds = this._globalTileRange;\n      if (\n        (!crs.wrapLng && (coords.x < bounds.min.x || coords.x > bounds.max.x)) ||\n        (!crs.wrapLat && (coords.y < bounds.min.y || coords.y > bounds.max.y))\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  _wrapCoords(coords) {\n    const t = this._wrapX ? wrapTile(coords.x, this._wrapX) : { x: coords.x, wrap: 0 };\n    const newCoords = new L.Point(\n      t.x,\n      this._wrapY && !this.source.wrapX ? L.Util.wrapNum(coords.y, this._wrapY) : coords.y,\n    );\n    (newCoords as any).z = coords.z;\n    (newCoords as any).wrap = t.wrap;\n    return newCoords;\n  }\n\n  _update(center?: L.LatLng) {\n    const map = this._map;\n    if (!map || !this.source) {\n      return;\n    }\n\n    const zoom = getClampZoom({\n      zoom: map.getZoom(),\n      minzoom: this.source.minZoom,\n      maxzoom: this.source.maxZoom,\n    });\n\n    if (center === undefined) {\n      center = map.getCenter();\n    }\n\n    if (this._tileZoom === undefined) {\n      return;\n    }\n\n    const pixelBounds = this._getTiledPixelBounds(center, this._tileZoom);\n    const tileRange = this._pxBoundsToTileRange(pixelBounds);\n    const tileCenter = tileRange.getCenter();\n    const queue: any[] = [];\n\n    if (\n      !(\n        isFinite(tileRange.min!.x) &&\n        isFinite(tileRange.min!.y) &&\n        isFinite(tileRange.max!.x) &&\n        isFinite(tileRange.max!.y)\n      )\n    ) {\n      throw new Error('Attempted to load an infinite number of tiles');\n    }\n\n    if (Math.abs(zoom - this._tileZoom) > 1) {\n      this._setView(center, zoom);\n      return;\n    }\n\n    for (let j = tileRange.min!.y; j <= tileRange.max!.y; j++) {\n      for (let i = tileRange.min!.x; i <= tileRange.max!.x; i++) {\n        const coords = new L.Point(i, j);\n        (coords as any).z = this._tileZoom;\n\n        if (!this._isValidTile(coords)) {\n          continue;\n        }\n\n        queue.push(this._wrapCoords(coords));\n      }\n    }\n\n    queue.sort((a, b) => a.distanceTo(tileCenter) - b.distanceTo(tileCenter));\n\n    const z = map.getZoom();\n    const bounds = this._getTiledPixelBounds(center, z);\n    if (bounds) {\n      const unLimitTileRange = this._pxBoundsToTileRange(bounds);\n      const tc = tileRange.getCenter();\n\n      const tileCoords: any[] = [];\n\n      for (let j = unLimitTileRange.min!.y; j <= unLimitTileRange.max!.y; j++) {\n        for (let i = unLimitTileRange.min!.x; i <= unLimitTileRange.max!.x; i++) {\n          const coords = new L.Point(i, j);\n          (coords as any).z = z;\n\n          if (!this._isValidTile(coords)) {\n            continue;\n          }\n\n          tileCoords.push(this._wrapCoords(coords));\n        }\n      }\n\n      tileCoords.sort((a, b) => a.distanceTo(tc) - b.distanceTo(tc));\n\n      this._unLimitTiles = tileCoords;\n    }\n\n    this._currentTiles = queue;\n\n    this._render();\n\n    return queue;\n  }\n\n  _getTiledPixelBounds(center: L.LatLng, zoom: number) {\n    const map = this._map;\n    // @ts-ignore 类型未暴露\n    const mapZoom = map._animatingZoom ? Math.max(map._animateToZoom, map.getZoom()) : map.getZoom();\n    const scale = map.getZoomScale(mapZoom, zoom);\n    const pixelCenter = map.project(center, zoom).floor();\n    const halfSize = map.getSize().divideBy(scale * 2);\n\n    return new L.Bounds(pixelCenter.subtract(halfSize), pixelCenter.add(halfSize));\n  }\n\n  _pxBoundsToTileRange(bounds: L.Bounds) {\n    const tileSize = this.getTileSize();\n    return new L.Bounds(\n      bounds.min!.unscaleBy(tileSize).floor(),\n      bounds.max!.unscaleBy(tileSize).ceil().subtract([1, 1]),\n    );\n  }\n\n  handleZoom() {\n    this._resetView();\n    if (this.layer) {\n      this.layer.handleZoom();\n    }\n  }\n\n  onMoveEnd() {\n    this._reset();\n    if (!this._map || (this._map as any)._animatingZoom) {\n      return;\n    }\n\n    if (this.layer) {\n      this.layer.moveEnd();\n    }\n  }\n\n  onMoveStart() {\n    if (this.layer) {\n      this.layer.moveStart();\n    }\n  }\n\n  _animateZoom(event: L.ZoomAnimEvent) {\n    super._animateZoom(event);\n    this._setView(event.center, event.zoom, true, event.noUpdate);\n    this.handleZoom();\n  }\n\n  getEvents() {\n    const events: Record<string, any> = {\n      resize: this._onResize,\n      viewreset: this._resetView,\n      moveend: this.onMoveEnd,\n      movestart: this.onMoveStart,\n      zoom: this.handleZoom,\n      zoomend: this._reset,\n    };\n\n    if (this._map.options.zoomAnimation && L.Browser.any3d) {\n      events.zoomanim = this._animateZoom;\n    }\n\n    return events;\n  }\n\n  updateOptions(options: Partial<LayerOptions>) {\n    this.options = {\n      ...this.options,\n      ...(options || {}),\n    };\n    if (this.layer) {\n      this.layer.updateOptions(options);\n    }\n\n    this._redraw();\n  }\n\n  public getMask() {\n    return this.options.mask;\n  }\n\n  private processMask() {\n    if (this.options.mask) {\n      const mask = this.options.mask;\n      const data = mask.data;\n      // @link https://github.com/mapbox/geojson-rewind\n      rewind(data, true);\n\n      const tr = (coords) => {\n        const mercatorCoordinates: any[] = [];\n        for (let i = 0; i < coords.length; i++) {\n          const coord = coords[i];\n          const p = fromLngLat(coord);\n          mercatorCoordinates.push([p.x, p.y]);\n        }\n\n        return mercatorCoordinates;\n      };\n\n      const features = data.features;\n      const len = features.length;\n      let i = 0;\n      const fs: any[] = [];\n      for (; i < len; i++) {\n        const feature = features[i];\n\n        const coordinates = feature.geometry.coordinates;\n        const type = feature.geometry.type;\n\n        if (type === 'Polygon') {\n          fs.push({\n            type: 'Feature',\n            properties: {},\n            geometry: {\n              type: 'Polygon',\n              coordinates: feature.geometry.coordinates.map((c) => tr(c)),\n            },\n          });\n        } else if (type === 'MultiPolygon') {\n          const css: any[] = [];\n          for (let k = 0; k < coordinates.length; k++) {\n            const coordinate = coordinates[k];\n            const cs: any[] = [];\n            for (let n = 0; n < coordinate.length; n++) {\n              cs.push(tr(coordinates[k][n]));\n            }\n\n            css.push(cs);\n          }\n\n          fs.push({\n            type: 'Feature',\n            properties: {},\n            geometry: {\n              type: 'MultiPolygon',\n              coordinates: css,\n            },\n          });\n        }\n      }\n\n      return {\n        data: polygon2buffer(fs),\n        type: mask.type,\n      };\n    }\n  }\n\n  public setMask(mask) {\n    this.options.mask = Object.assign({}, this.options.mask, mask);\n\n    if (this.layer) {\n      this.layer.setMask(this.processMask());\n    }\n  }\n\n  onRemove() {\n    if (this.layer) {\n      this.layer.destroy();\n      this.layer = null as any;\n    }\n\n    // 这里临时处理，现在图层之间无共享 gl 实例，也就是说我们暂时不能公用 source\n    if (this.source) {\n      if (Array.isArray(this.source.sourceCache)) {\n        this.source.sourceCache?.forEach((s) => {\n          s?.clearTiles();\n        });\n      } else {\n        this.source.sourceCache?.clearTiles();\n      }\n    }\n\n    this._currentTiles = [];\n    this._unLimitTiles = [];\n\n    this.gl = null;\n    this._tileZoom = undefined;\n\n    return super.onRemove();\n  }\n}\n"],"names":["L","createCanvas","WindCore","defaultOptions","isArray","formatData","assign","utils","highPrecision","mat4","Matrix4","OrthographicCamera","PerspectiveCamera","Vector3","ProjectionMatrix","Renderer","Scene","Layer","LayerSourceType","TileID","i","polygon2buffer"],"mappings":"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"}