define(['./shared'], (function (Actor) { 'use strict';

let u = "";
function setWorkerUrl(url) {
  u = url;
}
function getWorkerUrl() {
  return u;
}
let deps = [];
function configDeps(d) {
  deps = d;
}
function getConfigDeps() {
  return deps;
}

function workerFactory() {
  return new Worker(getWorkerUrl());
}

const PRELOAD_POOL_ID = "__wind_layer_preloaded_worker_pool__";
class WorkerPool {
  constructor() {
    this.active = {};
  }
  /**
   * 获取 `Worker` 实例
   * @param id
   */
  acquire(id) {
    if (!this.workers) {
      this.workers = [];
      for (let i = 0; i < WorkerPool.workerCount; i++) {
        const worker = workerFactory();
        if (worker) {
          this.workers.push(worker);
        }
      }
    }
    this.active[id] = true;
    return this.workers.slice();
  }
  /**
   * 释放所有 `Worker`
   * @param id
   */
  release(id) {
    delete this.active[id];
    if (this.numActive() === 0 && this.workers) {
      this.workers.forEach((w) => {
        w.terminate();
      });
      this.workers = null;
    }
  }
  isPreloaded() {
    return !!this.active[PRELOAD_POOL_ID];
  }
  /**
   * 获取激活的`Worker` 数量
   */
  numActive() {
    return Object.keys(this.active).length;
  }
}
const hardwareConcurrency = typeof navigator !== "undefined" && navigator.hardwareConcurrency || 4;
const availableLogicalProcessors = Math.floor(hardwareConcurrency / 2);
WorkerPool.workerCount = Math.max(Math.min(availableLogicalProcessors, 6), 1);

class Dispatcher {
  constructor(workerPool, parent, dispatcherId) {
    this.workerPool = workerPool;
    this.actors = [];
    this.currentActor = 0;
    this.id = Actor.uid("dispatcher");
    this.dispatcherId = dispatcherId;
    const workers = this.workerPool.acquire(this.dispatcherId);
    for (let i = 0; i < workers.length; i++) {
      const worker = workers[i];
      const actor = new Actor.Actor(worker, parent, this.dispatcherId);
      actor.name = `Worker ${i}`;
      this.actors.push(actor);
    }
    if (!this.actors.length)
      throw new Error("No actors found");
  }
  /**
   * 广播到所有 Actor
   * @param type
   * @param data
   * @param cb
   */
  broadcast(type, data, cb) {
    cb = cb || Actor.nullFunction;
    Actor.asyncAll(
      this.actors,
      (actor, done) => {
        actor.send(type, data, done);
      },
      cb
    );
  }
  send(type, data, cb, id) {
    const actor = this.getActor(id);
    if (actor) {
      actor.send(type, data, cb);
    }
  }
  /**
   * 获取要发送消息的 `Actor`
   * TIP: 是否需要实现 `Actor` 是否占用判断
   */
  getActor(id) {
    if (id !== void 0) {
      const index = this.actors.findIndex((a) => a.id === id);
      if (index > -1) {
        this.currentActor = index;
      } else {
        this.currentActor = (this.currentActor + 1) % this.actors.length;
      }
    } else {
      this.currentActor = (this.currentActor + 1) % this.actors.length;
    }
    return this.actors[this.currentActor];
  }
  remove(removed = true) {
    this.actors.forEach((actor) => {
      actor.remove();
    });
    this.actors = [];
    if (removed)
      this.workerPool.release(this.id);
  }
}

let globalWorkerPool;
function getGlobalWorkerPool() {
  if (!globalWorkerPool) {
    globalWorkerPool = new WorkerPool();
  }
  return globalWorkerPool;
}
function prewarm() {
  const workerPool = getGlobalWorkerPool();
  workerPool.acquire(PRELOAD_POOL_ID);
}
const exported = {
  utils: Actor.utils,
  request: Actor.getRequest,
  register: Actor.register,
  configDeps,
  getConfigDeps,
  prewarm,
  getReferrer: Actor.getReferrer,
  setWorkerUrl,
  getGlobalWorkerPool,
  Actor: Actor.Actor,
  WorkerPool,
  Dispatcher,
  RequestScheduler: Actor.RequestScheduler,
  ThrottledInvoker: Actor.ThrottledInvoker
};

return exported;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
