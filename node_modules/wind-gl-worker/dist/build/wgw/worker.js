define(['./shared'], (function (Actor) { 'use strict';

class Worker {
  constructor(self2) {
    this.cancelMap = /* @__PURE__ */ new Map();
    this.self = self2;
    this.actor = new Actor.Actor(self2, this);
    this.request = Actor.getRequest();
  }
  setReferrer(dispatcherId, referrer) {
    this.referrer = referrer;
  }
  configDeps(dispatcherId, deps, callback) {
    if (deps && Array.isArray(deps) && deps.length > 0) {
      try {
        self.importScripts(...deps);
        callback(null, true);
      } catch (e) {
        Actor.asyncAll(
          deps,
          (d, done) => {
            this.request.fetch(
              {
                url: d,
                type: "arrayBuffer"
              },
              (err, data) => {
                if (err) {
                  done(err, false);
                  return console.error(err);
                }
                const url = URL.createObjectURL(new Blob([data], { type: "application/javascript" }));
                self.importScripts(url);
                setTimeout(() => {
                  URL.revokeObjectURL(url);
                });
                done(null, true);
              }
            );
          },
          callback
        );
      }
    } else {
      callback(null, true);
    }
  }
  loadData(dispatcherId, params, callback) {
    const cancelId = params?.cancelId;
    const { cancel } = this.request.fetch(params, (err, data) => {
      this.cancelMap.delete(cancelId);
      if (err) {
        callback(err);
      } else {
        if (params?.decodeType === 0) {
          this.request.arrayBuffer2Image(data, callback);
        } else if (params?.decodeType === 1) {
          this.request.arrayBuffer2unit8(data, callback);
        } else if (params?.decodeType === 2) {
          this.request.arrayBuffer2tiff(data, callback);
        } else if (params?.decodeType === 3) {
          this.request.parseExif(data, callback);
        }
      }
    });
    this.cancelMap.set(cancelId, cancel);
  }
  cancel(dispatcherId, params, callback) {
    const cancelId = params?.cancelId;
    const c = this.cancelMap.get(cancelId);
    if (c) {
      c();
      callback(null, true);
    } else {
      callback(new Error("\u65E0\u76F8\u5173\u7684\u53EF\u53D6\u6D88\u8BF7\u6C42\uFF01"));
    }
  }
}
if (Actor.isWorker()) {
  self.worker = new Worker(self);
}

return Worker;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd29ya2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xuaW1wb3J0IHsgYXN5bmNBbGwsIGlzV29ya2VyIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCBBY3RvciBmcm9tICcuL0FjdG9yJztcbmltcG9ydCB0eXBlIHsgUmVxdWVzdEFkYXB0ZXIgfSBmcm9tICcuL1JlcXVlc3QnO1xuaW1wb3J0IGdldFJlcXVlc3QgZnJvbSAnLi9SZXF1ZXN0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29ya2VyIHtcbiAgcHVibGljIHNlbGY6IGFueTtcblxuICBwdWJsaWMgYWN0b3I6IEFjdG9yO1xuXG4gIHB1YmxpYyByZWZlcnJlcjogc3RyaW5nO1xuXG4gIHB1YmxpYyByZXF1ZXN0OiBSZXF1ZXN0QWRhcHRlcjtcblxuICBwdWJsaWMgY2FuY2VsTWFwOiBNYXA8YW55LCBhbnk+ID0gbmV3IE1hcCgpO1xuXG4gIGNvbnN0cnVjdG9yKHNlbGY6IGFueSkge1xuICAgIHRoaXMuc2VsZiA9IHNlbGY7XG4gICAgdGhpcy5hY3RvciA9IG5ldyBBY3RvcihzZWxmLCB0aGlzKTtcbiAgICB0aGlzLnJlcXVlc3QgPSBnZXRSZXF1ZXN0KCk7XG4gIH1cblxuICBzZXRSZWZlcnJlcihkaXNwYXRjaGVySWQ6IHN0cmluZywgcmVmZXJyZXI6IHN0cmluZykge1xuICAgIHRoaXMucmVmZXJyZXIgPSByZWZlcnJlcjtcbiAgfVxuXG4gIGNvbmZpZ0RlcHMoZGlzcGF0Y2hlcklkOiBzdHJpbmcsIGRlcHM6IHN0cmluZ1tdLCBjYWxsYmFjazogYW55KSB7XG4gICAgaWYgKGRlcHMgJiYgQXJyYXkuaXNBcnJheShkZXBzKSAmJiBkZXBzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNlbGYuaW1wb3J0U2NyaXB0cyguLi5kZXBzKTtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgdHJ1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGFzeW5jQWxsKFxuICAgICAgICAgIGRlcHMsXG4gICAgICAgICAgKGQsIGRvbmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdC5mZXRjaChcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHVybDogZCxcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJyYXlCdWZmZXInLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgZG9uZShlcnIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW2RhdGFdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0JyB9KSk7XG4gICAgICAgICAgICAgICAgc2VsZi5pbXBvcnRTY3JpcHRzKHVybCk7XG4gICAgICAgICAgICAgICAgLy8gTW9iaWxlIFNhZmFyaVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRvbmUobnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIGxvYWREYXRhKGRpc3BhdGNoZXJJZDogc3RyaW5nLCBwYXJhbXM6IGFueSwgY2FsbGJhY2s6IGFueSkge1xuICAgIGNvbnN0IGNhbmNlbElkID0gcGFyYW1zPy5jYW5jZWxJZDtcbiAgICBjb25zdCB7IGNhbmNlbCB9ID0gdGhpcy5yZXF1ZXN0LmZldGNoKHBhcmFtcywgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgdGhpcy5jYW5jZWxNYXAuZGVsZXRlKGNhbmNlbElkKTtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXJhbXM/LmRlY29kZVR5cGUgPT09IDApIHtcbiAgICAgICAgICB0aGlzLnJlcXVlc3QuYXJyYXlCdWZmZXIySW1hZ2UoZGF0YSwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcz8uZGVjb2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgIHRoaXMucmVxdWVzdC5hcnJheUJ1ZmZlcjJ1bml0OChkYXRhLCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW1zPy5kZWNvZGVUeXBlID09PSAyKSB7XG4gICAgICAgICAgdGhpcy5yZXF1ZXN0LmFycmF5QnVmZmVyMnRpZmYoZGF0YSwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcz8uZGVjb2RlVHlwZSA9PT0gMykge1xuICAgICAgICAgIHRoaXMucmVxdWVzdC5wYXJzZUV4aWYoZGF0YSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5jYW5jZWxNYXAuc2V0KGNhbmNlbElkLCBjYW5jZWwpO1xuICB9XG5cbiAgY2FuY2VsKGRpc3BhdGNoZXJJZDogc3RyaW5nLCBwYXJhbXM6IGFueSwgY2FsbGJhY2s6IGFueSkge1xuICAgIGNvbnN0IGNhbmNlbElkID0gcGFyYW1zPy5jYW5jZWxJZDtcbiAgICBjb25zdCBjID0gdGhpcy5jYW5jZWxNYXAuZ2V0KGNhbmNlbElkKTtcbiAgICBpZiAoYykge1xuICAgICAgYygpO1xuICAgICAgY2FsbGJhY2sobnVsbCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcign5peg55u45YWz55qE5Y+v5Y+W5raI6K+35rGC77yBJykpO1xuICAgIH1cbiAgfVxufVxuXG5pZiAoaXNXb3JrZXIoKSkge1xuICAoc2VsZiBhcyBhbnkpLndvcmtlciA9IG5ldyBXb3JrZXIoc2VsZiBhcyBhbnkpO1xufVxuIl0sIm5hbWVzIjpbInNlbGYiLCJBY3RvciIsImdldFJlcXVlc3QiLCJhc3luY0FsbCIsImlzV29ya2VyIl0sIm1hcHBpbmdzIjoiOztBQU1BLE1BQXFCLE1BQU8sQ0FBQTtBQUFBLEVBVzFCLFlBQVlBLEtBQVcsRUFBQTtBQUZ2QixJQUFPLElBQUEsQ0FBQSxTQUFBLHVCQUErQixHQUFJLEVBQUEsQ0FBQTtBQUd4QyxJQUFBLElBQUEsQ0FBSyxJQUFPQSxHQUFBQSxLQUFBQSxDQUFBQTtBQUNaLElBQUEsSUFBQSxDQUFLLEtBQVEsR0FBQSxJQUFJQyxXQUFNRCxDQUFBQSxLQUFBQSxFQUFNLElBQUksQ0FBQSxDQUFBO0FBQ2pDLElBQUEsSUFBQSxDQUFLLFVBQVVFLGdCQUFXLEVBQUEsQ0FBQTtBQUFBLEdBQzVCO0FBQUEsRUFFQSxXQUFBLENBQVksY0FBc0IsUUFBa0IsRUFBQTtBQUNsRCxJQUFBLElBQUEsQ0FBSyxRQUFXLEdBQUEsUUFBQSxDQUFBO0FBQUEsR0FDbEI7QUFBQSxFQUVBLFVBQUEsQ0FBVyxZQUFzQixFQUFBLElBQUEsRUFBZ0IsUUFBZSxFQUFBO0FBQzlELElBQUEsSUFBSSxRQUFRLEtBQU0sQ0FBQSxPQUFBLENBQVEsSUFBSSxDQUFLLElBQUEsSUFBQSxDQUFLLFNBQVMsQ0FBRyxFQUFBO0FBQ2xELE1BQUksSUFBQTtBQUNGLFFBQUssSUFBQSxDQUFBLGFBQUEsQ0FBYyxHQUFHLElBQUksQ0FBQSxDQUFBO0FBQzFCLFFBQUEsUUFBQSxDQUFTLE1BQU0sSUFBSSxDQUFBLENBQUE7QUFBQSxlQUNaLENBQUcsRUFBQTtBQUNW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
